const easingRule = [{
    type: "string",
    optional: true,
    default: 'linear',
    enum: [
        'linear',
        'easeInQuad',
        'easeOutQuad',
        'easeInOutQuad',
        'easeInCubic',
        'easeOutCubic',
        'easeInOutCubic',
        'easeInQuart',
        'easeOutQuart',
        'easeInOutQuart',
        'easeInQuint',
        'easeOutQuint',
        'easeInOutQuint',
        'easeInSine',
        'easeOutSine',
        'easeInOutSine',
        'easeInExpo',
        'easeOutExpo',
        'easeInOutExpo',
        'easeInCirc',
        'easeOutCirc',
        'easeInOutCirc',
        'easeInElastic',
        'easeOutElastic',
        'easeInOutElastic',
        'easeInBack',
        'easeOutBack',
        'easeInOutBack',
        'easeInBounce',
        'easeOutBounce',
        'easeInOutBounce'
    ]
}, {
    type: 'array',
    optional: true,
    length: 4,
    items: {
        type: 'number'
    }
}];

const idRule = {
    type: 'string',
    optional: true
}

const selectorRule = {
    type: 'string',
    optional: false
}

const hostRule = {
    type: 'any',
    optional: false
}

const durationRule = {
    type: 'number',
    optional: false,
    integer: true,
    positive: true
}

const optionalStringRule = {
    type: 'string',
    optional: true
}

const fontsRule = {
    type: 'array',
    optional: true,
    itams: {
        type: 'object',
        props: {
            type: 'string',
            url: 'string'
        }
    }
}

const audioSourcesRule = {
    type: 'array',
    items: {
        type: 'object',
        strict: true,
        props: {
            src: 'string',
            id: 'string',
            mcid: { type: 'string', optional: true },
            classes: { type: 'array', optional: true, items: 'string' },
            base64: { type: 'boolean', optional: true }
        }
    },
    optional: true
}

const incidentPropsRule = {
    props: {
        type: 'object',
        props: {
            id: idRule,
            selector: { ...selectorRule, optional: true }, // can have no selector as it might inherit it from Group
            easing: easingRule,
            duration: durationRule,
            startFrom: { type: 'number', integer: true, positive: true, optional: true },
            repeats: { type: 'number', integer: true, positive: true, optional: true },
            hiatus: { type: 'number', integer: true, positive: true, optional: true },
            delay: { type: 'number', integer: true, positive: true, optional: true }
        }
    }
}

const containerParamsRule = {
    type: 'object',
    optional: true,
    props: {
        width: {
            type: 'string',
            optional: true
        },
        height: {
            type: 'string',
            optional: true
        }
    }
}

const audioOnClipsRule = {
    type: 'string',
    enum: ['on', 'off'],
    optional: true
};

const clipPropsRule = {
    props: [{
            type: 'object',
            strict: true,
            props: {
                id: idRule,
                selector: { ...selectorRule, optional: true },
                easing: easingRule,
                html: optionalStringRule,
                css: optionalStringRule,
                audioSources: audioSourcesRule,
                audio: audioOnClipsRule,
                containerParams: containerParamsRule,
                fonts: fontsRule
            }
        },
        {
            type: 'object',
            strict: true,
            props: {
                id: idRule,
                host: hostRule,
                html: optionalStringRule,
                css: optionalStringRule,
                audioSources: audioSourcesRule,
                audio: audioOnClipsRule,
                containerParams: containerParamsRule,
                fonts: fontsRule
            }
        },
        {
            type: 'object',
            strict: true,
            props: {
                root: { type: 'boolean', optional: true },
                id: idRule,
                audioSources: audioSourcesRule,
                audio: { ...audioOnClipsRule, enum: ['on'] }
            }
        }
    ]
}

const groupPropsRule = {
    selector: { ...selectorRule, optional: true }
}

const mediaPlaybackPropsRule = {
    type: 'object',
    props: {
        selector: selectorRule,
        duration: durationRule
    }
}

module.exports = {
    incidentPropsRule,
    groupPropsRule,
    mediaPlaybackPropsRule,
    clipPropsRule
}
