const easing = {
    linear: function (fraction) {
        return fraction;
    },
    easeInQuad: function (fraction) {
        return fraction * fraction;
    },
    easeOutQuad: function (fraction) {
        return fraction * (2 - fraction);
    },
    easeInOutQuad: function (fraction) {
        return fraction < .5 ? 2 * fraction * fraction : -1 + (4 - 2 * fraction) * fraction;
    },
    easeInCubic: function (fraction) {
        return fraction * fraction * fraction;
    },
    easeOutCubic: function (fraction) {
        return (--fraction) * fraction * fraction + 1;
    },
    easeInOutCubic: function (fraction) {
        return fraction < .5 ? 4 * fraction * fraction * fraction : (fraction - 1) * (2 * fraction - 2) * (2 * fraction - 2) + 1;
    },
    easeInQuart: function (fraction) {
        return fraction * fraction * fraction * fraction;
    },
    easeOutQuart: function (fraction) {
        return 1 - (--fraction) * fraction * fraction * fraction;
    },
    easeInOutQuart: function (fraction) {
        return fraction < .5 ? 8 * fraction * fraction * fraction * fraction : 1 - 8 * (--fraction) * fraction * fraction * fraction;
    },
    easeInQuint: function (fraction) {
        return fraction * fraction * fraction * fraction * fraction;
    },
    easeOutQuint: function (fraction) {
        return 1 + (--fraction) * fraction * fraction * fraction * fraction;
    },
    easeInOutQuint: function (fraction) {
        return fraction < .5 ? 16 * fraction * fraction * fraction * fraction * fraction : 1 + 16 * (--fraction) * fraction * fraction * fraction * fraction;
    },
    easeInSine: function (fraction) {
        return -1 * Math.cos(fraction / 1 * (Math.PI / 2)) + 1;
    },
    easeOutSine: function (fraction) {
        return 1 * Math.sin(fraction / 1 * (Math.PI / 2));
    },
    easeInOutSine: function (fraction) {
        return -1 / 2 * (Math.cos(Math.PI * fraction / 1) - 1);
    },
    easeInExpo: function (fraction) {
        return (fraction == 0) ? 1 : 1 * Math.pow(2, 10 * (fraction / 1 - 1));
    },
    easeOutExpo: function (fraction) {
        return (fraction == 1) ? 1 : 1 * (-Math.pow(2, -10 * fraction / 1) + 1);
    },
    easeInOutExpo: function (fraction) {
        if (fraction == 0) return 0;
        if (fraction == 1) return 1;
        if ((fraction /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (fraction - 1));
        return 1 / 2 * (-Math.pow(2, -10 * --fraction) + 2);
    },
    easeInCirc: function (fraction) {
        if (fraction >= 1) return fraction;
        return -1 * (Math.sqrt(1 - (fraction /= 1) * fraction) - 1);
    },
    easeOutCirc: function (fraction) {
        return 1 * Math.sqrt(1 - (fraction = fraction / 1 - 1) * fraction);
    },
    easeInOutCirc: function (fraction) {
        if ((fraction /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - fraction * fraction) - 1);
        return 1 / 2 * (Math.sqrt(1 - (fraction -= 2) * fraction) + 1);
    },
    easeInElastic: function (fraction) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (fraction == 0) return 0;
        if ((fraction /= 1) == 1) return 1;
        if (!p) p = 1 * .3;
        if (a < Math.abs(1)) { a = 1; var s = p / 4; }
        else var s = p / (2 * Math.PI) * Math.asin(1 / a);
        return -(a * Math.pow(2, 10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p));
    },
    easeOutElastic: function (fraction) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (fraction == 0) return 0;
        if ((fraction /= 1) == 1) return 1;
        if (!p) p = 1 * .3;
        if (a < Math.abs(1)) { a = 1; var s = p / 4; }
        else var s = p / (2 * Math.PI) * Math.asin(1 / a);
        return a * Math.pow(2, -10 * fraction) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p) + 1;
    },
    easeInOutElastic: function (fraction) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (fraction == 0) return 0;
        if ((fraction /= 1 / 2) == 2) return 1;
        if (!p) p = 1 * (.3 * 1.5);
        if (a < Math.abs(1)) { a = 1; var s = p / 4; }
        else var s = p / (2 * Math.PI) * Math.asin(1 / a);
        if (fraction < 1) return -.5 * (a * Math.pow(2, 10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p));
        return a * Math.pow(2, -10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p) * .5 + 1;
    },
    easeInBack: function (fraction) {
        var s = 1.70158;
        return 1 * (fraction /= 1) * fraction * ((s + 1) * fraction - s);
    },
    easeOutBack: function (fraction) {
        var s = 1.70158;
        return 1 * ((fraction = fraction / 1 - 1) * fraction * ((s + 1) * fraction + s) + 1);
    },
    easeInOutBack: function (fraction) {
        var s = 1.70158;
        if ((fraction /= 1 / 2) < 1) return 1 / 2 * (fraction * fraction * (((s *= (1.525)) + 1) * fraction - s));
        return 1 / 2 * ((fraction -= 2) * fraction * (((s *= (1.525)) + 1) * fraction + s) + 2);
    },
    easeInBounce: function (fraction) {
        return 1 - easing.easeOutBounce(1 - fraction);
    },
    easeOutBounce: function (fraction) {
        if ((fraction /= 1) < (1 / 2.75)) {
            return 1 * (7.5625 * fraction * fraction);
        }
        else if (fraction < (2 / 2.75)) {
            return 1 * (7.5625 * (fraction -= (1.5 / 2.75)) * fraction + .75);
        }
        else if (fraction < (2.5 / 2.75)) {
            return 1 * (7.5625 * (fraction -= (2.25 / 2.75)) * fraction + .9375);
        }
        else {
            return 1 * (7.5625 * (fraction -= (2.625 / 2.75)) * fraction + .984375);
        }
    },
    easeInOutBounce: function (fraction) {
        if (fraction < 1 / 2) return easing.easeInBounce(fraction * 2) * .5;
        return easing.easeOutBounce(fraction * 2 - 1) * .5 + 1 * .5;
    }
}

module.exports = easing;
