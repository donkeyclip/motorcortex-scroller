"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var easingRule = {
  type: "string",
  optional: true,
  "default": 'linear',
  "enum": ['linear', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', 'easeInCubic', 'easeOutCubic', 'easeInOutCubic', 'easeInQuart', 'easeOutQuart', 'easeInOutQuart', 'easeInQuint', 'easeOutQuint', 'easeInOutQuint', 'easeInSine', 'easeOutSine', 'easeInOutSine', 'easeInExpo', 'easeOutExpo', 'easeInOutExpo', 'easeInCirc', 'easeOutCirc', 'easeInOutCirc', 'easeInElastic', 'easeOutElastic', 'easeInOutElastic', 'easeInBack', 'easeOutBack', 'easeInOutBack', 'easeInBounce', 'easeOutBounce', 'easeInOutBounce']
};
var idRule = {
  type: 'string',
  optional: true
};
var selectorRule = {
  type: 'string',
  optional: false
};
var hostRule = {
  type: 'any',
  optional: false
};
var durationRule = {
  type: 'number',
  optional: false,
  integer: true,
  positive: true
};
var optionalStringRule = {
  type: 'string',
  optional: true
};
var audioSourcesRule = {
  type: 'array',
  items: {
    type: 'object',
    strict: true,
    props: {
      src: 'string',
      id: 'string',
      mcid: {
        type: 'string',
        optional: true
      },
      classes: {
        type: 'array',
        optional: true,
        items: 'string'
      },
      base64: {
        type: 'boolean',
        optional: true
      }
    }
  },
  optional: true
};
var incidentPropsRule = {
  props: {
    type: 'object',
    props: {
      id: idRule,
      selector: _objectSpread({}, selectorRule, {
        optional: true
      }),
      // can have no selector as it might inherit it from Group
      easing: easingRule,
      duration: durationRule,
      startFrom: {
        type: 'number',
        integer: true,
        positive: true,
        optional: true
      }
    }
  }
};
var containerParamsRule = {
  type: 'object',
  optional: true,
  props: {
    width: {
      type: 'string',
      optional: true
    },
    height: {
      type: 'string',
      optional: true
    }
  }
};
var audioOnClipsRule = {
  type: 'string',
  "enum": ['on', 'off'],
  optional: true
};
var clipPropsRule = {
  props: [{
    type: 'object',
    strict: true,
    props: {
      id: idRule,
      selector: selectorRule,
      easing: easingRule,
      html: optionalStringRule,
      css: optionalStringRule,
      audioSources: audioSourcesRule,
      audio: audioOnClipsRule,
      containerParams: containerParamsRule
    }
  }, {
    type: 'object',
    strict: true,
    props: {
      id: idRule,
      host: hostRule,
      easing: easingRule,
      html: optionalStringRule,
      css: optionalStringRule,
      audioSources: audioSourcesRule,
      audio: audioOnClipsRule,
      containerParams: containerParamsRule
    }
  }, {
    type: 'object',
    strict: true,
    props: {
      root: {
        type: 'boolean',
        optional: true
      },
      id: idRule,
      audioSources: audioSourcesRule,
      audio: _objectSpread({}, audioOnClipsRule, {
        "enum": ['on']
      })
    }
  }]
};
var groupPropsRule = {
  selector: _objectSpread({}, selectorRule, {
    optional: true
  })
};
var mediaPlaybackPropsRule = {
  type: 'object',
  props: {
    selector: selectorRule,
    duration: durationRule
  }
};
module.exports = {
  incidentPropsRule: incidentPropsRule,
  groupPropsRule: groupPropsRule,
  mediaPlaybackPropsRule: mediaPlaybackPropsRule,
  clipPropsRule: clipPropsRule
};