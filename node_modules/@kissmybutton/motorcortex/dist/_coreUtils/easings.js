"use strict";

var easing = {
  linear: function linear(fraction) {
    return fraction;
  },
  easeInQuad: function easeInQuad(fraction) {
    return fraction * fraction;
  },
  easeOutQuad: function easeOutQuad(fraction) {
    return fraction * (2 - fraction);
  },
  easeInOutQuad: function easeInOutQuad(fraction) {
    return fraction < .5 ? 2 * fraction * fraction : -1 + (4 - 2 * fraction) * fraction;
  },
  easeInCubic: function easeInCubic(fraction) {
    return fraction * fraction * fraction;
  },
  easeOutCubic: function easeOutCubic(fraction) {
    return --fraction * fraction * fraction + 1;
  },
  easeInOutCubic: function easeInOutCubic(fraction) {
    return fraction < .5 ? 4 * fraction * fraction * fraction : (fraction - 1) * (2 * fraction - 2) * (2 * fraction - 2) + 1;
  },
  easeInQuart: function easeInQuart(fraction) {
    return fraction * fraction * fraction * fraction;
  },
  easeOutQuart: function easeOutQuart(fraction) {
    return 1 - --fraction * fraction * fraction * fraction;
  },
  easeInOutQuart: function easeInOutQuart(fraction) {
    return fraction < .5 ? 8 * fraction * fraction * fraction * fraction : 1 - 8 * --fraction * fraction * fraction * fraction;
  },
  easeInQuint: function easeInQuint(fraction) {
    return fraction * fraction * fraction * fraction * fraction;
  },
  easeOutQuint: function easeOutQuint(fraction) {
    return 1 + --fraction * fraction * fraction * fraction * fraction;
  },
  easeInOutQuint: function easeInOutQuint(fraction) {
    return fraction < .5 ? 16 * fraction * fraction * fraction * fraction * fraction : 1 + 16 * --fraction * fraction * fraction * fraction * fraction;
  },
  easeInSine: function easeInSine(fraction) {
    return -1 * Math.cos(fraction / 1 * (Math.PI / 2)) + 1;
  },
  easeOutSine: function easeOutSine(fraction) {
    return 1 * Math.sin(fraction / 1 * (Math.PI / 2));
  },
  easeInOutSine: function easeInOutSine(fraction) {
    return -1 / 2 * (Math.cos(Math.PI * fraction / 1) - 1);
  },
  easeInExpo: function easeInExpo(fraction) {
    return fraction == 0 ? 1 : 1 * Math.pow(2, 10 * (fraction / 1 - 1));
  },
  easeOutExpo: function easeOutExpo(fraction) {
    return fraction == 1 ? 1 : 1 * (-Math.pow(2, -10 * fraction / 1) + 1);
  },
  easeInOutExpo: function easeInOutExpo(fraction) {
    if (fraction == 0) return 0;
    if (fraction == 1) return 1;
    if ((fraction /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (fraction - 1));
    return 1 / 2 * (-Math.pow(2, -10 * --fraction) + 2);
  },
  easeInCirc: function easeInCirc(fraction) {
    if (fraction >= 1) return fraction;
    return -1 * (Math.sqrt(1 - (fraction /= 1) * fraction) - 1);
  },
  easeOutCirc: function easeOutCirc(fraction) {
    return 1 * Math.sqrt(1 - (fraction = fraction / 1 - 1) * fraction);
  },
  easeInOutCirc: function easeInOutCirc(fraction) {
    if ((fraction /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - fraction * fraction) - 1);
    return 1 / 2 * (Math.sqrt(1 - (fraction -= 2) * fraction) + 1);
  },
  easeInElastic: function easeInElastic(fraction) {
    var s = 1.70158;
    var p = 0;
    var a = 1;
    if (fraction == 0) return 0;
    if ((fraction /= 1) == 1) return 1;
    if (!p) p = 1 * .3;

    if (a < Math.abs(1)) {
      a = 1;
      var s = p / 4;
    } else var s = p / (2 * Math.PI) * Math.asin(1 / a);

    return -(a * Math.pow(2, 10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p));
  },
  easeOutElastic: function easeOutElastic(fraction) {
    var s = 1.70158;
    var p = 0;
    var a = 1;
    if (fraction == 0) return 0;
    if ((fraction /= 1) == 1) return 1;
    if (!p) p = 1 * .3;

    if (a < Math.abs(1)) {
      a = 1;
      var s = p / 4;
    } else var s = p / (2 * Math.PI) * Math.asin(1 / a);

    return a * Math.pow(2, -10 * fraction) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p) + 1;
  },
  easeInOutElastic: function easeInOutElastic(fraction) {
    var s = 1.70158;
    var p = 0;
    var a = 1;
    if (fraction == 0) return 0;
    if ((fraction /= 1 / 2) == 2) return 1;
    if (!p) p = 1 * (.3 * 1.5);

    if (a < Math.abs(1)) {
      a = 1;
      var s = p / 4;
    } else var s = p / (2 * Math.PI) * Math.asin(1 / a);

    if (fraction < 1) return -.5 * (a * Math.pow(2, 10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p));
    return a * Math.pow(2, -10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p) * .5 + 1;
  },
  easeInBack: function easeInBack(fraction) {
    var s = 1.70158;
    return 1 * (fraction /= 1) * fraction * ((s + 1) * fraction - s);
  },
  easeOutBack: function easeOutBack(fraction) {
    var s = 1.70158;
    return 1 * ((fraction = fraction / 1 - 1) * fraction * ((s + 1) * fraction + s) + 1);
  },
  easeInOutBack: function easeInOutBack(fraction) {
    var s = 1.70158;
    if ((fraction /= 1 / 2) < 1) return 1 / 2 * (fraction * fraction * (((s *= 1.525) + 1) * fraction - s));
    return 1 / 2 * ((fraction -= 2) * fraction * (((s *= 1.525) + 1) * fraction + s) + 2);
  },
  easeInBounce: function easeInBounce(fraction) {
    return 1 - easing.easeOutBounce(1 - fraction);
  },
  easeOutBounce: function easeOutBounce(fraction) {
    if ((fraction /= 1) < 1 / 2.75) {
      return 1 * (7.5625 * fraction * fraction);
    } else if (fraction < 2 / 2.75) {
      return 1 * (7.5625 * (fraction -= 1.5 / 2.75) * fraction + .75);
    } else if (fraction < 2.5 / 2.75) {
      return 1 * (7.5625 * (fraction -= 2.25 / 2.75) * fraction + .9375);
    } else {
      return 1 * (7.5625 * (fraction -= 2.625 / 2.75) * fraction + .984375);
    }
  },
  easeInOutBounce: function easeInOutBounce(fraction) {
    if (fraction < 1 / 2) return easing.easeInBounce(fraction * 2) * .5;
    return easing.easeOutBounce(fraction * 2 - 1) * .5 + 1 * .5;
  }
};
module.exports = easing;