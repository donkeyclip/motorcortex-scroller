/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "4bb689da45aa593e5406";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./test/script.js")(__webpack_require__.s = "./test/script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@kissmybutton/motorcortex-flubber/dist/Flubber.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-flubber/dist/Flubber.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _kissmybutton_motorcortex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @kissmybutton/motorcortex */ \"./node_modules/@kissmybutton/motorcortex/dist/main.js\");\n/* harmony import */ var _kissmybutton_motorcortex__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_kissmybutton_motorcortex__WEBPACK_IMPORTED_MODULE_0__);\n\nconst flubber = __webpack_require__(/*! flubber */ \"./node_modules/flubber/build/flubber.min.js\");\n\nclass Flubber extends _kissmybutton_motorcortex__WEBPACK_IMPORTED_MODULE_0___default.a.API.MonoIncident {\n    onGetContext() {\n        this.interpolator = flubber.interpolate(this.getInitialValue('d'), this.animAttributes.d);\n    }\n\n    getScratchValue(id, attr) {\n        // console.log(this.element.getAttribute('d'));\n        return this.element.getAttribute('d');\n    }\n\n    onProgress(t) {\n        this.element.setAttribute(\"d\", this.interpolator(t));\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Flubber);\n//# sourceMappingURL=Flubber.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1mbHViYmVyL2Rpc3QvRmx1YmJlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LWZsdWJiZXIvZGlzdC9GbHViYmVyLmpzPzdlMmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1vdG9yQ29ydGV4IGZyb20gXCJAa2lzc215YnV0dG9uL21vdG9yY29ydGV4XCI7XG5jb25zdCBmbHViYmVyID0gcmVxdWlyZSgnZmx1YmJlcicpO1xuXG5jbGFzcyBGbHViYmVyIGV4dGVuZHMgTW90b3JDb3J0ZXguQVBJLk1vbm9JbmNpZGVudCB7XG4gICAgb25HZXRDb250ZXh0KCkge1xuICAgICAgICB0aGlzLmludGVycG9sYXRvciA9IGZsdWJiZXIuaW50ZXJwb2xhdGUodGhpcy5nZXRJbml0aWFsVmFsdWUoJ2QnKSwgdGhpcy5hbmltQXR0cmlidXRlcy5kKTtcbiAgICB9XG5cbiAgICBnZXRTY3JhdGNoVmFsdWUoaWQsIGF0dHIpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZCcpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2QnKTtcbiAgICB9XG5cbiAgICBvblByb2dyZXNzKHQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5pbnRlcnBvbGF0b3IodCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmx1YmJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZsdWJiZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-flubber/dist/Flubber.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex-flubber/dist/main.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex-flubber/dist/main.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Flubber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Flubber */ \"./node_modules/@kissmybutton/motorcortex-flubber/dist/Flubber.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  npm_name: \"@kissmybutton/motorcortex-flubber\",\n  incidents: [{\n    exportable: _Flubber__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    name: \"Flubber\"\n  }]\n});\n//# sourceMappingURL=main.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC1mbHViYmVyL2Rpc3QvbWFpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4LWZsdWJiZXIvZGlzdC9tYWluLmpzPzk1MmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZsdWJiZXIgZnJvbSBcIi4vRmx1YmJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5wbV9uYW1lOiBcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtZmx1YmJlclwiLFxuICBpbmNpZGVudHM6IFt7XG4gICAgZXhwb3J0YWJsZTogRmx1YmJlcixcbiAgICBuYW1lOiBcIkZsdWJiZXJcIlxuICB9XVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW4uanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex-flubber/dist/main.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ExtendableClip = __webpack_require__(/*! ../Clip/ExtendableClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar AudioContextHandler = __webpack_require__(/*! ./AudioContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js\");\n\nvar AudioNode = __webpack_require__(/*! ./helpers/AudioNode */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioClip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(AudioClip, _ExtendableClip);\n\n  function AudioClip(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, AudioClip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioClip).call(this, attrs, props));\n    _this.audioNode = new AudioNode();\n\n    _this.audioNode.connect(helper.getAudioContext().destination);\n\n    var contextHanlder = new AudioContextHandler(_this.props.audioSources, _this.audioNode);\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: true\n    });\n    _this.audioClip = true;\n    return _this;\n  }\n\n  _createClass(AudioClip, [{\n    key: \"onProgress\",\n    value: function onProgress(fraction, ms, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      _get(_getPrototypeOf(AudioClip.prototype), \"onProgress\", this).call(this, fraction, ms, this.id, forceReset);\n    }\n  }, {\n    key: \"_onGetContextOnce\",\n    value: function _onGetContextOnce(parentClipContext) {\n      /*\n      context.master {gain, pan, highpass, lowpass}\n      */\n      // as highpass is the first node of master in row\n      this.audioNode.disconnect();\n      this.parentClipContext = parentClipContext;\n      this.audioNode.connect(parentClipContext.masterNode.input);\n    }\n  }, {\n    key: \"lastWish\",\n    value: function lastWish() {\n      this.audioNode.output.disconnect();\n      this.audioNode.output.connect(helper.getAudioContext().destination);\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(vol) {\n      this.audioNode.output.gain.value = vol;\n    }\n  }]);\n\n  return AudioClip;\n}(ExtendableClip);\n\nmodule.exports = AudioClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _base64ToArrayBuffer(base64) {\n  var binary_string = window.atob(base64);\n  var len = binary_string.length;\n  var bytes = new Uint8Array(len);\n\n  for (var i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n\n  return bytes.buffer;\n}\n\nvar datamcidRegex = /\\[data(-mcid=\"+\\w+\")+\\]/g;\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioNode = __webpack_require__(/*! ./helpers/AudioNode */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\");\n\nvar PubSub =\n/*#__PURE__*/\nfunction () {\n  function PubSub() {\n    _classCallCheck(this, PubSub);\n\n    this.subscribers = [];\n  }\n\n  _createClass(PubSub, [{\n    key: \"sub\",\n    value: function sub(id, method) {\n      this.subscribers.push(method);\n    }\n  }, {\n    key: \"pub\",\n    value: function pub(argument) {\n      for (var i = 0; i < this.subscribers.length; i++) {\n        this.subscribers[i](argument);\n      }\n    }\n  }]);\n\n  return PubSub;\n}();\n/**\n * Specs:\n * AudioContext Handler keeps all the audio sources.\n * The audio sources are passed in the following format:\n * - src (the source of the sound)\n * - base64 (boolean, defaults to false. If the sound is base64 it's been treated\n *      in a different way)\n * - id (must be unique)\n * - classes (an array of belonging classes)\n *\n * The SoundContextHanlder creates a media element of the following format:\n * media: {\n *  src\n *  id\n *  classes\n *  base64\n *  buffer\n *  nodes: {\n *      stereo\n *      highpass\n *      lowpass\n *      gain\n *      audioNode\n *  }\n * }\n *\n * Finally the SoundContextHandler has its own nodes (the master) which look like this:\n * master: {\n *      stereo\n *      highpass\n *      lowpass\n *      gain\n * }\n **/\n\n\nvar AudioContextHandler =\n/*#__PURE__*/\nfunction () {\n  function AudioContextHandler() {\n    var _this = this;\n\n    var audioSources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var masterNode = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, AudioContextHandler);\n\n    // variables to be used for checking context rediness\n    this.totalSources = audioSources.length; // initialisation of the final audio resources colleciton\n\n    this.audioSources = {};\n    this.elementsByMCID = {}; // iterate on audioSource to create the audioSources collection\n\n    var _loop = function _loop(i) {\n      var audioSource = audioSources[i];\n      var audioResource = {\n        mcid: audioSource.mcid || helper.getAnId(),\n        id: audioSource.id,\n        src: audioSource.src,\n        classes: audioSource.classes || [],\n        base64: audioSource.base64 || false,\n        pubSub: new PubSub(),\n        soundLoaded: false,\n        startValues: audioSource.startValues || {}\n      };\n      _this.audioSources[audioResource.id] = audioResource;\n      _this.elementsByMCID[audioResource.mcid] = audioResource;\n\n      if (audioSource.base64 === true) {\n        helper.getAudioContext().decodeAudioData(_base64ToArrayBuffer(audioSource.src), function (buffer) {\n          _this._setBuffer(audioResource, buffer, masterNode);\n        });\n      } else {\n        var request = new XMLHttpRequest();\n        request.open('GET', audioResource.src, true);\n        request.responseType = 'arraybuffer'; // Decode asynchronously\n\n        _this.soundLoaded = false;\n\n        request.onload = function () {\n          helper.getAudioContext().decodeAudioData(request.response, function (buffer) {\n            _this._setBuffer(audioResource, buffer, masterNode);\n          }, _this.onError);\n        };\n\n        request.send();\n      }\n    };\n\n    for (var i = 0; i < audioSources.length; i++) {\n      _loop(i);\n    }\n\n    this.context = {\n      document: document,\n      window: window,\n      rootElement: document.body,\n      unmount: function unmount() {},\n      masterNode: masterNode,\n      audioContext: helper.getAudioContext(),\n      getElements: this.getElements.bind(this),\n      getMCID: this.getMCID.bind(this),\n      setMCID: this.setMCID.bind(this),\n      getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n      getElementByMCID: this.getElementByMCID.bind(this)\n    };\n  }\n\n  _createClass(AudioContextHandler, [{\n    key: \"_setBuffer\",\n    value: function _setBuffer(audioResource, buffer, masterNode) {\n      audioResource.soundLoaded = true;\n      audioResource.buffer = buffer;\n      audioResource.effectsAudioNode = new AudioNode();\n      audioResource.effectsAudioNode.connect(masterNode.input);\n      audioResource.pubSub.pub();\n    }\n  }, {\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n        return this.elementsByMCID[mcid];\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(selector) {\n      if (selector.charAt(0) === \"~\") {\n        selector = selector.substr(1);\n\n        if (selector.charAt(0) === \"#\") {\n          if (Object.prototype.hasOwnProperty.call(this.audioSources, selector.substr(1))) {\n            return [this.audioSources[selector.substr(1)]];\n          } else {\n            return [];\n          }\n        } else if (selector.charAt(0) === \".\") {\n          var className = selector.substr(1);\n          var toReturn = [];\n\n          for (var source in this.audioSources) {\n            if (source.classes.indexOf(className) >= 0) {\n              toReturn.push(source);\n            }\n          }\n\n          return toReturn;\n        }\n      } else if (datamcidRegex.exec(selector)) {\n        var mcid = selector.split('\"')[1];\n        return this.elementsByMCID[mcid];\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"getMCID\",\n    value: function getMCID(element) {\n      return element.mcid;\n    }\n  }, {\n    key: \"setMCID\",\n    value: function setMCID(element, mcid) {\n      element.mcid = mcid;\n    }\n  }, {\n    key: \"getElementSelectorByMCID\",\n    value: function getElementSelectorByMCID(mcid) {\n      return \"[data-mcid=\\\"\".concat(mcid, \"\\\"]\");\n    }\n  }]);\n\n  return AudioContextHandler;\n}();\n\nmodule.exports = AudioContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL0F1ZGlvQ29udGV4dEhhbmRsZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL0F1ZGlvQ29udGV4dEhhbmRsZXIuanM/ZWUzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfYmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjQpIHtcbiAgdmFyIGJpbmFyeV9zdHJpbmcgPSB3aW5kb3cuYXRvYihiYXNlNjQpO1xuICB2YXIgbGVuID0gYmluYXJ5X3N0cmluZy5sZW5ndGg7XG4gIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGJ5dGVzW2ldID0gYmluYXJ5X3N0cmluZy5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzLmJ1ZmZlcjtcbn1cblxudmFyIGRhdGFtY2lkUmVnZXggPSAvXFxbZGF0YSgtbWNpZD1cIitcXHcrXCIpK1xcXS9nO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIEF1ZGlvTm9kZSA9IHJlcXVpcmUoJy4vaGVscGVycy9BdWRpb05vZGUnKTtcblxudmFyIFB1YlN1YiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFB1YlN1YigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHViU3ViKTtcblxuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQdWJTdWIsIFt7XG4gICAga2V5OiBcInN1YlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWIoaWQsIG1ldGhvZCkge1xuICAgICAgdGhpcy5zdWJzY3JpYmVycy5wdXNoKG1ldGhvZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInB1YlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwdWIoYXJndW1lbnQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJzY3JpYmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJzW2ldKGFyZ3VtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHViU3ViO1xufSgpO1xuLyoqXG4gKiBTcGVjczpcbiAqIEF1ZGlvQ29udGV4dCBIYW5kbGVyIGtlZXBzIGFsbCB0aGUgYXVkaW8gc291cmNlcy5cbiAqIFRoZSBhdWRpbyBzb3VyY2VzIGFyZSBwYXNzZWQgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gKiAtIHNyYyAodGhlIHNvdXJjZSBvZiB0aGUgc291bmQpXG4gKiAtIGJhc2U2NCAoYm9vbGVhbiwgZGVmYXVsdHMgdG8gZmFsc2UuIElmIHRoZSBzb3VuZCBpcyBiYXNlNjQgaXQncyBiZWVuIHRyZWF0ZWRcbiAqICAgICAgaW4gYSBkaWZmZXJlbnQgd2F5KVxuICogLSBpZCAobXVzdCBiZSB1bmlxdWUpXG4gKiAtIGNsYXNzZXMgKGFuIGFycmF5IG9mIGJlbG9uZ2luZyBjbGFzc2VzKVxuICpcbiAqIFRoZSBTb3VuZENvbnRleHRIYW5sZGVyIGNyZWF0ZXMgYSBtZWRpYSBlbGVtZW50IG9mIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICogbWVkaWE6IHtcbiAqICBzcmNcbiAqICBpZFxuICogIGNsYXNzZXNcbiAqICBiYXNlNjRcbiAqICBidWZmZXJcbiAqICBub2Rlczoge1xuICogICAgICBzdGVyZW9cbiAqICAgICAgaGlnaHBhc3NcbiAqICAgICAgbG93cGFzc1xuICogICAgICBnYWluXG4gKiAgICAgIGF1ZGlvTm9kZVxuICogIH1cbiAqIH1cbiAqXG4gKiBGaW5hbGx5IHRoZSBTb3VuZENvbnRleHRIYW5kbGVyIGhhcyBpdHMgb3duIG5vZGVzICh0aGUgbWFzdGVyKSB3aGljaCBsb29rIGxpa2UgdGhpczpcbiAqIG1hc3Rlcjoge1xuICogICAgICBzdGVyZW9cbiAqICAgICAgaGlnaHBhc3NcbiAqICAgICAgbG93cGFzc1xuICogICAgICBnYWluXG4gKiB9XG4gKiovXG5cblxudmFyIEF1ZGlvQ29udGV4dEhhbmRsZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBdWRpb0NvbnRleHRIYW5kbGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgYXVkaW9Tb3VyY2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgbWFzdGVyTm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF1ZGlvQ29udGV4dEhhbmRsZXIpO1xuXG4gICAgLy8gdmFyaWFibGVzIHRvIGJlIHVzZWQgZm9yIGNoZWNraW5nIGNvbnRleHQgcmVkaW5lc3NcbiAgICB0aGlzLnRvdGFsU291cmNlcyA9IGF1ZGlvU291cmNlcy5sZW5ndGg7IC8vIGluaXRpYWxpc2F0aW9uIG9mIHRoZSBmaW5hbCBhdWRpbyByZXNvdXJjZXMgY29sbGVjaXRvblxuXG4gICAgdGhpcy5hdWRpb1NvdXJjZXMgPSB7fTtcbiAgICB0aGlzLmVsZW1lbnRzQnlNQ0lEID0ge307IC8vIGl0ZXJhdGUgb24gYXVkaW9Tb3VyY2UgdG8gY3JlYXRlIHRoZSBhdWRpb1NvdXJjZXMgY29sbGVjdGlvblxuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkge1xuICAgICAgdmFyIGF1ZGlvU291cmNlID0gYXVkaW9Tb3VyY2VzW2ldO1xuICAgICAgdmFyIGF1ZGlvUmVzb3VyY2UgPSB7XG4gICAgICAgIG1jaWQ6IGF1ZGlvU291cmNlLm1jaWQgfHwgaGVscGVyLmdldEFuSWQoKSxcbiAgICAgICAgaWQ6IGF1ZGlvU291cmNlLmlkLFxuICAgICAgICBzcmM6IGF1ZGlvU291cmNlLnNyYyxcbiAgICAgICAgY2xhc3NlczogYXVkaW9Tb3VyY2UuY2xhc3NlcyB8fCBbXSxcbiAgICAgICAgYmFzZTY0OiBhdWRpb1NvdXJjZS5iYXNlNjQgfHwgZmFsc2UsXG4gICAgICAgIHB1YlN1YjogbmV3IFB1YlN1YigpLFxuICAgICAgICBzb3VuZExvYWRlZDogZmFsc2UsXG4gICAgICAgIHN0YXJ0VmFsdWVzOiBhdWRpb1NvdXJjZS5zdGFydFZhbHVlcyB8fCB7fVxuICAgICAgfTtcbiAgICAgIF90aGlzLmF1ZGlvU291cmNlc1thdWRpb1Jlc291cmNlLmlkXSA9IGF1ZGlvUmVzb3VyY2U7XG4gICAgICBfdGhpcy5lbGVtZW50c0J5TUNJRFthdWRpb1Jlc291cmNlLm1jaWRdID0gYXVkaW9SZXNvdXJjZTtcblxuICAgICAgaWYgKGF1ZGlvU291cmNlLmJhc2U2NCA9PT0gdHJ1ZSkge1xuICAgICAgICBoZWxwZXIuZ2V0QXVkaW9Db250ZXh0KCkuZGVjb2RlQXVkaW9EYXRhKF9iYXNlNjRUb0FycmF5QnVmZmVyKGF1ZGlvU291cmNlLnNyYyksIGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICBfdGhpcy5fc2V0QnVmZmVyKGF1ZGlvUmVzb3VyY2UsIGJ1ZmZlciwgbWFzdGVyTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgcmVxdWVzdC5vcGVuKCdHRVQnLCBhdWRpb1Jlc291cmNlLnNyYywgdHJ1ZSk7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJzsgLy8gRGVjb2RlIGFzeW5jaHJvbm91c2x5XG5cbiAgICAgICAgX3RoaXMuc291bmRMb2FkZWQgPSBmYWxzZTtcblxuICAgICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBoZWxwZXIuZ2V0QXVkaW9Db250ZXh0KCkuZGVjb2RlQXVkaW9EYXRhKHJlcXVlc3QucmVzcG9uc2UsIGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICAgIF90aGlzLl9zZXRCdWZmZXIoYXVkaW9SZXNvdXJjZSwgYnVmZmVyLCBtYXN0ZXJOb2RlKTtcbiAgICAgICAgICB9LCBfdGhpcy5vbkVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXF1ZXN0LnNlbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdWRpb1NvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIF9sb29wKGkpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dCA9IHtcbiAgICAgIGRvY3VtZW50OiBkb2N1bWVudCxcbiAgICAgIHdpbmRvdzogd2luZG93LFxuICAgICAgcm9vdEVsZW1lbnQ6IGRvY3VtZW50LmJvZHksXG4gICAgICB1bm1vdW50OiBmdW5jdGlvbiB1bm1vdW50KCkge30sXG4gICAgICBtYXN0ZXJOb2RlOiBtYXN0ZXJOb2RlLFxuICAgICAgYXVkaW9Db250ZXh0OiBoZWxwZXIuZ2V0QXVkaW9Db250ZXh0KCksXG4gICAgICBnZXRFbGVtZW50czogdGhpcy5nZXRFbGVtZW50cy5iaW5kKHRoaXMpLFxuICAgICAgZ2V0TUNJRDogdGhpcy5nZXRNQ0lELmJpbmQodGhpcyksXG4gICAgICBzZXRNQ0lEOiB0aGlzLnNldE1DSUQuYmluZCh0aGlzKSxcbiAgICAgIGdldEVsZW1lbnRTZWxlY3RvckJ5TUNJRDogdGhpcy5nZXRFbGVtZW50U2VsZWN0b3JCeU1DSUQuYmluZCh0aGlzKSxcbiAgICAgIGdldEVsZW1lbnRCeU1DSUQ6IHRoaXMuZ2V0RWxlbWVudEJ5TUNJRC5iaW5kKHRoaXMpXG4gICAgfTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBdWRpb0NvbnRleHRIYW5kbGVyLCBbe1xuICAgIGtleTogXCJfc2V0QnVmZmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRCdWZmZXIoYXVkaW9SZXNvdXJjZSwgYnVmZmVyLCBtYXN0ZXJOb2RlKSB7XG4gICAgICBhdWRpb1Jlc291cmNlLnNvdW5kTG9hZGVkID0gdHJ1ZTtcbiAgICAgIGF1ZGlvUmVzb3VyY2UuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgYXVkaW9SZXNvdXJjZS5lZmZlY3RzQXVkaW9Ob2RlID0gbmV3IEF1ZGlvTm9kZSgpO1xuICAgICAgYXVkaW9SZXNvdXJjZS5lZmZlY3RzQXVkaW9Ob2RlLmNvbm5lY3QobWFzdGVyTm9kZS5pbnB1dCk7XG4gICAgICBhdWRpb1Jlc291cmNlLnB1YlN1Yi5wdWIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RWxlbWVudEJ5TUNJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbGVtZW50QnlNQ0lEKG1jaWQpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5lbGVtZW50c0J5TUNJRCwgbWNpZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNCeU1DSURbbWNpZF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RWxlbWVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudHMoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3Rvci5jaGFyQXQoMCkgPT09IFwiflwiKSB7XG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3Iuc3Vic3RyKDEpO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmF1ZGlvU291cmNlcywgc2VsZWN0b3Iuc3Vic3RyKDEpKSkge1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmF1ZGlvU291cmNlc1tzZWxlY3Rvci5zdWJzdHIoMSldXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rvci5jaGFyQXQoMCkgPT09IFwiLlwiKSB7XG4gICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IHNlbGVjdG9yLnN1YnN0cigxKTtcbiAgICAgICAgICB2YXIgdG9SZXR1cm4gPSBbXTtcblxuICAgICAgICAgIGZvciAodmFyIHNvdXJjZSBpbiB0aGlzLmF1ZGlvU291cmNlcykge1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5jbGFzc2VzLmluZGV4T2YoY2xhc3NOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAgIHRvUmV0dXJuLnB1c2goc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdG9SZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGF0YW1jaWRSZWdleC5leGVjKHNlbGVjdG9yKSkge1xuICAgICAgICB2YXIgbWNpZCA9IHNlbGVjdG9yLnNwbGl0KCdcIicpWzFdO1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c0J5TUNJRFttY2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TUNJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNQ0lEKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm1jaWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldE1DSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TUNJRChlbGVtZW50LCBtY2lkKSB7XG4gICAgICBlbGVtZW50Lm1jaWQgPSBtY2lkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFbGVtZW50U2VsZWN0b3JCeU1DSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lEKG1jaWQpIHtcbiAgICAgIHJldHVybiBcIltkYXRhLW1jaWQ9XFxcIlwiLmNvbmNhdChtY2lkLCBcIlxcXCJdXCIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdWRpb0NvbnRleHRIYW5kbGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1ZGlvQ29udGV4dEhhbmRsZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Effect.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Effect.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MonoIncident = __webpack_require__(/*! ../../BaseClasses/MonoIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n/**\n * Effect class takes on constructor:\n * attrs:\n *  - animatedAttrs: valid animated attributes are \"gain\", \"pan\"\n *  -\n **/\n\n\nvar Effect =\n/*#__PURE__*/\nfunction (_MonoIncident) {\n  _inherits(Effect, _MonoIncident);\n\n  function Effect() {\n    _classCallCheck(this, Effect);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Effect).apply(this, arguments));\n  }\n\n  _createClass(Effect, [{\n    key: \"onProgress\",\n    value: function onProgress(fraction, ms) {\n      var _this = this;\n\n      if (this.element.soundLoaded === false) {\n        this.setBlock('loading sound');\n        this.element.pubSub.sub(this.id, function () {\n          _this.unblock();\n        });\n        return false;\n      }\n\n      if (this.attributeKey === \"gain\") {\n        var gain = (this.targetValue - this.getInitialValue()) * fraction + this.getInitialValue(); // console.log(this.props.nodes.stereoPan.pan.value);\n\n        this.element.effectsAudioNode.gainNode.gain.value = gain;\n      } else if (this.attributeKey === \"pan\") {\n        var pan = (this.targetValue - this.getInitialValue()) * fraction + this.getInitialValue(); // console.log(this.props.nodes.stereoPan.pan.value);\n\n        this.element.effectsAudioNode.pannerNode.pan.value = pan;\n      }\n    }\n  }, {\n    key: \"getScratchValue\",\n    value: function getScratchValue() {\n      if (this.attributeKey === \"pan\") {\n        if (this.element.startValues.hasOwnProperty('pan')) {\n          return this.element.startValues.pan;\n        } else {\n          return 0;\n        }\n      } else if (this.attributeKey === \"gain\") {\n        if (this.element.startValues.hasOwnProperty('gain')) {\n          return this.element.startValues.gain;\n        } else {\n          return 1;\n        }\n      }\n    }\n  }]);\n\n  return Effect;\n}(MonoIncident);\n\nmodule.exports = Effect;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL0luY2lkZW50cy9FZmZlY3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL0luY2lkZW50cy9FZmZlY3QuanM/YTBkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBNb25vSW5jaWRlbnQgPSByZXF1aXJlKCcuLi8uLi9CYXNlQ2xhc3Nlcy9Nb25vSW5jaWRlbnQnKTtcbi8qKlxuICogRWZmZWN0IGNsYXNzIHRha2VzIG9uIGNvbnN0cnVjdG9yOlxuICogYXR0cnM6XG4gKiAgLSBhbmltYXRlZEF0dHJzOiB2YWxpZCBhbmltYXRlZCBhdHRyaWJ1dGVzIGFyZSBcImdhaW5cIiwgXCJwYW5cIlxuICogIC1cbiAqKi9cblxuXG52YXIgRWZmZWN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTW9ub0luY2lkZW50KSB7XG4gIF9pbmhlcml0cyhFZmZlY3QsIF9Nb25vSW5jaWRlbnQpO1xuXG4gIGZ1bmN0aW9uIEVmZmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRWZmZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRWZmZWN0KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFZmZlY3QsIFt7XG4gICAga2V5OiBcIm9uUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcyhmcmFjdGlvbiwgbXMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmVsZW1lbnQuc291bmRMb2FkZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuc2V0QmxvY2soJ2xvYWRpbmcgc291bmQnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnB1YlN1Yi5zdWIodGhpcy5pZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnVuYmxvY2soKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlS2V5ID09PSBcImdhaW5cIikge1xuICAgICAgICB2YXIgZ2FpbiA9ICh0aGlzLnRhcmdldFZhbHVlIC0gdGhpcy5nZXRJbml0aWFsVmFsdWUoKSkgKiBmcmFjdGlvbiArIHRoaXMuZ2V0SW5pdGlhbFZhbHVlKCk7IC8vIGNvbnNvbGUubG9nKHRoaXMucHJvcHMubm9kZXMuc3RlcmVvUGFuLnBhbi52YWx1ZSk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmVmZmVjdHNBdWRpb05vZGUuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IGdhaW47XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYXR0cmlidXRlS2V5ID09PSBcInBhblwiKSB7XG4gICAgICAgIHZhciBwYW4gPSAodGhpcy50YXJnZXRWYWx1ZSAtIHRoaXMuZ2V0SW5pdGlhbFZhbHVlKCkpICogZnJhY3Rpb24gKyB0aGlzLmdldEluaXRpYWxWYWx1ZSgpOyAvLyBjb25zb2xlLmxvZyh0aGlzLnByb3BzLm5vZGVzLnN0ZXJlb1Bhbi5wYW4udmFsdWUpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5lZmZlY3RzQXVkaW9Ob2RlLnBhbm5lck5vZGUucGFuLnZhbHVlID0gcGFuO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTY3JhdGNoVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2NyYXRjaFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlS2V5ID09PSBcInBhblwiKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQuc3RhcnRWYWx1ZXMuaGFzT3duUHJvcGVydHkoJ3BhbicpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdGFydFZhbHVlcy5wYW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hdHRyaWJ1dGVLZXkgPT09IFwiZ2FpblwiKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQuc3RhcnRWYWx1ZXMuaGFzT3duUHJvcGVydHkoJ2dhaW4nKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc3RhcnRWYWx1ZXMuZ2FpbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFZmZlY3Q7XG59KE1vbm9JbmNpZGVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWZmZWN0OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Effect.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MediaPlayIncident = __webpack_require__(/*! ../../BaseClasses/MediaPlayIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/**\n * expects on its props:\n * - selector\n * - duration\n * - startFrom (optional)\n **/\n\nvar AudioPlayback =\n/*#__PURE__*/\nfunction (_MediaPlayIncident) {\n  _inherits(AudioPlayback, _MediaPlayIncident);\n\n  function AudioPlayback() {\n    _classCallCheck(this, AudioPlayback);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AudioPlayback).apply(this, arguments));\n  }\n\n  _createClass(AudioPlayback, [{\n    key: \"play\",\n    value: function play(millisecond) {\n      var _this = this;\n\n      if (this.element.soundLoaded === false) {\n        this.setBlock('loading sound');\n        this.element.pubSub.sub(this.id, function () {\n          _this.unblock();\n        });\n        return false;\n      }\n\n      var startFrom = 0;\n\n      if (Object.prototype.hasOwnProperty.call(this.props, 'startFrom')) {\n        startFrom = this.props.startFrom;\n      }\n\n      this.audioNode = helper.getAudioContext().createBufferSource();\n      this.audioNode.buffer = this.element.buffer;\n      this.audioNode.connect(this.element.effectsAudioNode.input);\n      this.audioNode.start(0, (millisecond + startFrom) / 1000);\n      return true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.audioNode.stop();\n    }\n  }]);\n\n  return AudioPlayback;\n}(MediaPlayIncident);\n\nmodule.exports = AudioPlayback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL0luY2lkZW50cy9QbGF5YmFjay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQXVkaW8vSW5jaWRlbnRzL1BsYXliYWNrLmpzPzk5NzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgTWVkaWFQbGF5SW5jaWRlbnQgPSByZXF1aXJlKCcuLi8uLi9CYXNlQ2xhc3Nlcy9NZWRpYVBsYXlJbmNpZGVudCcpO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcbi8qKlxuICogZXhwZWN0cyBvbiBpdHMgcHJvcHM6XG4gKiAtIHNlbGVjdG9yXG4gKiAtIGR1cmF0aW9uXG4gKiAtIHN0YXJ0RnJvbSAob3B0aW9uYWwpXG4gKiovXG5cbnZhciBBdWRpb1BsYXliYWNrID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTWVkaWFQbGF5SW5jaWRlbnQpIHtcbiAgX2luaGVyaXRzKEF1ZGlvUGxheWJhY2ssIF9NZWRpYVBsYXlJbmNpZGVudCk7XG5cbiAgZnVuY3Rpb24gQXVkaW9QbGF5YmFjaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXVkaW9QbGF5YmFjayk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEF1ZGlvUGxheWJhY2spLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEF1ZGlvUGxheWJhY2ssIFt7XG4gICAga2V5OiBcInBsYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheShtaWxsaXNlY29uZCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5zb3VuZExvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5zZXRCbG9jaygnbG9hZGluZyBzb3VuZCcpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucHViU3ViLnN1Yih0aGlzLmlkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMudW5ibG9jaygpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRGcm9tID0gMDtcblxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnByb3BzLCAnc3RhcnRGcm9tJykpIHtcbiAgICAgICAgc3RhcnRGcm9tID0gdGhpcy5wcm9wcy5zdGFydEZyb207XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXVkaW9Ob2RlID0gaGVscGVyLmdldEF1ZGlvQ29udGV4dCgpLmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgdGhpcy5hdWRpb05vZGUuYnVmZmVyID0gdGhpcy5lbGVtZW50LmJ1ZmZlcjtcbiAgICAgIHRoaXMuYXVkaW9Ob2RlLmNvbm5lY3QodGhpcy5lbGVtZW50LmVmZmVjdHNBdWRpb05vZGUuaW5wdXQpO1xuICAgICAgdGhpcy5hdWRpb05vZGUuc3RhcnQoMCwgKG1pbGxpc2Vjb25kICsgc3RhcnRGcm9tKSAvIDEwMDApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuYXVkaW9Ob2RlLnN0b3AoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXVkaW9QbGF5YmFjaztcbn0oTWVkaWFQbGF5SW5jaWRlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1ZGlvUGxheWJhY2s7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioNode =\n/*#__PURE__*/\nfunction () {\n  function AudioNode() {\n    _classCallCheck(this, AudioNode);\n\n    // audio context initialisation\n    var audioContext = helper.getAudioContext();\n    this.output = audioContext.createGain();\n    this.gainNode = audioContext.createGain();\n\n    if (audioContext.createStereoPanner) {\n      this.pannerNode = audioContext.createStereoPanner(); // if it is supported by the browser\n    } // this.highpassNode = audioContext.createBiquadFilter();\n    // this.lowpassNode = audioContext.createBiquadFilter();\n    // this.lowpassNode.connect(this.highpassNode);\n    // this.highpassNode.connect(this.pannerNode);\n\n\n    if (audioContext.createStereoPanner) {\n      this.pannerNode.connect(this.gainNode);\n      this.gainNode.connect(this.output);\n      this.input = this.pannerNode;\n    } else {\n      this.gainNode.connect(this.output);\n      this.input = this.gainNode;\n    }\n  }\n\n  _createClass(AudioNode, [{\n    key: \"connect\",\n    value: function connect(master) {\n      this.output.connect(master);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(master) {\n      this.output.disconnect();\n    }\n  }]);\n\n  return AudioNode;\n}();\n\nmodule.exports = AudioNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL2hlbHBlcnMvQXVkaW9Ob2RlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9BdWRpby9oZWxwZXJzL0F1ZGlvTm9kZS5qcz9hZmRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuXG52YXIgQXVkaW9Ob2RlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXVkaW9Ob2RlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBdWRpb05vZGUpO1xuXG4gICAgLy8gYXVkaW8gY29udGV4dCBpbml0aWFsaXNhdGlvblxuICAgIHZhciBhdWRpb0NvbnRleHQgPSBoZWxwZXIuZ2V0QXVkaW9Db250ZXh0KCk7XG4gICAgdGhpcy5vdXRwdXQgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIHRoaXMuZ2Fpbk5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuXG4gICAgaWYgKGF1ZGlvQ29udGV4dC5jcmVhdGVTdGVyZW9QYW5uZXIpIHtcbiAgICAgIHRoaXMucGFubmVyTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVTdGVyZW9QYW5uZXIoKTsgLy8gaWYgaXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyXG4gICAgfSAvLyB0aGlzLmhpZ2hwYXNzTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcbiAgICAvLyB0aGlzLmxvd3Bhc3NOb2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xuICAgIC8vIHRoaXMubG93cGFzc05vZGUuY29ubmVjdCh0aGlzLmhpZ2hwYXNzTm9kZSk7XG4gICAgLy8gdGhpcy5oaWdocGFzc05vZGUuY29ubmVjdCh0aGlzLnBhbm5lck5vZGUpO1xuXG5cbiAgICBpZiAoYXVkaW9Db250ZXh0LmNyZWF0ZVN0ZXJlb1Bhbm5lcikge1xuICAgICAgdGhpcy5wYW5uZXJOb2RlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG4gICAgICB0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuICAgICAgdGhpcy5pbnB1dCA9IHRoaXMucGFubmVyTm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nYWluTm9kZS5jb25uZWN0KHRoaXMub3V0cHV0KTtcbiAgICAgIHRoaXMuaW5wdXQgPSB0aGlzLmdhaW5Ob2RlO1xuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBdWRpb05vZGUsIFt7XG4gICAga2V5OiBcImNvbm5lY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdChtYXN0ZXIpIHtcbiAgICAgIHRoaXMub3V0cHV0LmNvbm5lY3QobWFzdGVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzY29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0KG1hc3Rlcikge1xuICAgICAgdGhpcy5vdXRwdXQuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdWRpb05vZGU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXVkaW9Ob2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Audio/main.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Audio/main.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AudioClip = __webpack_require__(/*! ./AudioClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\");\n\nvar AudioPlayback = __webpack_require__(/*! ./Incidents/Playback */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js\");\n\nvar AudioEffect = __webpack_require__(/*! ./Incidents/Effect */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Effect.js\");\n\nmodule.exports = {\n  npm_name: \"@kissmybutton/motorcortex-soundsystem\",\n  incidents: [{\n    exportable: AudioPlayback,\n    name: \"AudioPlayback\"\n  }, {\n    exportable: AudioEffect,\n    name: \"AudioEffect\"\n  }],\n  Clip: AudioClip,\n  audio: \"only\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL21haW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL21haW4uanM/NmQxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIEF1ZGlvQ2xpcCA9IHJlcXVpcmUoJy4vQXVkaW9DbGlwJyk7XG5cbnZhciBBdWRpb1BsYXliYWNrID0gcmVxdWlyZShcIi4vSW5jaWRlbnRzL1BsYXliYWNrXCIpO1xuXG52YXIgQXVkaW9FZmZlY3QgPSByZXF1aXJlKCcuL0luY2lkZW50cy9FZmZlY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG5wbV9uYW1lOiBcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtc291bmRzeXN0ZW1cIixcbiAgaW5jaWRlbnRzOiBbe1xuICAgIGV4cG9ydGFibGU6IEF1ZGlvUGxheWJhY2ssXG4gICAgbmFtZTogXCJBdWRpb1BsYXliYWNrXCJcbiAgfSwge1xuICAgIGV4cG9ydGFibGU6IEF1ZGlvRWZmZWN0LFxuICAgIG5hbWU6IFwiQXVkaW9FZmZlY3RcIlxuICB9XSxcbiAgQ2xpcDogQXVkaW9DbGlwLFxuICBhdWRpbzogXCJvbmx5XCJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Audio/main.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Node = __webpack_require__(/*! ../Tree/Node */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar handleResize = __webpack_require__(/*! ./decorators/handleResize */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js\");\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n\nvar Group = _decorate(null, function (_initialize, _Node) {\n  var Group =\n  /*#__PURE__*/\n  function (_Node2) {\n    _inherits(Group, _Node2);\n\n    function Group(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, Group);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Group).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.mc_plugin_npm_name = 'motor-cortex-js';\n      _this.plugin_channel_class = Channel;\n      _this.hasIncidents = true;\n\n      _this.onGroupInitialise();\n\n      _this.calculatedDuration = 0;\n      return _this;\n    }\n\n    return Group;\n  }(_Node);\n\n  return {\n    F: Group,\n    d: [{\n      kind: \"method\",\n      key: \"onGroupInitialise\",\n      value: function onGroupInitialise() {// called when group gets initialised\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddIncident\",\n      value: function handleAddIncident(target, payload) {\n        if (this.id === target) {\n          var incidentFromDescription = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromDescription */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js\");\n\n          var theIncident = incidentFromDescription(payload.incident, payload.contextData, payload.audio); // in the case that an audio clip tries to process an non-audio incident or\n          // a non-audio incident tries to process an audio incident the result from incidentFromDescription is null\n          // in such a case there should be no candidate return, so this.bypass()\n\n          if (theIncident === null) {\n            return this.bypass();\n          } else {\n            return theIncident;\n          }\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleMoveIncident\",\n      value: function handleMoveIncident(target, payload) {\n        if (this.id === target) {\n          var res = this.getLeafById(payload.incidentId, true);\n\n          if (res === null) {\n            return this.bypass();\n          }\n\n          return res;\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleRemoveIncident\",\n      value: function handleRemoveIncident(target, payload) {\n        if (this.id === target) {\n          var res = this.getLeafById(payload.incidentId, true);\n\n          if (res === null) {\n            return this.bypass();\n          }\n\n          return res;\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      decorators: [handleResize],\n      key: \"handleResize\",\n      value: function handleResize() {}\n    }, {\n      kind: \"method\",\n      key: \"removeChild\",\n      value: function removeChild(id) {\n        this.children[id].leaf.lastWish();\n\n        _get(_getPrototypeOf(Group.prototype), \"removeChild\", this).call(this, id);\n      }\n      /**\n       * Returns an object that has the key of the npm plugin name the Channel of which manages the specific Incident\n       * With the same logic all Incidents that belong to this Group as categorised by plugin / channel on the same object\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {\n        var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var parentMillisecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        // initially it only puts itself onthe incidentsByPlugin array, exactly as the plain Incidents do\n        var incidentsByPlugin = {};\n        incidentsByPlugin['motor-cortex-js'] = [{\n          millisecond: adjustMillisecond,\n          parentMillisecond: parentMillisecond,\n          incident: this,\n          id: this.id\n        }]; // proceed to gather the contained incidents as well\n\n        for (var childId in this.children) {\n          var child = this.children[childId];\n          var incidentsToAdd = child.leaf.getIncidentsByChannel(adjustMillisecond + child.position, adjustMillisecond);\n\n          for (var key in incidentsToAdd) {\n            if (Object.prototype.hasOwnProperty.call(incidentsByPlugin, key)) {\n              incidentsByPlugin[key] = incidentsByPlugin[key].concat(incidentsToAdd[key]);\n            } else {\n              incidentsByPlugin[key] = incidentsToAdd[key];\n            }\n          }\n        }\n\n        return incidentsByPlugin;\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var childId in this.children) {\n          this.children[childId].leaf.lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n}, Node);\n\nmodule.exports = Group;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar MediaChannel = __webpack_require__(/*! ../Channels/Media/AudioPlaybackChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n/*\ndna:\n- originalId\n- context\n*/\n\n\nvar MediaPlay = _decorate(null, function (_initialize) {\n  var MediaPlay = function MediaPlay() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dna = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, MediaPlay);\n\n    _initialize(this);\n\n    // super(props);\n    this.attrs = attrs;\n    this.props = props;\n    this.dna = dna;\n    this.context = dna.context;\n    this.mcid = dna.mcid;\n    this.id = props.id || helper.getAnId();\n    this.modelId = props.modelId; // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n    // is set to true so we prevent multiple executions of the onGetContext method\n\n    this.gotContext = false;\n    /*\n    these are the default values that define channeling for the default Incidents. These values get ovewriden through\n    the loadPlugin method of MC with the values found on the main.js file of the plugin\n    */\n\n    this.plugin_channel_class = MediaChannel;\n    this.mc_plugin_npm_name = \"motor-cortex-js-media-playback\";\n\n    if (Object.prototype.hasOwnProperty.call(props, \"plugin_channel_class\")) {\n      this.plugin_channel_class = props.plugin_channel_class;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(props, \"mc_plugin_npm_name\")) {\n      this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n    }\n\n    this.hasIncidents = false;\n    /**\n     * @member {boolean} - if autoGenerated is set to true, it means that this Incident has been auto-generated by its parent on initialisation.\n     * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them\n     * on specific points on their timeline.\n     */\n\n    this.autoGenerated = false;\n    this.onInitialise(attrs, props);\n  };\n\n  return {\n    F: MediaPlay,\n    d: [{\n      kind: \"get\",\n      key: \"selector\",\n      value: function selector() {\n        return this.props.selector;\n      }\n    }, {\n      kind: \"get\",\n      key: \"element\",\n      value: function element() {\n        return this.context.getElementByMCID(this.mcid);\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        // if the Incident belongs to a fragmented context there absolutely\n        // no reason to run the getContext method of it\n        try {\n          if (this.context.fragment === true) {\n            return;\n          }\n\n          if (!this.gotContext) {\n            this.onGetContext();\n            this.gotContext = true;\n          }\n        } catch (e) {\n          console.log(e);\n          console.log(this.mcid); // console.log(this.context);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {}\n    }, {\n      kind: \"method\",\n      key: \"onInitialise\",\n      value: function onInitialise() {\n        helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n      }\n      /**\n       * Method called on progress of the timed incident.\n       * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n       * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds) {} // eslint-disable-line no-unused-vars\n\n      /**\n       * starts the execution of the media from the specified millisecond\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"play\",\n      value: function play(millisecond) {\n        return true;\n      }\n      /**\n       * stops the execution of the media\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"stop\",\n      value: function stop() {}\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n});\n\nmodule.exports = MediaPlay;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n/* @handleResize is missing from Incident. The reason is that when the\nExtendableClip asks for the under-resize candidates via the \"checkResize\" pipe\nmessage the message will never be handled by an Incident directly but rather via\nits corresponding ElementSplitter\n*/\n\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n/*\ndna:\n- originalId\n- context\n*/\n\n\nvar MonoIncident = _decorate(null, function (_initialize) {\n  var MonoIncident = function MonoIncident() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dna = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, MonoIncident);\n\n    _initialize(this);\n\n    // super(props);\n    this.attrs = attrs;\n    this.props = props;\n    this.dna = dna;\n    this.context = dna.context;\n    this.mcid = dna.mcid;\n    this.id = props.id || helper.getAnId();\n    this.modelId = props.modelId; // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n    // is set to true so we prevent multiple executions of the onGetContext method\n\n    this.gotContext = false;\n    /*\n    these are the default values that define channeling for the default Incidents. These values get ovewriden through\n    the loadPlugin method of MC with the values found on the main.js file of the plugin\n    */\n\n    this.plugin_channel_class = Channel;\n    this.mc_plugin_npm_name = \"motor-cortex-js\";\n\n    if (Object.prototype.hasOwnProperty.call(props, \"plugin_channel_class\")) {\n      this.plugin_channel_class = props.plugin_channel_class;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(props, \"mc_plugin_npm_name\")) {\n      this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n    }\n\n    this.hasIncidents = false;\n    /*\n    initialValues is an object holding the automatically computed initial values of the animatedAttrs\n    (if any). The initialValues are calculated by the AttributesChannel (only Incidents belonging to\n    an AttributesChannel have initialValues).\n    The keys set of this object is identical to the object attrs.animatedAttrs\n    The only thing the generic AttributesChannel can't calculate is the initial value of an animated attr\n    of a specific element when there are no other Incidents entered on its lanes yet. These values are\n    the \"scratchValues\" and they are strongly dependend on the nature of the lib. E.g. for a CSS animation\n    what we are looking for can be found on the computedStyle.\n    The initialValues are the values that are actually going to be used by\n    the MonoIncident in the real execution of them\n    */\n\n    this.initialValues = {};\n    /*\n    The initial values defined by the user via the initialValues key on the\n    attributes (if present)\n    */\n\n    this.userDefinedInitialValues = attrs.initialValues || {};\n    /*\n    The initialValues of the Incident as passed by the Attribute Channel.\n    These values are been altered by the userDefinedInitialValues (if any)\n    but we need them for passing them on other Incidents on edit and delete operations\n    */\n\n    this.pureInitialValues = null;\n    /**\n     * @member {boolean} - if autoGenerated is set to true, it means that this MonoIncident has been auto-generated by its parent on initialisation.\n     * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them\n     * on specific points on their timeline.\n     */\n\n    this.autoGenerated = false;\n    this.onInitialise(attrs, props);\n  };\n\n  return {\n    F: MonoIncident,\n    d: [{\n      kind: \"get\",\n      key: \"selector\",\n      value: function selector() {\n        return this.props.selector;\n      }\n      /* shortcuts for attrs.attrs and attrs.animatedAttrs */\n\n    }, {\n      kind: \"get\",\n      key: \"animAttributes\",\n      value: function animAttributes() {\n        return this.attrs.animatedAttrs;\n      }\n    }, {\n      kind: \"set\",\n      key: \"animAttributes\",\n      value: function animAttributes(value) {\n        this.attrs.animatedAttrs[this.attributeKey] = value;\n      }\n      /**\n      This method shoudl be overwritten by the Incidents of the plugins. The method returns\n      the initial value that the element of it has as the library calculates / defines them. The\n      returned value represents the very initial value of the element's attribute before\n      any Incident that alters it gets added.\n       @returns {mixed} - the initial value of the element's attribute just when the HTML & CSS\n      of the Clip gets rendered\n      */\n\n    }, {\n      kind: \"method\",\n      key: \"getScratchValue\",\n      value: function getScratchValue() {\n        return 0;\n      }\n    }, {\n      kind: \"get\",\n      key: \"element\",\n      value: function element() {\n        if (this.contex === null) {\n          return [];\n        }\n\n        if (this.context.getElementByMCID) {\n          return this.context.getElementByMCID(this.mcid);\n        }\n\n        return this.context.getElements(this.selector)[0];\n      }\n    }, {\n      kind: \"get\",\n      key: \"attributeKey\",\n      value: function attributeKey() {\n        return Object.keys(this.attrs.animatedAttrs)[0];\n      }\n    }, {\n      kind: \"get\",\n      key: \"targetValue\",\n      value: function targetValue() {\n        return this.animAttributes[this.attributeKey];\n      }\n    }, {\n      kind: \"method\",\n      key: \"getElementAttribute\",\n      value: function getElementAttribute(attr) {\n        return this.element.getAttribute(attr);\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"hasUserDefinedInitialValue\",\n      value: function hasUserDefinedInitialValue() {\n        if (Object.prototype.hasOwnProperty.call(this.userDefinedInitialValues, this.attributeKey)) {\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"setInitialValue\",\n      value: function setInitialValue(value) {\n        var storePure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (storePure === true) {\n          this.pureInitialValues = JSON.parse(JSON.stringify(value)); // keep a copy of the\n          // passed initial values\n        }\n\n        if (!this.hasUserDefinedInitialValue()) {\n          this.initialValues[this.attributeKey] = value;\n          return;\n        }\n\n        if (_typeof(this.targetValue) === \"object\") {\n          // if it is a combo attribute\n          for (var key in this.userDefinedInitialValues[this.attributeKey]) {\n            value[key] = this.userDefinedInitialValues[this.attributeKey][key];\n          }\n\n          this.initialValues[this.attributeKey] = value;\n        } else {\n          this.initialValues[this.attributeKey] = this.userDefinedInitialValues[this.attributeKey];\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"initialValue\",\n      value: function initialValue() {\n        return this.initialValues[this.attributeKey];\n      }\n    }, {\n      kind: \"method\",\n      key: \"getInitialValue\",\n      value: function getInitialValue() {\n        return this.initialValues[this.attributeKey];\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        // if the MonoIncident belongs to a fragmented context there absolutely\n        // no reason to run the getContext method of it\n        try {\n          if (this.context.fragment === true) {\n            return;\n          }\n\n          if (!this.gotContext) {\n            this.onGetContext();\n            this.gotContext = true;\n          }\n        } catch (e) {\n          console.log(e);\n          console.log(this.mcid); // console.log(this.context);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {}\n    }, {\n      kind: \"method\",\n      key: \"onInitialise\",\n      value: function onInitialise() {\n        helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n      }\n      /**\n       * Method called on progress of the timed incident.\n       * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n       * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds) {// eslint-disable-line no-unused-vars\n      }\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n});\n\nmodule.exports = MonoIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction block(pld) {\n  pld.descriptor.value = function (description) {\n    if (this.blockID === undefined) {\n      this.blockID = helper.getAnId();\n    }\n\n    this.DescriptiveIncident.putMessageOnPipe('setBlock', {\n      id: this.blockID,\n      description: description,\n      incidentId: this.DescriptiveIncident.id,\n      realIncidentId: this.id\n    }, 'rootClip', {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n  };\n}\n\nmodule.exports = block;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvYmxvY2suanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvYmxvY2suanM/M2Q1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL19jb3JlVXRpbHMvSGVscGVyJyk7XG5cbnZhciBoZWxwZXIgPSBuZXcgSGVscGVyKCk7XG5cbnZhciBfVFJFRUNPTlNUID0gcmVxdWlyZSgnLi4vLi4vVHJlZS9fQ09OU1QnKTtcblxuZnVuY3Rpb24gYmxvY2socGxkKSB7XG4gIHBsZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgaWYgKHRoaXMuYmxvY2tJRCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmJsb2NrSUQgPSBoZWxwZXIuZ2V0QW5JZCgpO1xuICAgIH1cblxuICAgIHRoaXMuRGVzY3JpcHRpdmVJbmNpZGVudC5wdXRNZXNzYWdlT25QaXBlKCdzZXRCbG9jaycsIHtcbiAgICAgIGlkOiB0aGlzLmJsb2NrSUQsXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBpbmNpZGVudElkOiB0aGlzLkRlc2NyaXB0aXZlSW5jaWRlbnQuaWQsXG4gICAgICByZWFsSW5jaWRlbnRJZDogdGhpcy5pZFxuICAgIH0sICdyb290Q2xpcCcsIHtcbiAgICAgIHNlbGZFeGVjdXRlOiB0cnVlLFxuICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJsb2NrOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction handleResize(pld) {\n  pld.descriptor.value = function (target, payload) {\n    // eslint-disable-line no-unused-vars\n    if (this.id === target) {\n      return this;\n    } else {\n      return this.bypass();\n    }\n  };\n}\n\nmodule.exports = handleResize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvaGFuZGxlUmVzaXplLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9CYXNlQ2xhc3Nlcy9kZWNvcmF0b3JzL2hhbmRsZVJlc2l6ZS5qcz82M2ExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBoYW5kbGVSZXNpemUocGxkKSB7XG4gIHBsZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKHRhcmdldCwgcGF5bG9hZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBpZiAodGhpcy5pZCA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYnlwYXNzKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhbmRsZVJlc2l6ZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction unblock(pld) {\n  pld.descriptor.value = function (description) {\n    this.DescriptiveIncident.putMessageOnPipe('unBlock', {\n      id: this.blockID\n    }, 'rootClip', {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n  };\n}\n\nmodule.exports = unblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvdW5ibG9jay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQmFzZUNsYXNzZXMvZGVjb3JhdG9ycy91bmJsb2NrLmpzPzZiOTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuXG52YXIgX1RSRUVDT05TVCA9IHJlcXVpcmUoJy4uLy4uL1RyZWUvX0NPTlNUJyk7XG5cbmZ1bmN0aW9uIHVuYmxvY2socGxkKSB7XG4gIHBsZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgdGhpcy5EZXNjcmlwdGl2ZUluY2lkZW50LnB1dE1lc3NhZ2VPblBpcGUoJ3VuQmxvY2snLCB7XG4gICAgICBpZDogdGhpcy5ibG9ja0lEXG4gICAgfSwgJ3Jvb3RDbGlwJywge1xuICAgICAgc2VsZkV4ZWN1dGU6IHRydWUsXG4gICAgICBkaXJlY3Rpb246IF9UUkVFQ09OU1QuX0RJUkVDVElPTlMuX1VQXG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5ibG9jazsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Channel = __webpack_require__(/*! ../Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar lanesHandler = __webpack_require__(/*! ./LanesHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js\");\n\nvar AttributeChannel =\n/*#__PURE__*/\nfunction (_Channel) {\n  _inherits(AttributeChannel, _Channel);\n\n  function AttributeChannel(props) {\n    var _this;\n\n    _classCallCheck(this, AttributeChannel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AttributeChannel).call(this, props));\n    /*\n    comboAttributes are attributes of type object, holding a number of other attributes.\n    E.g. CSS \"transform\" attribute is a combo that holds a number of other attributes such as:\n    translateX, translateY, etc. The lanes handler keeps just one lane for the combo attrs\n    in an object format keeping the value of each attribute at any given point.\n    Combo attributes are passed on the constructor of the Channel in the format:\n    props.comboAttributes: {\n        transition: ['translateX', 'translateY', ...],\n        <something_else>: ['<attrName1>', '<attrName2>', ...]\n    }\n    */\n\n    _this.comboAttributes = {};\n    /**\n     * For incidents that do not have animatedAttrs there should be only one lane per element.\n     * The attributes Channel will use a default (fake), fixed attribute for this cases so it always ends\n     * up with just one lane per element: <element_id>_<this.fixedAttributeName>\n     */\n\n    _this.fixedAttributeName = \"_\";\n\n    if (props.comboAttributes != null) {\n      _this.comboAttributes = props.comboAttributes;\n    }\n\n    _this.LanesHandler = new lanesHandler({\n      comboAttributes: _this.comboAttributes,\n      runTimeInfo: _this.runTimeInfo\n    }); // this.type = \"attributes\";\n\n    return _this;\n  }\n\n  _createClass(AttributeChannel, [{\n    key: \"setComboAttributes\",\n    value: function setComboAttributes(comboAttributes) {\n      this.comboAttributes = comboAttributes;\n      this.LanesHandler = new lanesHandler({\n        comboAttributes: this.comboAttributes\n      });\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      this.LanesHandler._resize(durationFraction);\n    }\n    /* *******************************************************\n     DECISION METHODS\n     ********************************************************/\n\n    /**\n     * All of the incidents coming to this method are element-attribute incidents meaning that they only\n     * target just one element and also they include just a single attribute on the incident.attrs.animatedAttrs\n     * object\n     *\n     * @param {array} incidents - A collection of Incidents in the form:\n     * {\n     *  millisecond\n     *  incident\n     *  id\n     * }\n     * @param {string} type - can be either \"all-or-nothing\" (default) or \"keep-passing\". If type = \"all-or-nothing\"\n     *  the addition passes only if all incidents pass. If type = \"keep-passing\" the method will still return true\n     *  but will also include an errors array on its return and also will only include the success callbacks on\n     *  the execute key of its return\n     * @returns either:\n     *   {\n     *       result:true,\n     *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n     *   }\n     *   or\n     *   {\n     *       result: false,\n     *       errors\n     *   }\n     */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      var _this2 = this;\n\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"all-or-nothing\";\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      /* an array where we keep all affected lanes so we can slip on them at the end.\n      The format for each affected lane we keep is:\n      {\n          mcid: mcid,\n          attribute: attribute\n      }\n      */\n\n      var affectedLanes = []; // while the LanesHandlerSanbox adds lane items it makes decisions of which permanent changes should be made to\n      // the permanent and pre-existing objects it handles, such as changes on the initial values of existing animations.\n      // Because of the fact the LanesSandboxHandler is only there for testing we don't want to execute these changes\n      // during checks but still we need to know them on success. For this, the onSuccessActions array holds all executable\n      // functions retured by various LanesHandlerSanbox functions so it can execute them on success.\n\n      var onSuccessActions = [];\n      var conflicts = [];\n\n      var _loop = function _loop(i) {\n        var incidentConflicts = false; // a boolean that keeps the information whether the incident conflicts or not\n\n        var laneItem = incidents[i];\n        var incident = laneItem.incident;\n        var mcid = incident.mcid;\n        var attribute = incident.attribute || _this2.fixedAttributeName;\n        LanesHandlerSandbox.laneExists(mcid, attribute); // create the lane if it doesn't exist already\n\n        affectedLanes.push({\n          mcid: mcid,\n          attribute: attribute\n        }); // **** if the lane did exist before the new addition check for conflicts\n\n        var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(laneItem, mcid, attribute); // helper.log(overlappingAnim)\n\n        if (overlappingAnims.length > 0) {\n          incidentConflicts = true;\n          conflicts.push({\n            type: 'unauthorised, overlapping incidents on the same element',\n            meta: {\n              element_mcid: mcid,\n              attribute: attribute,\n              incident: laneItem,\n              overlappingAnims: overlappingAnims\n            }\n          });\n        }\n\n        if (!incidentConflicts) {\n          onSuccessActions.push(function () {\n            LanesHandlerSandbox.addElementToLane(mcid, attribute, laneItem.millisecond, incident);\n\n            incident._onGetContextOnce();\n          });\n        }\n      };\n\n      for (var i = 0; i < incidents.length; i++) {\n        _loop(i);\n      } // end for each incident\n      // if we have conflicts and the type = \"all-or-nothing\"\n\n\n      if (conflicts.length > 0 && type === \"all-or-nothing\") {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        // as soon as we want all passing additions to get applied the Lanes Handler will create a callback that will be passed to the result.\n        // This callback will apply all passing additions.\n        // success message\n        var that = this;\n\n        var exec = function exec() {\n          for (var i = 0; i < onSuccessActions.length; i++) {\n            onSuccessActions[i]();\n          }\n\n          that.LanesHandler.applySandboxChanges(LanesHandlerSandbox);\n        };\n\n        return {\n          result: true,\n          errors: conflicts,\n          execute: exec\n        };\n      }\n    }\n    /**\n     * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n     * that apply the change\n     * @param {array} incidents - the list of the lane items to edit in an array format [object, object, ...]\n     * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n     * @returns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidents, millisecondsDelta) {\n      // console.log(incidents);\n      var affectedIncidentIds = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        affectedIncidentIds.push(incidents[i].id);\n      }\n\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      var conflicts = [];\n      var affectedLanes = []; // for each of the affectedAnimations\n\n      for (var _i = 0; _i < incidents.length; _i++) {\n        var incident = incidents[_i].incident;\n        var incidentId = incident.id;\n        var mcid = incidents[_i].incident.mcid;\n        var attribute = incidents[_i].incident.attribute || this.fixedAttributeName;\n        var lane = LanesHandlerSandbox.getLane(mcid, attribute);\n        var laneAttrs = {\n          mcid: mcid,\n          attribute: attribute // check for conflicts and edit lane items millisecond\n\n        };\n\n        for (var k = 0; k < lane.length; k++) {\n          if (lane[k].id === incidentId) {\n            affectedLanes.push(laneAttrs);\n            var affectedAnim = lane[k];\n            var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n            testLaneElement.millisecond += millisecondsDelta;\n            testLaneElement.incident = LanesHandlerSandbox.incidentsById._get(testLaneElement.id);\n            var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, mcid, attribute, affectedIncidentIds);\n\n            if (overlappingAnims.length > 0) {\n              conflicts.push({\n                type: 'anauthorised, overlapping animations on the same element',\n                meta: {\n                  element_mcid: mcid,\n                  attribute: attribute,\n                  newAnimation: testLaneElement,\n                  overlappingAnims: overlappingAnims\n                }\n              });\n            }\n\n            break;\n          } // end of if we found the specific animation on the lane's sequence\n\n        } // end of each lane's item\n\n      } // end for each affected animation's id\n\n\n      if (conflicts.length > 0) {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        var that = this;\n\n        var exec = function exec() {\n          that.LanesHandler.updateLane(affectedIncidentIds, millisecondsDelta);\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n    }\n    /**\n     * @param {array} incidents - [{id, start, end, startDelta}]\n     * @param {boolean} fullChannelResize - if set to true then the full html channel is resizing. This is a special case as in\n     *  that case no checks should be actually perfomed nor the projected candidate should be applied directly\n     **/\n\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      var fullChannelResize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var excludeIdsFromCheck = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        excludeIdsFromCheck.push(incidents[i].id);\n      }\n\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      var conflicts = [];\n      var affectedLanes = []; // for each of the incidents passed\n\n      for (var _i2 = 0; _i2 < incidents.length; _i2++) {\n        // get the ContextAwareIncident\n        var incident = this.LanesHandler.incidentsById._get(incidents[_i2].id);\n\n        var mcid = incident.mcid;\n        var attribute = incident.attribute || this.fixedAttributeName;\n        var lane = LanesHandlerSandbox.getLane(mcid, attribute);\n        var laneAttrs = {\n          mcid: mcid,\n          attribute: attribute\n        };\n        var testDuration = incidents[_i2].end - incidents[_i2].start; // check for conflicts and edit lane items millisecond\n\n        for (var k = 0; k < lane.length; k++) {\n          if (lane[k].id === incidents[_i2].id) {\n            affectedLanes.push(laneAttrs);\n\n            if (fullChannelResize === false) {\n              var affectedAnim = lane[k];\n              var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n              testLaneElement.millisecond += incidents[_i2].startDelta;\n              testLaneElement.incident = LanesHandlerSandbox.incidentsById._get(testLaneElement.id);\n              var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, laneAttrs.mcid, laneAttrs.attribute, excludeIdsFromCheck, testDuration);\n\n              if (overlappingAnims.length > 0) {\n                conflicts.push({\n                  type: 'anauthorised overlapping animations on the same element',\n                  meta: {\n                    element_mcid: laneAttrs.mcid,\n                    attribute: laneAttrs.attribute,\n                    newAnimation: testLaneElement,\n                    overlappingAnims: overlappingAnims\n                  }\n                });\n              }\n            }\n\n            break;\n          } // end of if we found the specific animation on the lane's sequence\n\n        } // end of each lane's item\n\n      } // end for each affected animation's id\n\n\n      if (conflicts.length > 0) {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        var that = this;\n\n        var exec = function exec() {\n          // updateLanes (only this time animation by animation as the milliseconds delta is not standard for all)\n          // as soon as there are no conflicts the Lanes Handler applies the changes before sending over the\n          // success message\n          for (var _i3 = 0; _i3 < incidents.length; _i3++) {\n            that.LanesHandler.updateLane([incidents[_i3].id], incidents[_i3].startDelta);\n          }\n        };\n\n        return {\n          execute: exec,\n          result: true\n        };\n      }\n    }\n    /**\n     *\n     */\n\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(removedAnimations) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // eslint-disable-line no-unused-vars\n      var removedAnimationIds = [];\n\n      for (var i = 0; i < removedAnimations.length; i++) {\n        removedAnimationIds.push(removedAnimations[i].id);\n      }\n\n      var that = this;\n\n      var exec = function exec() {\n        that.LanesHandler.deleteAnimations(removedAnimationIds);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     * This method is responsible for recalculating the scratch values of the first\n     * Incident of each of the lanes of the LanesHandler according to the provided\n     * context id\n     **/\n\n  }, {\n    key: \"recalcScratchValues\",\n    value: function recalcScratchValues(contextId) {\n      this.LanesHandler.recalcScratchValues(contextId);\n    }\n    /**\n     * Slips to just one lane forwards\n     * @param {array} lane - the lane to slip into\n     * @param {object} laneData - an object with keys: attribute & mcid\n     * @param {int} currentMillisecond - the millisecond the slip starts from\n     * @param {int} millisecond - the target millisecond of the slip\n     * @param {string} contextId - the contextId of the Incidents to slip\n     */\n\n  }, {\n    key: \"slipIntoLaneForwards\",\n    value: function slipIntoLaneForwards(lane, laneData, currentMillisecond, millisecond, contextId) {\n      var forceReset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      // console.log(lane, currentMillisecond, millisecond);\n      var that = this;\n\n      var participatingAnims = _filter(lane, function (laneItem) {\n        return laneItem.millisecond + that.incidentsById._get(laneItem.id).duration >= currentMillisecond && laneItem.millisecond + that.incidentsById._get(laneItem.id).duration <= millisecond || // it ends after currentMillisecond and before target millisecond\n        that.incidentsById._get(laneItem.id).duration + laneItem.millisecond >= millisecond && laneItem.millisecond <= millisecond; // or it ends after the target millisecond but also starts before it\n      });\n\n      if (participatingAnims.length == 0) {\n        // there are two cases forceReset can be used: a) when we are flashing the Clip\n        // going from 0 to millisecond via flash method of ExtendableClip or when\n        // we want to seek the Clip without executing it (like it was in transitional state)\n        // we diferentiate the two by the currentMillisecond value which in case (a) is always 0\n        if (forceReset === true && currentMillisecond === 0) {\n          var firstIncident = this.incidentsById._get(lane[0].id);\n\n          firstIncident.onProgress(0, 0, contextId);\n        }\n\n        return true;\n      }\n\n      participatingAnims = _sortBy(participatingAnims, [function (laneItem) {\n        return laneItem.millisecond;\n      }]); // We only care about the last (in chronological order) Incident, as this\n      // will define the final value\n\n      var lastIndex = participatingAnims.length - 1;\n\n      var participatingAnim = this.incidentsById._get(participatingAnims[lastIndex].id);\n\n      var startMillisecond = participatingAnims[lastIndex].millisecond; // if the animation ends before the target millisecond\n\n      if (participatingAnim.duration + startMillisecond <= millisecond) {\n        // and it's the last one on the row\n        participatingAnim.onProgress(1, participatingAnim.duration, contextId);\n      } else {\n        // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n        // and store this info somewhere\n        var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n        participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond, contextId);\n      }\n    }\n    /**\n     * Slips to just one lane backwards\n     * @param {array} lane - the lane to slip into\n     * @param {object} laneData - an object with keys: attribute & mcid\n     * @param {int} currentMillisecond - the millisecond the slip starts from\n     * @param {int} millisecond - the target millisecond of the slip\n     * @param {string} contextId - the contextId of the Incidents to slip\n     */\n\n  }, {\n    key: \"slipToLaneBackwards\",\n    value: function slipToLaneBackwards(lane, laneData, currentMillisecond, millisecond, contextId) {\n      var forceReset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      // we take all Animations that are either currently running or\n      // they end after the destination point\n      // helper.log('<------');\n      var that = this;\n\n      var participatingAnims = _filter(lane, function (laneItem) {\n        var laneItemEnd = that.incidentsById._get(laneItem.id).duration + laneItem.millisecond;\n        return laneItemEnd <= millisecond && laneItemEnd >= currentMillisecond || // they end in the hot area\n        laneItem.millisecond >= currentMillisecond && laneItem.millisecond <= millisecond || // they start in the hot area\n        laneItem.millisecond < currentMillisecond && laneItemEnd > millisecond; // they overlap the hot area\n      });\n\n      if (participatingAnims.length == 0) {\n        return true;\n      }\n\n      participatingAnims = _sortBy(participatingAnims, [function (laneItem) {\n        return laneItem.millisecond;\n      }]); // We only care about the first (in chronological order) Incident, as this\n      // will define the final value of the backwards move\n\n      var lastIndex = 0;\n\n      var participatingAnim = this.incidentsById._get(participatingAnims[lastIndex].id);\n\n      var startMillisecond = participatingAnims[lastIndex].millisecond; // if the animation starts after the target millisecond\n\n      if (startMillisecond >= millisecond) {\n        participatingAnim.onProgress(0, 0, contextId);\n      } else {\n        // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n        // and store this info somewhere\n        var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n        participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond, contextId);\n      }\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {sring} contextId - the context id to \"move\"\n     @param {boolean} forceReset - set to true if status recalc is needed after edit\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      // step 1: iterate through all lanes\n      var laneKeys = this.lanes._keys();\n\n      for (var i = 0; i < laneKeys.length; i++) {\n        var laneid = laneKeys[i];\n\n        var lane = this.lanes._get(laneid);\n\n        var laneData = helper.getMCIDandAttrOutOfLaneKey(laneid);\n\n        if (from <= to) {\n          this.slipIntoLaneForwards(lane, laneData, from, to, contextId, forceReset);\n        } else if (from > to) {\n          this.slipToLaneBackwards(lane, laneData, from, to, contextId, forceReset);\n        }\n      }\n    }\n  }, {\n    key: \"lanes\",\n    get: function get() {\n      return this.LanesHandler.lanes;\n    }\n  }, {\n    key: \"incidentsById\",\n    get: function get() {\n      return this.LanesHandler.incidentsById;\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return \"attributes\";\n    }\n  }]);\n\n  return AttributeChannel;\n}(Channel);\n\nmodule.exports = AttributeChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9BdHRyaWJ1dGVDaGFubmVsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvQXR0cmlidXRlQ2hhbm5lbC5qcz8yMTM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIENoYW5uZWwgPSByZXF1aXJlKCcuLi9DaGFubmVsJyk7XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuXG52YXIgX2ZpbHRlciA9IHJlcXVpcmUoJy4uLy4uLy4uL2xvZGFzaC1jdXN0b20tYnVpbGQvbW9kdWxhcml6ZS9sb2Rhc2guZmlsdGVyL2luZGV4Jyk7XG5cbnZhciBfc29ydEJ5ID0gcmVxdWlyZSgnLi4vLi4vLi4vbG9kYXNoLWN1c3RvbS1idWlsZC9tb2R1bGFyaXplL2xvZGFzaC5zb3J0YnkvaW5kZXgnKTtcblxudmFyIGxhbmVzSGFuZGxlciA9IHJlcXVpcmUoJy4vTGFuZXNIYW5kbGVyJyk7XG5cbnZhciBBdHRyaWJ1dGVDaGFubmVsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ2hhbm5lbCkge1xuICBfaW5oZXJpdHMoQXR0cmlidXRlQ2hhbm5lbCwgX0NoYW5uZWwpO1xuXG4gIGZ1bmN0aW9uIEF0dHJpYnV0ZUNoYW5uZWwocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXR0cmlidXRlQ2hhbm5lbCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBdHRyaWJ1dGVDaGFubmVsKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgLypcbiAgICBjb21ib0F0dHJpYnV0ZXMgYXJlIGF0dHJpYnV0ZXMgb2YgdHlwZSBvYmplY3QsIGhvbGRpbmcgYSBudW1iZXIgb2Ygb3RoZXIgYXR0cmlidXRlcy5cbiAgICBFLmcuIENTUyBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSBpcyBhIGNvbWJvIHRoYXQgaG9sZHMgYSBudW1iZXIgb2Ygb3RoZXIgYXR0cmlidXRlcyBzdWNoIGFzOlxuICAgIHRyYW5zbGF0ZVgsIHRyYW5zbGF0ZVksIGV0Yy4gVGhlIGxhbmVzIGhhbmRsZXIga2VlcHMganVzdCBvbmUgbGFuZSBmb3IgdGhlIGNvbWJvIGF0dHJzXG4gICAgaW4gYW4gb2JqZWN0IGZvcm1hdCBrZWVwaW5nIHRoZSB2YWx1ZSBvZiBlYWNoIGF0dHJpYnV0ZSBhdCBhbnkgZ2l2ZW4gcG9pbnQuXG4gICAgQ29tYm8gYXR0cmlidXRlcyBhcmUgcGFzc2VkIG9uIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgQ2hhbm5lbCBpbiB0aGUgZm9ybWF0OlxuICAgIHByb3BzLmNvbWJvQXR0cmlidXRlczoge1xuICAgICAgICB0cmFuc2l0aW9uOiBbJ3RyYW5zbGF0ZVgnLCAndHJhbnNsYXRlWScsIC4uLl0sXG4gICAgICAgIDxzb21ldGhpbmdfZWxzZT46IFsnPGF0dHJOYW1lMT4nLCAnPGF0dHJOYW1lMj4nLCAuLi5dXG4gICAgfVxuICAgICovXG5cbiAgICBfdGhpcy5jb21ib0F0dHJpYnV0ZXMgPSB7fTtcbiAgICAvKipcbiAgICAgKiBGb3IgaW5jaWRlbnRzIHRoYXQgZG8gbm90IGhhdmUgYW5pbWF0ZWRBdHRycyB0aGVyZSBzaG91bGQgYmUgb25seSBvbmUgbGFuZSBwZXIgZWxlbWVudC5cbiAgICAgKiBUaGUgYXR0cmlidXRlcyBDaGFubmVsIHdpbGwgdXNlIGEgZGVmYXVsdCAoZmFrZSksIGZpeGVkIGF0dHJpYnV0ZSBmb3IgdGhpcyBjYXNlcyBzbyBpdCBhbHdheXMgZW5kc1xuICAgICAqIHVwIHdpdGgganVzdCBvbmUgbGFuZSBwZXIgZWxlbWVudDogPGVsZW1lbnRfaWQ+Xzx0aGlzLmZpeGVkQXR0cmlidXRlTmFtZT5cbiAgICAgKi9cblxuICAgIF90aGlzLmZpeGVkQXR0cmlidXRlTmFtZSA9IFwiX1wiO1xuXG4gICAgaWYgKHByb3BzLmNvbWJvQXR0cmlidXRlcyAhPSBudWxsKSB7XG4gICAgICBfdGhpcy5jb21ib0F0dHJpYnV0ZXMgPSBwcm9wcy5jb21ib0F0dHJpYnV0ZXM7XG4gICAgfVxuXG4gICAgX3RoaXMuTGFuZXNIYW5kbGVyID0gbmV3IGxhbmVzSGFuZGxlcih7XG4gICAgICBjb21ib0F0dHJpYnV0ZXM6IF90aGlzLmNvbWJvQXR0cmlidXRlcyxcbiAgICAgIHJ1blRpbWVJbmZvOiBfdGhpcy5ydW5UaW1lSW5mb1xuICAgIH0pOyAvLyB0aGlzLnR5cGUgPSBcImF0dHJpYnV0ZXNcIjtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBdHRyaWJ1dGVDaGFubmVsLCBbe1xuICAgIGtleTogXCJzZXRDb21ib0F0dHJpYnV0ZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29tYm9BdHRyaWJ1dGVzKGNvbWJvQXR0cmlidXRlcykge1xuICAgICAgdGhpcy5jb21ib0F0dHJpYnV0ZXMgPSBjb21ib0F0dHJpYnV0ZXM7XG4gICAgICB0aGlzLkxhbmVzSGFuZGxlciA9IG5ldyBsYW5lc0hhbmRsZXIoe1xuICAgICAgICBjb21ib0F0dHJpYnV0ZXM6IHRoaXMuY29tYm9BdHRyaWJ1dGVzXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3Jlc2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzaXplKGR1cmF0aW9uRnJhY3Rpb24pIHtcbiAgICAgIHRoaXMuTGFuZXNIYW5kbGVyLl9yZXNpemUoZHVyYXRpb25GcmFjdGlvbik7XG4gICAgfVxuICAgIC8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgREVDSVNJT04gTUVUSE9EU1xuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIC8qKlxuICAgICAqIEFsbCBvZiB0aGUgaW5jaWRlbnRzIGNvbWluZyB0byB0aGlzIG1ldGhvZCBhcmUgZWxlbWVudC1hdHRyaWJ1dGUgaW5jaWRlbnRzIG1lYW5pbmcgdGhhdCB0aGV5IG9ubHlcbiAgICAgKiB0YXJnZXQganVzdCBvbmUgZWxlbWVudCBhbmQgYWxzbyB0aGV5IGluY2x1ZGUganVzdCBhIHNpbmdsZSBhdHRyaWJ1dGUgb24gdGhlIGluY2lkZW50LmF0dHJzLmFuaW1hdGVkQXR0cnNcbiAgICAgKiBvYmplY3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGluY2lkZW50cyAtIEEgY29sbGVjdGlvbiBvZiBJbmNpZGVudHMgaW4gdGhlIGZvcm06XG4gICAgICoge1xuICAgICAqICBtaWxsaXNlY29uZFxuICAgICAqICBpbmNpZGVudFxuICAgICAqICBpZFxuICAgICAqIH1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIGNhbiBiZSBlaXRoZXIgXCJhbGwtb3Itbm90aGluZ1wiIChkZWZhdWx0KSBvciBcImtlZXAtcGFzc2luZ1wiLiBJZiB0eXBlID0gXCJhbGwtb3Itbm90aGluZ1wiXG4gICAgICogIHRoZSBhZGRpdGlvbiBwYXNzZXMgb25seSBpZiBhbGwgaW5jaWRlbnRzIHBhc3MuIElmIHR5cGUgPSBcImtlZXAtcGFzc2luZ1wiIHRoZSBtZXRob2Qgd2lsbCBzdGlsbCByZXR1cm4gdHJ1ZVxuICAgICAqICBidXQgd2lsbCBhbHNvIGluY2x1ZGUgYW4gZXJyb3JzIGFycmF5IG9uIGl0cyByZXR1cm4gYW5kIGFsc28gd2lsbCBvbmx5IGluY2x1ZGUgdGhlIHN1Y2Nlc3MgY2FsbGJhY2tzIG9uXG4gICAgICogIHRoZSBleGVjdXRlIGtleSBvZiBpdHMgcmV0dXJuXG4gICAgICogQHJldHVybnMgZWl0aGVyOlxuICAgICAqICAge1xuICAgICAqICAgICAgIHJlc3VsdDp0cnVlLFxuICAgICAqICAgICAgIGV4ZWN1dGU6IC8vIGFuIGFycmF5IG9mIGZ1bmN0aW9ucyB0aGF0IHdoZW4gZXhlY3V0ZWQgaXQgd2lsbCBhZGQgdGhlIEluY2lkZW50cyBvbiB0aGUgQ2hhbm5lbHNcbiAgICAgKiAgIH1cbiAgICAgKiAgIG9yXG4gICAgICogICB7XG4gICAgICogICAgICAgcmVzdWx0OiBmYWxzZSxcbiAgICAgKiAgICAgICBlcnJvcnNcbiAgICAgKiAgIH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrQWRkaXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tBZGRpdGlvbihpbmNpZGVudHMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogXCJhbGwtb3Itbm90aGluZ1wiO1xuICAgICAgdmFyIExhbmVzSGFuZGxlclNhbmRib3ggPSB0aGlzLkxhbmVzSGFuZGxlci5jcmVhdGVUZXN0TGFuZXNTYW5ib3goKTtcbiAgICAgIC8qIGFuIGFycmF5IHdoZXJlIHdlIGtlZXAgYWxsIGFmZmVjdGVkIGxhbmVzIHNvIHdlIGNhbiBzbGlwIG9uIHRoZW0gYXQgdGhlIGVuZC5cbiAgICAgIFRoZSBmb3JtYXQgZm9yIGVhY2ggYWZmZWN0ZWQgbGFuZSB3ZSBrZWVwIGlzOlxuICAgICAge1xuICAgICAgICAgIG1jaWQ6IG1jaWQsXG4gICAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGVcbiAgICAgIH1cbiAgICAgICovXG5cbiAgICAgIHZhciBhZmZlY3RlZExhbmVzID0gW107IC8vIHdoaWxlIHRoZSBMYW5lc0hhbmRsZXJTYW5ib3ggYWRkcyBsYW5lIGl0ZW1zIGl0IG1ha2VzIGRlY2lzaW9ucyBvZiB3aGljaCBwZXJtYW5lbnQgY2hhbmdlcyBzaG91bGQgYmUgbWFkZSB0b1xuICAgICAgLy8gdGhlIHBlcm1hbmVudCBhbmQgcHJlLWV4aXN0aW5nIG9iamVjdHMgaXQgaGFuZGxlcywgc3VjaCBhcyBjaGFuZ2VzIG9uIHRoZSBpbml0aWFsIHZhbHVlcyBvZiBleGlzdGluZyBhbmltYXRpb25zLlxuICAgICAgLy8gQmVjYXVzZSBvZiB0aGUgZmFjdCB0aGUgTGFuZXNTYW5kYm94SGFuZGxlciBpcyBvbmx5IHRoZXJlIGZvciB0ZXN0aW5nIHdlIGRvbid0IHdhbnQgdG8gZXhlY3V0ZSB0aGVzZSBjaGFuZ2VzXG4gICAgICAvLyBkdXJpbmcgY2hlY2tzIGJ1dCBzdGlsbCB3ZSBuZWVkIHRvIGtub3cgdGhlbSBvbiBzdWNjZXNzLiBGb3IgdGhpcywgdGhlIG9uU3VjY2Vzc0FjdGlvbnMgYXJyYXkgaG9sZHMgYWxsIGV4ZWN1dGFibGVcbiAgICAgIC8vIGZ1bmN0aW9ucyByZXR1cmVkIGJ5IHZhcmlvdXMgTGFuZXNIYW5kbGVyU2FuYm94IGZ1bmN0aW9ucyBzbyBpdCBjYW4gZXhlY3V0ZSB0aGVtIG9uIHN1Y2Nlc3MuXG5cbiAgICAgIHZhciBvblN1Y2Nlc3NBY3Rpb25zID0gW107XG4gICAgICB2YXIgY29uZmxpY3RzID0gW107XG5cbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICAgICAgdmFyIGluY2lkZW50Q29uZmxpY3RzID0gZmFsc2U7IC8vIGEgYm9vbGVhbiB0aGF0IGtlZXBzIHRoZSBpbmZvcm1hdGlvbiB3aGV0aGVyIHRoZSBpbmNpZGVudCBjb25mbGljdHMgb3Igbm90XG5cbiAgICAgICAgdmFyIGxhbmVJdGVtID0gaW5jaWRlbnRzW2ldO1xuICAgICAgICB2YXIgaW5jaWRlbnQgPSBsYW5lSXRlbS5pbmNpZGVudDtcbiAgICAgICAgdmFyIG1jaWQgPSBpbmNpZGVudC5tY2lkO1xuICAgICAgICB2YXIgYXR0cmlidXRlID0gaW5jaWRlbnQuYXR0cmlidXRlIHx8IF90aGlzMi5maXhlZEF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIExhbmVzSGFuZGxlclNhbmRib3gubGFuZUV4aXN0cyhtY2lkLCBhdHRyaWJ1dGUpOyAvLyBjcmVhdGUgdGhlIGxhbmUgaWYgaXQgZG9lc24ndCBleGlzdCBhbHJlYWR5XG5cbiAgICAgICAgYWZmZWN0ZWRMYW5lcy5wdXNoKHtcbiAgICAgICAgICBtY2lkOiBtY2lkLFxuICAgICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlXG4gICAgICAgIH0pOyAvLyAqKioqIGlmIHRoZSBsYW5lIGRpZCBleGlzdCBiZWZvcmUgdGhlIG5ldyBhZGRpdGlvbiBjaGVjayBmb3IgY29uZmxpY3RzXG5cbiAgICAgICAgdmFyIG92ZXJsYXBwaW5nQW5pbXMgPSBMYW5lc0hhbmRsZXJTYW5kYm94LmdldE92ZXJsYXBwaW5nQW5pbXMobGFuZUl0ZW0sIG1jaWQsIGF0dHJpYnV0ZSk7IC8vIGhlbHBlci5sb2cob3ZlcmxhcHBpbmdBbmltKVxuXG4gICAgICAgIGlmIChvdmVybGFwcGluZ0FuaW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpbmNpZGVudENvbmZsaWN0cyA9IHRydWU7XG4gICAgICAgICAgY29uZmxpY3RzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3VuYXV0aG9yaXNlZCwgb3ZlcmxhcHBpbmcgaW5jaWRlbnRzIG9uIHRoZSBzYW1lIGVsZW1lbnQnLFxuICAgICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgICBlbGVtZW50X21jaWQ6IG1jaWQsXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICAgICAgICBpbmNpZGVudDogbGFuZUl0ZW0sXG4gICAgICAgICAgICAgIG92ZXJsYXBwaW5nQW5pbXM6IG92ZXJsYXBwaW5nQW5pbXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW5jaWRlbnRDb25mbGljdHMpIHtcbiAgICAgICAgICBvblN1Y2Nlc3NBY3Rpb25zLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgTGFuZXNIYW5kbGVyU2FuZGJveC5hZGRFbGVtZW50VG9MYW5lKG1jaWQsIGF0dHJpYnV0ZSwgbGFuZUl0ZW0ubWlsbGlzZWNvbmQsIGluY2lkZW50KTtcblxuICAgICAgICAgICAgaW5jaWRlbnQuX29uR2V0Q29udGV4dE9uY2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmNpZGVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX2xvb3AoaSk7XG4gICAgICB9IC8vIGVuZCBmb3IgZWFjaCBpbmNpZGVudFxuICAgICAgLy8gaWYgd2UgaGF2ZSBjb25mbGljdHMgYW5kIHRoZSB0eXBlID0gXCJhbGwtb3Itbm90aGluZ1wiXG5cblxuICAgICAgaWYgKGNvbmZsaWN0cy5sZW5ndGggPiAwICYmIHR5cGUgPT09IFwiYWxsLW9yLW5vdGhpbmdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3VsdDogZmFsc2UsXG4gICAgICAgICAgZXJyb3JzOiBjb25mbGljdHNcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFzIHNvb24gYXMgd2Ugd2FudCBhbGwgcGFzc2luZyBhZGRpdGlvbnMgdG8gZ2V0IGFwcGxpZWQgdGhlIExhbmVzIEhhbmRsZXIgd2lsbCBjcmVhdGUgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSByZXN1bHQuXG4gICAgICAgIC8vIFRoaXMgY2FsbGJhY2sgd2lsbCBhcHBseSBhbGwgcGFzc2luZyBhZGRpdGlvbnMuXG4gICAgICAgIC8vIHN1Y2Nlc3MgbWVzc2FnZVxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGV4ZWMgPSBmdW5jdGlvbiBleGVjKCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb25TdWNjZXNzQWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb25TdWNjZXNzQWN0aW9uc1tpXSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoYXQuTGFuZXNIYW5kbGVyLmFwcGx5U2FuZGJveENoYW5nZXMoTGFuZXNIYW5kbGVyU2FuZGJveCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN1bHQ6IHRydWUsXG4gICAgICAgICAgZXJyb3JzOiBjb25mbGljdHMsXG4gICAgICAgICAgZXhlY3V0ZTogZXhlY1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdCBpbml0aWFsbHkgY2hlY2tzIGlmIHRoZSBlZGl0IGlzIGFsbG93ZWQgYW5kIGlmIGl0IGlzIGl0IHJldHVucyBhbiBhcnJheSBvZiBleGVjdXRhYmxlIGZ1bmN0aW9uc1xuICAgICAqIHRoYXQgYXBwbHkgdGhlIGNoYW5nZVxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGluY2lkZW50cyAtIHRoZSBsaXN0IG9mIHRoZSBsYW5lIGl0ZW1zIHRvIGVkaXQgaW4gYW4gYXJyYXkgZm9ybWF0IFtvYmplY3QsIG9iamVjdCwgLi4uXVxuICAgICAqIEBwYXJhbSB7aW50fSBtaWxsaXNlY29uZHNEZWx0YSAtIHRoZSBtaWxsaXNlY29uZHMgZGVsdGEgdG8gYXBwbHkgdG8gdGhlIGluY2lkZW50c1xuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IC1cbiAgICAgKiBlaXRoZXI6XG4gICAgIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBleGVjdXRlOiAvLyBhcnJheSBvZiBmdW5jdGlvbnMgdG8gYmUgZXhlY3V0ZWQgaW4gb3JkZXIgdG8gYXBwbHkgdGhlIGVkaXRcbiAgICAgfVxuICAgICBvclxuICAgICB7XG4gICAgICAgICByZXN1bHQ6IGZhbHNlLFxuICAgICAgICAgZXJyb3JzOiAvLyBhbiBhcnJheSBpbmNsdWRpbmcgYWxsIHRoZSBlcnJvcnMgLyBjb25mbGljdHMgZm91bmQgb24gZWRpdFxuICAgICB9XG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrRWRpdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0VkaXQoaW5jaWRlbnRzLCBtaWxsaXNlY29uZHNEZWx0YSkge1xuICAgICAgLy8gY29uc29sZS5sb2coaW5jaWRlbnRzKTtcbiAgICAgIHZhciBhZmZlY3RlZEluY2lkZW50SWRzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5jaWRlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFmZmVjdGVkSW5jaWRlbnRJZHMucHVzaChpbmNpZGVudHNbaV0uaWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgTGFuZXNIYW5kbGVyU2FuZGJveCA9IHRoaXMuTGFuZXNIYW5kbGVyLmNyZWF0ZVRlc3RMYW5lc1NhbmJveCgpO1xuICAgICAgdmFyIGNvbmZsaWN0cyA9IFtdO1xuICAgICAgdmFyIGFmZmVjdGVkTGFuZXMgPSBbXTsgLy8gZm9yIGVhY2ggb2YgdGhlIGFmZmVjdGVkQW5pbWF0aW9uc1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgaW5jaWRlbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgaW5jaWRlbnQgPSBpbmNpZGVudHNbX2ldLmluY2lkZW50O1xuICAgICAgICB2YXIgaW5jaWRlbnRJZCA9IGluY2lkZW50LmlkO1xuICAgICAgICB2YXIgbWNpZCA9IGluY2lkZW50c1tfaV0uaW5jaWRlbnQubWNpZDtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGluY2lkZW50c1tfaV0uaW5jaWRlbnQuYXR0cmlidXRlIHx8IHRoaXMuZml4ZWRBdHRyaWJ1dGVOYW1lO1xuICAgICAgICB2YXIgbGFuZSA9IExhbmVzSGFuZGxlclNhbmRib3guZ2V0TGFuZShtY2lkLCBhdHRyaWJ1dGUpO1xuICAgICAgICB2YXIgbGFuZUF0dHJzID0ge1xuICAgICAgICAgIG1jaWQ6IG1jaWQsXG4gICAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUgLy8gY2hlY2sgZm9yIGNvbmZsaWN0cyBhbmQgZWRpdCBsYW5lIGl0ZW1zIG1pbGxpc2Vjb25kXG5cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGxhbmUubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBpZiAobGFuZVtrXS5pZCA9PT0gaW5jaWRlbnRJZCkge1xuICAgICAgICAgICAgYWZmZWN0ZWRMYW5lcy5wdXNoKGxhbmVBdHRycyk7XG4gICAgICAgICAgICB2YXIgYWZmZWN0ZWRBbmltID0gbGFuZVtrXTtcbiAgICAgICAgICAgIHZhciB0ZXN0TGFuZUVsZW1lbnQgPSBMYW5lc0hhbmRsZXJTYW5kYm94LmdldExhbmVFbGVtZW50c0Nsb25lKGFmZmVjdGVkQW5pbSk7XG4gICAgICAgICAgICB0ZXN0TGFuZUVsZW1lbnQubWlsbGlzZWNvbmQgKz0gbWlsbGlzZWNvbmRzRGVsdGE7XG4gICAgICAgICAgICB0ZXN0TGFuZUVsZW1lbnQuaW5jaWRlbnQgPSBMYW5lc0hhbmRsZXJTYW5kYm94LmluY2lkZW50c0J5SWQuX2dldCh0ZXN0TGFuZUVsZW1lbnQuaWQpO1xuICAgICAgICAgICAgdmFyIG92ZXJsYXBwaW5nQW5pbXMgPSBMYW5lc0hhbmRsZXJTYW5kYm94LmdldE92ZXJsYXBwaW5nQW5pbXModGVzdExhbmVFbGVtZW50LCBtY2lkLCBhdHRyaWJ1dGUsIGFmZmVjdGVkSW5jaWRlbnRJZHMpO1xuXG4gICAgICAgICAgICBpZiAob3ZlcmxhcHBpbmdBbmltcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbmZsaWN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYW5hdXRob3Jpc2VkLCBvdmVybGFwcGluZyBhbmltYXRpb25zIG9uIHRoZSBzYW1lIGVsZW1lbnQnLFxuICAgICAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnRfbWNpZDogbWNpZCxcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICAgICAgICAgICAgbmV3QW5pbWF0aW9uOiB0ZXN0TGFuZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICBvdmVybGFwcGluZ0FuaW1zOiBvdmVybGFwcGluZ0FuaW1zXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSAvLyBlbmQgb2YgaWYgd2UgZm91bmQgdGhlIHNwZWNpZmljIGFuaW1hdGlvbiBvbiB0aGUgbGFuZSdzIHNlcXVlbmNlXG5cbiAgICAgICAgfSAvLyBlbmQgb2YgZWFjaCBsYW5lJ3MgaXRlbVxuXG4gICAgICB9IC8vIGVuZCBmb3IgZWFjaCBhZmZlY3RlZCBhbmltYXRpb24ncyBpZFxuXG5cbiAgICAgIGlmIChjb25mbGljdHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3VsdDogZmFsc2UsXG4gICAgICAgICAgZXJyb3JzOiBjb25mbGljdHNcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICB2YXIgZXhlYyA9IGZ1bmN0aW9uIGV4ZWMoKSB7XG4gICAgICAgICAgdGhhdC5MYW5lc0hhbmRsZXIudXBkYXRlTGFuZShhZmZlY3RlZEluY2lkZW50SWRzLCBtaWxsaXNlY29uZHNEZWx0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN1bHQ6IHRydWUsXG4gICAgICAgICAgZXhlY3V0ZTogZXhlY1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBpbmNpZGVudHMgLSBbe2lkLCBzdGFydCwgZW5kLCBzdGFydERlbHRhfV1cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZ1bGxDaGFubmVsUmVzaXplIC0gaWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgZnVsbCBodG1sIGNoYW5uZWwgaXMgcmVzaXppbmcuIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2UgYXMgaW5cbiAgICAgKiAgdGhhdCBjYXNlIG5vIGNoZWNrcyBzaG91bGQgYmUgYWN0dWFsbHkgcGVyZm9tZWQgbm9yIHRoZSBwcm9qZWN0ZWQgY2FuZGlkYXRlIHNob3VsZCBiZSBhcHBsaWVkIGRpcmVjdGx5XG4gICAgICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2hlY2tSZXNpemVkSW5jaWRlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrUmVzaXplZEluY2lkZW50cyhpbmNpZGVudHMpIHtcbiAgICAgIHZhciBmdWxsQ2hhbm5lbFJlc2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICB2YXIgZXhjbHVkZUlkc0Zyb21DaGVjayA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluY2lkZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBleGNsdWRlSWRzRnJvbUNoZWNrLnB1c2goaW5jaWRlbnRzW2ldLmlkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIExhbmVzSGFuZGxlclNhbmRib3ggPSB0aGlzLkxhbmVzSGFuZGxlci5jcmVhdGVUZXN0TGFuZXNTYW5ib3goKTtcbiAgICAgIHZhciBjb25mbGljdHMgPSBbXTtcbiAgICAgIHZhciBhZmZlY3RlZExhbmVzID0gW107IC8vIGZvciBlYWNoIG9mIHRoZSBpbmNpZGVudHMgcGFzc2VkXG5cbiAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGluY2lkZW50cy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIC8vIGdldCB0aGUgQ29udGV4dEF3YXJlSW5jaWRlbnRcbiAgICAgICAgdmFyIGluY2lkZW50ID0gdGhpcy5MYW5lc0hhbmRsZXIuaW5jaWRlbnRzQnlJZC5fZ2V0KGluY2lkZW50c1tfaTJdLmlkKTtcblxuICAgICAgICB2YXIgbWNpZCA9IGluY2lkZW50Lm1jaWQ7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSBpbmNpZGVudC5hdHRyaWJ1dGUgfHwgdGhpcy5maXhlZEF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIHZhciBsYW5lID0gTGFuZXNIYW5kbGVyU2FuZGJveC5nZXRMYW5lKG1jaWQsIGF0dHJpYnV0ZSk7XG4gICAgICAgIHZhciBsYW5lQXR0cnMgPSB7XG4gICAgICAgICAgbWNpZDogbWNpZCxcbiAgICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZVxuICAgICAgICB9O1xuICAgICAgICB2YXIgdGVzdER1cmF0aW9uID0gaW5jaWRlbnRzW19pMl0uZW5kIC0gaW5jaWRlbnRzW19pMl0uc3RhcnQ7IC8vIGNoZWNrIGZvciBjb25mbGljdHMgYW5kIGVkaXQgbGFuZSBpdGVtcyBtaWxsaXNlY29uZFxuXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbGFuZS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgIGlmIChsYW5lW2tdLmlkID09PSBpbmNpZGVudHNbX2kyXS5pZCkge1xuICAgICAgICAgICAgYWZmZWN0ZWRMYW5lcy5wdXNoKGxhbmVBdHRycyk7XG5cbiAgICAgICAgICAgIGlmIChmdWxsQ2hhbm5lbFJlc2l6ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgdmFyIGFmZmVjdGVkQW5pbSA9IGxhbmVba107XG4gICAgICAgICAgICAgIHZhciB0ZXN0TGFuZUVsZW1lbnQgPSBMYW5lc0hhbmRsZXJTYW5kYm94LmdldExhbmVFbGVtZW50c0Nsb25lKGFmZmVjdGVkQW5pbSk7XG4gICAgICAgICAgICAgIHRlc3RMYW5lRWxlbWVudC5taWxsaXNlY29uZCArPSBpbmNpZGVudHNbX2kyXS5zdGFydERlbHRhO1xuICAgICAgICAgICAgICB0ZXN0TGFuZUVsZW1lbnQuaW5jaWRlbnQgPSBMYW5lc0hhbmRsZXJTYW5kYm94LmluY2lkZW50c0J5SWQuX2dldCh0ZXN0TGFuZUVsZW1lbnQuaWQpO1xuICAgICAgICAgICAgICB2YXIgb3ZlcmxhcHBpbmdBbmltcyA9IExhbmVzSGFuZGxlclNhbmRib3guZ2V0T3ZlcmxhcHBpbmdBbmltcyh0ZXN0TGFuZUVsZW1lbnQsIGxhbmVBdHRycy5tY2lkLCBsYW5lQXR0cnMuYXR0cmlidXRlLCBleGNsdWRlSWRzRnJvbUNoZWNrLCB0ZXN0RHVyYXRpb24pO1xuXG4gICAgICAgICAgICAgIGlmIChvdmVybGFwcGluZ0FuaW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25mbGljdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiAnYW5hdXRob3Jpc2VkIG92ZXJsYXBwaW5nIGFuaW1hdGlvbnMgb24gdGhlIHNhbWUgZWxlbWVudCcsXG4gICAgICAgICAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfbWNpZDogbGFuZUF0dHJzLm1jaWQsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogbGFuZUF0dHJzLmF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgICAgICAgbmV3QW5pbWF0aW9uOiB0ZXN0TGFuZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJsYXBwaW5nQW5pbXM6IG92ZXJsYXBwaW5nQW5pbXNcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IC8vIGVuZCBvZiBpZiB3ZSBmb3VuZCB0aGUgc3BlY2lmaWMgYW5pbWF0aW9uIG9uIHRoZSBsYW5lJ3Mgc2VxdWVuY2VcblxuICAgICAgICB9IC8vIGVuZCBvZiBlYWNoIGxhbmUncyBpdGVtXG5cbiAgICAgIH0gLy8gZW5kIGZvciBlYWNoIGFmZmVjdGVkIGFuaW1hdGlvbidzIGlkXG5cblxuICAgICAgaWYgKGNvbmZsaWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzdWx0OiBmYWxzZSxcbiAgICAgICAgICBlcnJvcnM6IGNvbmZsaWN0c1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIHZhciBleGVjID0gZnVuY3Rpb24gZXhlYygpIHtcbiAgICAgICAgICAvLyB1cGRhdGVMYW5lcyAob25seSB0aGlzIHRpbWUgYW5pbWF0aW9uIGJ5IGFuaW1hdGlvbiBhcyB0aGUgbWlsbGlzZWNvbmRzIGRlbHRhIGlzIG5vdCBzdGFuZGFyZCBmb3IgYWxsKVxuICAgICAgICAgIC8vIGFzIHNvb24gYXMgdGhlcmUgYXJlIG5vIGNvbmZsaWN0cyB0aGUgTGFuZXMgSGFuZGxlciBhcHBsaWVzIHRoZSBjaGFuZ2VzIGJlZm9yZSBzZW5kaW5nIG92ZXIgdGhlXG4gICAgICAgICAgLy8gc3VjY2VzcyBtZXNzYWdlXG4gICAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgaW5jaWRlbnRzLmxlbmd0aDsgX2kzKyspIHtcbiAgICAgICAgICAgIHRoYXQuTGFuZXNIYW5kbGVyLnVwZGF0ZUxhbmUoW2luY2lkZW50c1tfaTNdLmlkXSwgaW5jaWRlbnRzW19pM10uc3RhcnREZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXhlY3V0ZTogZXhlYyxcbiAgICAgICAgICByZXN1bHQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrRGVsZXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrRGVsZXRlKHJlbW92ZWRBbmltYXRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgdmFyIHJlbW92ZWRBbmltYXRpb25JZHMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdmVkQW5pbWF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZW1vdmVkQW5pbWF0aW9uSWRzLnB1c2gocmVtb3ZlZEFuaW1hdGlvbnNbaV0uaWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgIHZhciBleGVjID0gZnVuY3Rpb24gZXhlYygpIHtcbiAgICAgICAgdGhhdC5MYW5lc0hhbmRsZXIuZGVsZXRlQW5pbWF0aW9ucyhyZW1vdmVkQW5pbWF0aW9uSWRzKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogdHJ1ZSxcbiAgICAgICAgZXhlY3V0ZTogZXhlY1xuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIHJlY2FsY3VsYXRpbmcgdGhlIHNjcmF0Y2ggdmFsdWVzIG9mIHRoZSBmaXJzdFxuICAgICAqIEluY2lkZW50IG9mIGVhY2ggb2YgdGhlIGxhbmVzIG9mIHRoZSBMYW5lc0hhbmRsZXIgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZFxuICAgICAqIGNvbnRleHQgaWRcbiAgICAgKiovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZWNhbGNTY3JhdGNoVmFsdWVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2FsY1NjcmF0Y2hWYWx1ZXMoY29udGV4dElkKSB7XG4gICAgICB0aGlzLkxhbmVzSGFuZGxlci5yZWNhbGNTY3JhdGNoVmFsdWVzKGNvbnRleHRJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNsaXBzIHRvIGp1c3Qgb25lIGxhbmUgZm9yd2FyZHNcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBsYW5lIC0gdGhlIGxhbmUgdG8gc2xpcCBpbnRvXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGxhbmVEYXRhIC0gYW4gb2JqZWN0IHdpdGgga2V5czogYXR0cmlidXRlICYgbWNpZFxuICAgICAqIEBwYXJhbSB7aW50fSBjdXJyZW50TWlsbGlzZWNvbmQgLSB0aGUgbWlsbGlzZWNvbmQgdGhlIHNsaXAgc3RhcnRzIGZyb21cbiAgICAgKiBAcGFyYW0ge2ludH0gbWlsbGlzZWNvbmQgLSB0aGUgdGFyZ2V0IG1pbGxpc2Vjb25kIG9mIHRoZSBzbGlwXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHRJZCAtIHRoZSBjb250ZXh0SWQgb2YgdGhlIEluY2lkZW50cyB0byBzbGlwXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzbGlwSW50b0xhbmVGb3J3YXJkc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzbGlwSW50b0xhbmVGb3J3YXJkcyhsYW5lLCBsYW5lRGF0YSwgY3VycmVudE1pbGxpc2Vjb25kLCBtaWxsaXNlY29uZCwgY29udGV4dElkKSB7XG4gICAgICB2YXIgZm9yY2VSZXNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogZmFsc2U7XG4gICAgICAvLyBjb25zb2xlLmxvZyhsYW5lLCBjdXJyZW50TWlsbGlzZWNvbmQsIG1pbGxpc2Vjb25kKTtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgdmFyIHBhcnRpY2lwYXRpbmdBbmltcyA9IF9maWx0ZXIobGFuZSwgZnVuY3Rpb24gKGxhbmVJdGVtKSB7XG4gICAgICAgIHJldHVybiBsYW5lSXRlbS5taWxsaXNlY29uZCArIHRoYXQuaW5jaWRlbnRzQnlJZC5fZ2V0KGxhbmVJdGVtLmlkKS5kdXJhdGlvbiA+PSBjdXJyZW50TWlsbGlzZWNvbmQgJiYgbGFuZUl0ZW0ubWlsbGlzZWNvbmQgKyB0aGF0LmluY2lkZW50c0J5SWQuX2dldChsYW5lSXRlbS5pZCkuZHVyYXRpb24gPD0gbWlsbGlzZWNvbmQgfHwgLy8gaXQgZW5kcyBhZnRlciBjdXJyZW50TWlsbGlzZWNvbmQgYW5kIGJlZm9yZSB0YXJnZXQgbWlsbGlzZWNvbmRcbiAgICAgICAgdGhhdC5pbmNpZGVudHNCeUlkLl9nZXQobGFuZUl0ZW0uaWQpLmR1cmF0aW9uICsgbGFuZUl0ZW0ubWlsbGlzZWNvbmQgPj0gbWlsbGlzZWNvbmQgJiYgbGFuZUl0ZW0ubWlsbGlzZWNvbmQgPD0gbWlsbGlzZWNvbmQ7IC8vIG9yIGl0IGVuZHMgYWZ0ZXIgdGhlIHRhcmdldCBtaWxsaXNlY29uZCBidXQgYWxzbyBzdGFydHMgYmVmb3JlIGl0XG4gICAgICB9KTtcblxuICAgICAgaWYgKHBhcnRpY2lwYXRpbmdBbmltcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAvLyB0aGVyZSBhcmUgdHdvIGNhc2VzIGZvcmNlUmVzZXQgY2FuIGJlIHVzZWQ6IGEpIHdoZW4gd2UgYXJlIGZsYXNoaW5nIHRoZSBDbGlwXG4gICAgICAgIC8vIGdvaW5nIGZyb20gMCB0byBtaWxsaXNlY29uZCB2aWEgZmxhc2ggbWV0aG9kIG9mIEV4dGVuZGFibGVDbGlwIG9yIHdoZW5cbiAgICAgICAgLy8gd2Ugd2FudCB0byBzZWVrIHRoZSBDbGlwIHdpdGhvdXQgZXhlY3V0aW5nIGl0IChsaWtlIGl0IHdhcyBpbiB0cmFuc2l0aW9uYWwgc3RhdGUpXG4gICAgICAgIC8vIHdlIGRpZmVyZW50aWF0ZSB0aGUgdHdvIGJ5IHRoZSBjdXJyZW50TWlsbGlzZWNvbmQgdmFsdWUgd2hpY2ggaW4gY2FzZSAoYSkgaXMgYWx3YXlzIDBcbiAgICAgICAgaWYgKGZvcmNlUmVzZXQgPT09IHRydWUgJiYgY3VycmVudE1pbGxpc2Vjb25kID09PSAwKSB7XG4gICAgICAgICAgdmFyIGZpcnN0SW5jaWRlbnQgPSB0aGlzLmluY2lkZW50c0J5SWQuX2dldChsYW5lWzBdLmlkKTtcblxuICAgICAgICAgIGZpcnN0SW5jaWRlbnQub25Qcm9ncmVzcygwLCAwLCBjb250ZXh0SWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHBhcnRpY2lwYXRpbmdBbmltcyA9IF9zb3J0QnkocGFydGljaXBhdGluZ0FuaW1zLCBbZnVuY3Rpb24gKGxhbmVJdGVtKSB7XG4gICAgICAgIHJldHVybiBsYW5lSXRlbS5taWxsaXNlY29uZDtcbiAgICAgIH1dKTsgLy8gV2Ugb25seSBjYXJlIGFib3V0IHRoZSBsYXN0IChpbiBjaHJvbm9sb2dpY2FsIG9yZGVyKSBJbmNpZGVudCwgYXMgdGhpc1xuICAgICAgLy8gd2lsbCBkZWZpbmUgdGhlIGZpbmFsIHZhbHVlXG5cbiAgICAgIHZhciBsYXN0SW5kZXggPSBwYXJ0aWNpcGF0aW5nQW5pbXMubGVuZ3RoIC0gMTtcblxuICAgICAgdmFyIHBhcnRpY2lwYXRpbmdBbmltID0gdGhpcy5pbmNpZGVudHNCeUlkLl9nZXQocGFydGljaXBhdGluZ0FuaW1zW2xhc3RJbmRleF0uaWQpO1xuXG4gICAgICB2YXIgc3RhcnRNaWxsaXNlY29uZCA9IHBhcnRpY2lwYXRpbmdBbmltc1tsYXN0SW5kZXhdLm1pbGxpc2Vjb25kOyAvLyBpZiB0aGUgYW5pbWF0aW9uIGVuZHMgYmVmb3JlIHRoZSB0YXJnZXQgbWlsbGlzZWNvbmRcblxuICAgICAgaWYgKHBhcnRpY2lwYXRpbmdBbmltLmR1cmF0aW9uICsgc3RhcnRNaWxsaXNlY29uZCA8PSBtaWxsaXNlY29uZCkge1xuICAgICAgICAvLyBhbmQgaXQncyB0aGUgbGFzdCBvbmUgb24gdGhlIHJvd1xuICAgICAgICBwYXJ0aWNpcGF0aW5nQW5pbS5vblByb2dyZXNzKDEsIHBhcnRpY2lwYXRpbmdBbmltLmR1cmF0aW9uLCBjb250ZXh0SWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc2xpcCBmb3IgdGhlIHNwZWNpZmljIGVsZW1lbnQgYW5kIHRoZSBzcGVjaWZpYyBhdHRyaWJ1dGUuIFNldCB0aGUgQW5pbWF0aW9uIGFzIHBhdXNlZCBvciBwbGF5aW5nIGFcbiAgICAgICAgLy8gYW5kIHN0b3JlIHRoaXMgaW5mbyBzb21ld2hlcmVcbiAgICAgICAgdmFyIHBlcmNlbnRhZ2VDb21wbGV0ZSA9IChtaWxsaXNlY29uZCAtIHN0YXJ0TWlsbGlzZWNvbmQpIC8gcGFydGljaXBhdGluZ0FuaW0uZHVyYXRpb247XG4gICAgICAgIHBhcnRpY2lwYXRpbmdBbmltLm9uUHJvZ3Jlc3MocGVyY2VudGFnZUNvbXBsZXRlLCBtaWxsaXNlY29uZCAtIHN0YXJ0TWlsbGlzZWNvbmQsIGNvbnRleHRJZCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNsaXBzIHRvIGp1c3Qgb25lIGxhbmUgYmFja3dhcmRzXG4gICAgICogQHBhcmFtIHthcnJheX0gbGFuZSAtIHRoZSBsYW5lIHRvIHNsaXAgaW50b1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBsYW5lRGF0YSAtIGFuIG9iamVjdCB3aXRoIGtleXM6IGF0dHJpYnV0ZSAmIG1jaWRcbiAgICAgKiBAcGFyYW0ge2ludH0gY3VycmVudE1pbGxpc2Vjb25kIC0gdGhlIG1pbGxpc2Vjb25kIHRoZSBzbGlwIHN0YXJ0cyBmcm9tXG4gICAgICogQHBhcmFtIHtpbnR9IG1pbGxpc2Vjb25kIC0gdGhlIHRhcmdldCBtaWxsaXNlY29uZCBvZiB0aGUgc2xpcFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0SWQgLSB0aGUgY29udGV4dElkIG9mIHRoZSBJbmNpZGVudHMgdG8gc2xpcFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2xpcFRvTGFuZUJhY2t3YXJkc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzbGlwVG9MYW5lQmFja3dhcmRzKGxhbmUsIGxhbmVEYXRhLCBjdXJyZW50TWlsbGlzZWNvbmQsIG1pbGxpc2Vjb25kLCBjb250ZXh0SWQpIHtcbiAgICAgIHZhciBmb3JjZVJlc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiBmYWxzZTtcbiAgICAgIC8vIHdlIHRha2UgYWxsIEFuaW1hdGlvbnMgdGhhdCBhcmUgZWl0aGVyIGN1cnJlbnRseSBydW5uaW5nIG9yXG4gICAgICAvLyB0aGV5IGVuZCBhZnRlciB0aGUgZGVzdGluYXRpb24gcG9pbnRcbiAgICAgIC8vIGhlbHBlci5sb2coJzwtLS0tLS0nKTtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgdmFyIHBhcnRpY2lwYXRpbmdBbmltcyA9IF9maWx0ZXIobGFuZSwgZnVuY3Rpb24gKGxhbmVJdGVtKSB7XG4gICAgICAgIHZhciBsYW5lSXRlbUVuZCA9IHRoYXQuaW5jaWRlbnRzQnlJZC5fZ2V0KGxhbmVJdGVtLmlkKS5kdXJhdGlvbiArIGxhbmVJdGVtLm1pbGxpc2Vjb25kO1xuICAgICAgICByZXR1cm4gbGFuZUl0ZW1FbmQgPD0gbWlsbGlzZWNvbmQgJiYgbGFuZUl0ZW1FbmQgPj0gY3VycmVudE1pbGxpc2Vjb25kIHx8IC8vIHRoZXkgZW5kIGluIHRoZSBob3QgYXJlYVxuICAgICAgICBsYW5lSXRlbS5taWxsaXNlY29uZCA+PSBjdXJyZW50TWlsbGlzZWNvbmQgJiYgbGFuZUl0ZW0ubWlsbGlzZWNvbmQgPD0gbWlsbGlzZWNvbmQgfHwgLy8gdGhleSBzdGFydCBpbiB0aGUgaG90IGFyZWFcbiAgICAgICAgbGFuZUl0ZW0ubWlsbGlzZWNvbmQgPCBjdXJyZW50TWlsbGlzZWNvbmQgJiYgbGFuZUl0ZW1FbmQgPiBtaWxsaXNlY29uZDsgLy8gdGhleSBvdmVybGFwIHRoZSBob3QgYXJlYVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwYXJ0aWNpcGF0aW5nQW5pbXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHBhcnRpY2lwYXRpbmdBbmltcyA9IF9zb3J0QnkocGFydGljaXBhdGluZ0FuaW1zLCBbZnVuY3Rpb24gKGxhbmVJdGVtKSB7XG4gICAgICAgIHJldHVybiBsYW5lSXRlbS5taWxsaXNlY29uZDtcbiAgICAgIH1dKTsgLy8gV2Ugb25seSBjYXJlIGFib3V0IHRoZSBmaXJzdCAoaW4gY2hyb25vbG9naWNhbCBvcmRlcikgSW5jaWRlbnQsIGFzIHRoaXNcbiAgICAgIC8vIHdpbGwgZGVmaW5lIHRoZSBmaW5hbCB2YWx1ZSBvZiB0aGUgYmFja3dhcmRzIG1vdmVcblxuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG5cbiAgICAgIHZhciBwYXJ0aWNpcGF0aW5nQW5pbSA9IHRoaXMuaW5jaWRlbnRzQnlJZC5fZ2V0KHBhcnRpY2lwYXRpbmdBbmltc1tsYXN0SW5kZXhdLmlkKTtcblxuICAgICAgdmFyIHN0YXJ0TWlsbGlzZWNvbmQgPSBwYXJ0aWNpcGF0aW5nQW5pbXNbbGFzdEluZGV4XS5taWxsaXNlY29uZDsgLy8gaWYgdGhlIGFuaW1hdGlvbiBzdGFydHMgYWZ0ZXIgdGhlIHRhcmdldCBtaWxsaXNlY29uZFxuXG4gICAgICBpZiAoc3RhcnRNaWxsaXNlY29uZCA+PSBtaWxsaXNlY29uZCkge1xuICAgICAgICBwYXJ0aWNpcGF0aW5nQW5pbS5vblByb2dyZXNzKDAsIDAsIGNvbnRleHRJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzbGlwIGZvciB0aGUgc3BlY2lmaWMgZWxlbWVudCBhbmQgdGhlIHNwZWNpZmljIGF0dHJpYnV0ZS4gU2V0IHRoZSBBbmltYXRpb24gYXMgcGF1c2VkIG9yIHBsYXlpbmcgYVxuICAgICAgICAvLyBhbmQgc3RvcmUgdGhpcyBpbmZvIHNvbWV3aGVyZVxuICAgICAgICB2YXIgcGVyY2VudGFnZUNvbXBsZXRlID0gKG1pbGxpc2Vjb25kIC0gc3RhcnRNaWxsaXNlY29uZCkgLyBwYXJ0aWNpcGF0aW5nQW5pbS5kdXJhdGlvbjtcbiAgICAgICAgcGFydGljaXBhdGluZ0FuaW0ub25Qcm9ncmVzcyhwZXJjZW50YWdlQ29tcGxldGUsIG1pbGxpc2Vjb25kIC0gc3RhcnRNaWxsaXNlY29uZCwgY29udGV4dElkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgIEBwYXJhbSB7aW50fSBmcm9tIC0gdGhlIG1pbGxpc2Vjb25kIHRvIHN0YXJ0IGZyb21cbiAgICAgQHBhcmFtIHtpbnR9IHRvIC0gdGhlIG1pbGxpc2Vjb25kIHRvIGdvIHRvXG4gICAgIEBwYXJhbSB7c3Jpbmd9IGNvbnRleHRJZCAtIHRoZSBjb250ZXh0IGlkIHRvIFwibW92ZVwiXG4gICAgIEBwYXJhbSB7Ym9vbGVhbn0gZm9yY2VSZXNldCAtIHNldCB0byB0cnVlIGlmIHN0YXR1cyByZWNhbGMgaXMgbmVlZGVkIGFmdGVyIGVkaXRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1vdmVUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlVG8oZnJvbSwgdG8sIGNvbnRleHRJZCkge1xuICAgICAgdmFyIGZvcmNlUmVzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuXG4gICAgICAvLyBzdGVwIDE6IGl0ZXJhdGUgdGhyb3VnaCBhbGwgbGFuZXNcbiAgICAgIHZhciBsYW5lS2V5cyA9IHRoaXMubGFuZXMuX2tleXMoKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYW5lS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbGFuZWlkID0gbGFuZUtleXNbaV07XG5cbiAgICAgICAgdmFyIGxhbmUgPSB0aGlzLmxhbmVzLl9nZXQobGFuZWlkKTtcblxuICAgICAgICB2YXIgbGFuZURhdGEgPSBoZWxwZXIuZ2V0TUNJRGFuZEF0dHJPdXRPZkxhbmVLZXkobGFuZWlkKTtcblxuICAgICAgICBpZiAoZnJvbSA8PSB0bykge1xuICAgICAgICAgIHRoaXMuc2xpcEludG9MYW5lRm9yd2FyZHMobGFuZSwgbGFuZURhdGEsIGZyb20sIHRvLCBjb250ZXh0SWQsIGZvcmNlUmVzZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKGZyb20gPiB0bykge1xuICAgICAgICAgIHRoaXMuc2xpcFRvTGFuZUJhY2t3YXJkcyhsYW5lLCBsYW5lRGF0YSwgZnJvbSwgdG8sIGNvbnRleHRJZCwgZm9yY2VSZXNldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGFuZXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLkxhbmVzSGFuZGxlci5sYW5lcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5jaWRlbnRzQnlJZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuTGFuZXNIYW5kbGVyLmluY2lkZW50c0J5SWQ7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwidHlwZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFwiYXR0cmlidXRlc1wiO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdHRyaWJ1dGVDaGFubmVsO1xufShDaGFubmVsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdHRyaWJ1dGVDaGFubmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar _findIndex = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.findindex/index */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper({\n  logLevel: 4\n});\n\nvar Collection = __webpack_require__(/*! ./helpers/Collection */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js\");\n\nvar SandboxLanes = __webpack_require__(/*! ./helpers/SandboxLanes */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js\");\n\nvar SandboxCollection = __webpack_require__(/*! ./helpers/SandboxCollection */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxIncidentsById = __webpack_require__(/*! ./helpers/SandboxIncidentsById */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js\");\n\nvar setInitialValueForCombo = __webpack_require__(/*! ./helpers/ComboAttrsCascading */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js\");\n\nvar LanesHandler =\n/*#__PURE__*/\nfunction () {\n  function LanesHandler() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LanesHandler);\n\n    /*\n     * Keeps the lanes of the Channel in the form:\n     * {\n     *  <motorcortex-id>_<attribute>: [\n     *      {\n     *          id: the id of the Incident\n     *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n     *      }\n     *  ]\n     * }\n     /** @type {{}}\n     */\n    this.lanes = new Collection({});\n\n    if (props.lanes) {\n      this.lanes = props.lanes;\n    }\n\n    this.comboAttributes = {};\n\n    if (props.comboAttributes != null) {\n      this.comboAttributes = props.comboAttributes;\n    }\n\n    this.runTimeInfo = props.runTimeInfo;\n    /*\n    Keeps an indexing of the lanes each Animation belongs to. The form is the following:\n    belongingLaneKeysByAnimationId: {\n        <animation_id>: [laneKey1, laneKey2, ...],\n        <animation_id>: [laneKey2, laneKey3, ...],\n        ...\n    }\n     */\n\n    this.belongingLaneKeysByAnimationId = new Collection({});\n\n    if (props.belongingLaneKeysByAnimationId) {\n      this.belongingLaneKeysByAnimationId = props.belongingLaneKeysByAnimationId;\n    }\n    /*\n    keeps all Incidents (that appear on the lanes) mapped on a key - value pair\n    object on which the keys are the ids and the values the corresponding Incidents.\n    The Incidents of this object are ContextAwareIncidents\n    */\n\n\n    this.incidentsById = new Collection({});\n\n    if (props.incidentsById) {\n      this.incidentsById = props.incidentsById;\n    }\n  }\n  /**\n   * This method resizes all the lanes of the Lanes Handler by the durationFraction provided.\n   * No checks are performed.\n   * This method is been invoked in cases where a full Clip gets resized, so no conflict checks need to\n   * run.\n   * @param {float} durationFration: the fraction between the new duration and the current\n   */\n\n\n  _createClass(LanesHandler, [{\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      var keys = this.lanes._keys();\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n\n        var theLane = this.lanes._get(key);\n\n        for (var _i = 0; _i < theLane.length; _i++) {\n          theLane[_i].millisecond = theLane[_i].millisecond * durationFraction;\n        }\n      }\n    }\n    /**\n     * it creates a new LanesHandler that acts as a sanbox for testing changes\n     */\n\n  }, {\n    key: \"createTestLanesSanbox\",\n    value: function createTestLanesSanbox() {\n      var props = {\n        lanes: new SandboxLanes(this.lanes._export()),\n        belongingLaneKeysByAnimationId: new SandboxCollection(this.belongingLaneKeysByAnimationId._export()),\n        incidentsById: new SandboxIncidentsById(this.incidentsById._export())\n      };\n\n      if (this.comboAttributes) {\n        props.comboAttributes = this.comboAttributes;\n      }\n\n      return new LanesHandler(props);\n    }\n  }, {\n    key: \"getLanesCopy\",\n    value: function getLanesCopy(lane) {\n      var laneToReturn = [];\n\n      for (var i = 0; i < lane.length; i++) {\n        laneToReturn.push({\n          id: lane[i].id,\n          millisecond: lane[i].millisecond * 1\n        });\n      }\n\n      return laneToReturn;\n    }\n  }, {\n    key: \"getLaneElementsClone\",\n    value: function getLaneElementsClone(laneElement) {\n      return {\n        id: laneElement.id,\n        millisecond: laneElement.millisecond * 1\n      };\n    }\n  }, {\n    key: \"applySandboxChanges\",\n    value: function applySandboxChanges(SanboxObject) {\n      this.lanes = new Collection(SanboxObject.lanes._export());\n      this.belongingLaneKeysByAnimationId = new Collection(SanboxObject.belongingLaneKeysByAnimationId._export());\n      this.incidentsById = new Collection(SanboxObject.incidentsById._export());\n    }\n  }, {\n    key: \"getLane\",\n    value: function getLane(mcid, attr) {\n      return this.lanes._get(helper.getLaneKey(mcid, attr));\n    }\n    /**\n     * return true if lane exists or false otherwise\n     * @param {String} mcid\n     * @param {String} attr\n     * @param {boolean} ifNotCreateIt - if is set to true and the lane doesn't exist it creates it but still returning false\n     */\n\n  }, {\n    key: \"laneExists\",\n    value: function laneExists(mcid, attr) {\n      var ifNotCreateIt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var laneKey = helper.getLaneKey(mcid, attr);\n\n      if (!this.lanes._hasOwnProperty(laneKey)) {\n        if (ifNotCreateIt) {\n          this.lanes._set(laneKey, []);\n        }\n\n        return false;\n      } else {\n        return true;\n      }\n    }\n    /**\n     * @param {Object} newAnim - an object of the form of a lane item (with keys \"millisecond\" and \"incident\"\n     * @param {string} mcid\n     * @param {String} attr\n     * @param {array} excludeIdsFromCheck - optional. If exists it excludes all the ids of this array from check. This\n     *  parameter has been added for the edit checks where an animation might overlap another animation that participates on\n     *  the move, something that should not happen as the edited animations pre-existed without conflicts and the move of all\n     *  of them together guarantees that there is going to be no conflict between them even after the edit\n     * @param {int} testDuration - optional. This parameter is used when the channel needs to addcheck overlaps after duration\n     *  edits, so the testDuration is passed (we don't want to polute the original animation object as it refers to the real one)\n     * @retuns {array} - a list of all overlapping animations of the lane\n     */\n\n  }, {\n    key: \"getOverlappingAnims\",\n    value: function getOverlappingAnims(newAnim, mcid, attr) {\n      var excludeIdsFromCheck = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      var testDuration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var that = this;\n\n      var overlappingAnims = _filter(this.lanes._get(helper.getLaneKey(mcid, attr)), function (existingAnim) {\n        var durationToUseOnChecks = newAnim.incident.duration;\n\n        if (testDuration != null) {\n          durationToUseOnChecks = testDuration;\n        }\n\n        return existingAnim.id != newAnim.incident.id && excludeIdsFromCheck.indexOf(existingAnim.id) < 0 && ( // existing anim starts within the new anim's extend\n        existingAnim.millisecond >= newAnim.millisecond && existingAnim.millisecond < durationToUseOnChecks + newAnim.millisecond || // or ends within the new anim's extend\n        existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration > newAnim.millisecond && existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration <= durationToUseOnChecks + newAnim.millisecond // or it starts before and ends after the new anim's extend\n        || existingAnim.millisecond < newAnim.millisecond && existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration > durationToUseOnChecks + newAnim.millisecond);\n      });\n\n      return overlappingAnims;\n    }\n    /**\n     * it justs adds the lane item to the lane and adjusts the initial values of the Anims in sequence\n     * No checks are performed, just execution.\n     * @param {String} mcid\n     * @param {String} attr\n     * @param {int} millisecond\n     * @param {Object} incident\n     */\n\n  }, {\n    key: \"addElementToLane\",\n    value: function addElementToLane(mcid, attr, millisecond, incident) {\n      var laneKey = helper.getLaneKey(mcid, attr);\n\n      this.incidentsById._set(incident.id, incident);\n\n      var laneElement = {\n        millisecond: millisecond,\n        id: incident.id\n      };\n      this.laneExists(mcid, attr, true);\n\n      var theLane = this.lanes._get(laneKey);\n\n      theLane.push(laneElement);\n      theLane = _sortBy(theLane, ['millisecond']);\n\n      this.lanes._set(laneKey, theLane); // indexing stuff\n\n\n      if (!this.belongingLaneKeysByAnimationId._hasOwnProperty(incident.id)) {\n        this.belongingLaneKeysByAnimationId._set(incident.id, []);\n      }\n\n      this.belongingLaneKeysByAnimationId._get(incident.id).push(laneKey); // indexing\n\n\n      var newAnimsIndex = _findIndex(theLane, function (item) {\n        return item.id === incident.id;\n      }); // helper.log(newAnimsIndex);\n      // step 1: set the intial values of the new Animation\n\n\n      if (newAnimsIndex === 0) {\n        // if the newly entered animation is the first of the lane\n        if (theLane.length > 1) {\n          // and it has other animations too\n          incident.setInitialValue(this.incidentsById._get(theLane[1].id).pureInitialValues);\n        } else {\n          incident.setInitialValue();\n        }\n      } else {\n        incident.setInitialValue(this.incidentsById._get(theLane[newAnimsIndex - 1].id).animatedAttributeValue);\n      }\n      /* if the attribute of the lane is a compo attribute */\n\n\n      if (Object.prototype.hasOwnProperty.call(this.comboAttributes, attr)) {\n        var incidentInitialValues = incident.initialValue;\n        setInitialValueForCombo(theLane, this.incidentsById, incidentInitialValues, newAnimsIndex);\n      } // step 2: set the inital values of the following Animation (if any).\n\n\n      if (newAnimsIndex + 1 < theLane.length) {\n        this.incidentsById._get(theLane[newAnimsIndex + 1].id).setInitialValue(incident.animatedAttributeValue);\n\n        if (this.incidentsById._get(theLane[newAnimsIndex + 1].id).gotContext) {\n          this.incidentsById._get(theLane[newAnimsIndex + 1].id).lastWish();\n\n          this.incidentsById._get(theLane[newAnimsIndex + 1].id).onGetContext();\n        }\n      }\n    }\n    /**\n     * it justs updates the lane\n     * No checks are performed, just execution\n     * @param {array} affectedAnimationsIds\n     * @param {int} millisecondDelta\n     */\n\n  }, {\n    key: \"updateLane\",\n    value: function updateLane(affectedAnimationsIds, millisecondsDelta) {\n      var _this = this;\n\n      // first we group the affected animations by lanes\n      var affectedLanes = {};\n      var that = this;\n\n      for (var i = 0; i < affectedAnimationsIds.length; i++) {\n        var belongingLanes = this.belongingLaneKeysByAnimationId._get(affectedAnimationsIds[i]);\n\n        for (var j = 0; j < belongingLanes.length; j++) {\n          var laneKey = belongingLanes[j];\n\n          if (!Object.prototype.hasOwnProperty.call(affectedLanes, laneKey)) {\n            affectedLanes[laneKey] = {\n              animations: [],\n              lane: that.lanes._get(laneKey),\n              laneData: helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j])\n            };\n          }\n\n          affectedLanes[laneKey].animations.push(affectedAnimationsIds[i]);\n        }\n      } // for each of the affected lanes\n\n\n      for (var _laneKey in affectedLanes) {\n        var affectedLane = affectedLanes[_laneKey];\n        var lane = affectedLane.lane;\n        var laneData = affectedLane.laneData;\n\n        var laneBeforeEdit = _sortBy(this.getLanesCopy(lane), ['millisecond']);\n\n        var isComboAttr = Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute); // edit lane items millisecond\n\n        for (var k = 0; k < lane.length; k++) {\n          if (affectedLane.animations.indexOf(lane[k].id) >= 0) {\n            lane[k].millisecond += millisecondsDelta;\n          }\n        } // end for searching for the animations within the lane\n\n\n        var sortedLane = _sortBy(lane, ['millisecond']);\n\n        this.lanes._set(_laneKey, sortedLane);\n\n        lane = sortedLane;\n\n        var _loop = function _loop(_i2) {\n          var animationToCheck = affectedLane.animations[_i2];\n\n          var animationIndexBeforeEdit = _findIndex(laneBeforeEdit, function (item) {\n            return item.id === animationToCheck;\n          });\n\n          var animationIndexAfterEdit = _findIndex(lane, function (item) {\n            return item.id === animationToCheck;\n          });\n\n          var animation = _this.incidentsById._get(lane[animationIndexAfterEdit].id);\n\n          if (animationIndexBeforeEdit !== animationIndexAfterEdit || animationIndexAfterEdit > 1) {\n            if (animationIndexBeforeEdit + 1 < lane.length) {\n              // if the animation was not the last animation on the lane before the edit\n              // we should take care of the initial values of the animation's previous successor\n              if (animationIndexBeforeEdit === 0) {\n                // if the edited animation was the first one before the edit\n                // pass its initial values to its previous successor as its new initial values\n                if (isComboAttr) {\n                  setInitialValueForCombo(lane, _this.incidentsById, animation.pureInitialValues, 0, true);\n                } else {\n                  _this.incidentsById._get(laneBeforeEdit[1].id).setInitialValue(animation.pureInitialValues);\n\n                  _this.incidentsById._get(laneBeforeEdit[1].id).onGetContext();\n                }\n              } else {\n                // else if the edited animation was not the first one before the edit\n                // meaning its previous successor is not the first one on the lane after the edit\n                // just grab the target value of the new previous animation of the animation's previous successor and set it as initial value\n                if (isComboAttr) {\n                  var indexToAffect = animationIndexAfterEdit > animationIndexBeforeEdit ? animationIndexBeforeEdit : animationIndexAfterEdit;\n                  setInitialValueForCombo(lane, _this.incidentsById, _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit - 1].id).animatedAttributeValue, indexToAffect, true);\n                } else {\n                  _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit + 1].id).setInitialValue(_this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit - 1].id).animatedAttributeValue);\n\n                  _this.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit + 1].id).onGetContext();\n                }\n              }\n            } // for the edited animation itself now:\n\n\n            if (animationIndexAfterEdit === 0) {\n              // is it the first one (after edit)?\n              // get the initial values of the previously 0 indexed animation of the lane\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this.incidentsById, _this.incidentsById._get(laneBeforeEdit[0].id).pureInitialValues, animationIndexAfterEdit, true);\n              } else {\n                animation.setInitialValue(_this.incidentsById._get(laneBeforeEdit[0].id).pureInitialValues);\n                animation.onGetContext();\n              }\n            } else {\n              // else if it is not the first one after editd\n              // just grab the target value of the previous animation on the updated lane and set it as its initial value\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this.incidentsById, _this.incidentsById._get(lane[animationIndexAfterEdit - 1].id).animatedAttributeValue, animationIndexAfterEdit, true);\n              } else {\n                animation.setInitialValue(_this.incidentsById._get(lane[animationIndexAfterEdit - 1].id).animatedAttributeValue);\n                animation.onGetContext();\n              }\n            } // for its new next animation (if it has one)\n\n\n            if (animationIndexAfterEdit + 1 < lane.length) {\n              // set its initial value to equal the target value of the edited animation\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this.incidentsById, animation.animatedAttributeValue, animationIndexAfterEdit + 1, true);\n              } else {\n                _this.incidentsById._get(lane[animationIndexAfterEdit + 1].id).setInitialValue(animation.animatedAttributeValue);\n\n                _this.incidentsById._get(lane[animationIndexAfterEdit + 1].id).onGetContext();\n              }\n            }\n          }\n        };\n\n        for (var _i2 = 0; _i2 < affectedLane.animations.length; _i2++) {\n          _loop(_i2);\n        }\n      } // end for each of the belonging lanes of the animation\n\n    }\n    /**\n     * removes the list of animations as provided\n     * @param {array} removedAnimations - an array with the removed animations' ids\n     */\n\n  }, {\n    key: \"deleteAnimations\",\n    value: function deleteAnimations(removedAnimations) {\n      var affectedLanes = {};\n\n      for (var i = 0; i < removedAnimations.length; i++) {\n        var id = removedAnimations[i]; // for each lane the affected Animation appears in\n\n        var belongingLanes = this.belongingLaneKeysByAnimationId._get(id);\n\n        for (var j = 0; j < belongingLanes.length; j++) {\n          var lane = this.lanes._get(belongingLanes[j]);\n\n          var animationIndexBeforeEdit = -1;\n\n          for (var k = 0; k < lane.length; k++) {\n            if (lane[k].id === id) {\n              animationIndexBeforeEdit = k;\n              break;\n            }\n          } // helper.log(animationIndexBeforeEdit);\n\n\n          var animationToDelete = Object.assign({}, lane[animationIndexBeforeEdit]);\n\n          var animationObjectToDelete = this.incidentsById._get(animationToDelete.id);\n\n          var laneData = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]); // gets the lane without the removed animation\n\n          var newLane = [];\n\n          for (var _k = 0; _k < lane.length; _k++) {\n            if (lane[_k].id != id) {\n              newLane.push(lane[_k]);\n            }\n          }\n\n          this.lanes._set(belongingLanes[j], newLane);\n\n          lane = this.lanes._get(belongingLanes[j]);\n\n          if (lane.length === 0) {\n            // in case there are no more animations on the lane any more we reset\n            // the lane by running the progress(0,0), so that the affected elements\n            // will get back to their original attribute value\n            animationObjectToDelete.onProgress(0, 0);\n\n            this.lanes._delete(belongingLanes[j]);\n\n            if (Object.prototype.hasOwnProperty.call(affectedLanes, belongingLanes[j])) {\n              delete affectedLanes[belongingLanes[j]];\n            }\n          } else {\n            affectedLanes[belongingLanes[j]] = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]);\n\n            if (animationIndexBeforeEdit < lane.length && this.incidentsById._get(animationToDelete.id).pureInitialValues !== false) {\n              if (Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute)) {\n                setInitialValueForCombo(lane, this.incidentsById, this.incidentsById._get(animationToDelete.id).pureInitialValues, animationIndexBeforeEdit, true);\n              } else {\n                this.incidentsById._get(lane[animationIndexBeforeEdit].id).setInitialValue(this.incidentsById._get(animationToDelete.id).pureInitialValues);\n\n                this.incidentsById._get(lane[animationIndexBeforeEdit].id).onGetContext();\n              }\n            }\n          }\n        }\n\n        this.belongingLaneKeysByAnimationId._delete(removedAnimations[i]);\n      }\n\n      return affectedLanes;\n    }\n    /**\n     * This method is responsible for recalculating the scratch values of the first\n     * Incident of each of the lanes of the LanesHandler according to the provided\n     * context id\n     **/\n\n  }, {\n    key: \"recalcScratchValues\",\n    value: function recalcScratchValues(contextId) {\n      var keys = this.lanes._keys();\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n\n        var theLane = this.lanes._get(key);\n\n        if (theLane.length > 0) {\n          var firstIncident = this.incidentsById._get(theLane[0].id);\n\n          var newScratchValue = firstIncident.getScratchValue(contextId);\n          var laneData = helper.getLaneDataFromLaneKey(key);\n\n          if (Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute)) {\n            // if it is a combo\n            setInitialValueForCombo(theLane, this.incidentsById, newScratchValue, 0, true);\n          } else {\n            // else if it's not a combo attribute\n            firstIncident.setInitialValue(newScratchValue);\n          }\n\n          firstIncident.lastWish();\n          firstIncident.onGetContext();\n        }\n      }\n    }\n  }]);\n\n  return LanesHandler;\n}();\n\nmodule.exports = LanesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9MYW5lc0hhbmRsZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9MYW5lc0hhbmRsZXIuanM/MGM3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgX2ZpbHRlciA9IHJlcXVpcmUoJy4uLy4uLy4uL2xvZGFzaC1jdXN0b20tYnVpbGQvbW9kdWxhcml6ZS9sb2Rhc2guZmlsdGVyL2luZGV4Jyk7XG5cbnZhciBfc29ydEJ5ID0gcmVxdWlyZSgnLi4vLi4vLi4vbG9kYXNoLWN1c3RvbS1idWlsZC9tb2R1bGFyaXplL2xvZGFzaC5zb3J0YnkvaW5kZXgnKTtcblxudmFyIF9maW5kSW5kZXggPSByZXF1aXJlKCcuLi8uLi8uLi9sb2Rhc2gtY3VzdG9tLWJ1aWxkL21vZHVsYXJpemUvbG9kYXNoLmZpbmRpbmRleC9pbmRleCcpO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoe1xuICBsb2dMZXZlbDogNFxufSk7XG5cbnZhciBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9oZWxwZXJzL0NvbGxlY3Rpb24nKTtcblxudmFyIFNhbmRib3hMYW5lcyA9IHJlcXVpcmUoJy4vaGVscGVycy9TYW5kYm94TGFuZXMnKTtcblxudmFyIFNhbmRib3hDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9oZWxwZXJzL1NhbmRib3hDb2xsZWN0aW9uJyk7XG5cbnZhciBTYW5kYm94SW5jaWRlbnRzQnlJZCA9IHJlcXVpcmUoJy4vaGVscGVycy9TYW5kYm94SW5jaWRlbnRzQnlJZCcpO1xuXG52YXIgc2V0SW5pdGlhbFZhbHVlRm9yQ29tYm8gPSByZXF1aXJlKCcuL2hlbHBlcnMvQ29tYm9BdHRyc0Nhc2NhZGluZycpO1xuXG52YXIgTGFuZXNIYW5kbGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGFuZXNIYW5kbGVyKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGFuZXNIYW5kbGVyKTtcblxuICAgIC8qXG4gICAgICogS2VlcHMgdGhlIGxhbmVzIG9mIHRoZSBDaGFubmVsIGluIHRoZSBmb3JtOlxuICAgICAqIHtcbiAgICAgKiAgPG1vdG9yY29ydGV4LWlkPl88YXR0cmlidXRlPjogW1xuICAgICAqICAgICAge1xuICAgICAqICAgICAgICAgIGlkOiB0aGUgaWQgb2YgdGhlIEluY2lkZW50XG4gICAgICogICAgICAgICAgbWlsbGlzZWNvbmQ6IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgY2hhbm5lbCB0aGlzIEFuaW1hdGlvbiAodGhhdCBhZmZlY3RzIHRoZSBzZWxlY3Rvci9hdHRyaWJ1dGUgcGFpcikgcnVuc1xuICAgICAqICAgICAgfVxuICAgICAqICBdXG4gICAgICogfVxuICAgICAvKiogQHR5cGUge3t9fVxuICAgICAqL1xuICAgIHRoaXMubGFuZXMgPSBuZXcgQ29sbGVjdGlvbih7fSk7XG5cbiAgICBpZiAocHJvcHMubGFuZXMpIHtcbiAgICAgIHRoaXMubGFuZXMgPSBwcm9wcy5sYW5lcztcbiAgICB9XG5cbiAgICB0aGlzLmNvbWJvQXR0cmlidXRlcyA9IHt9O1xuXG4gICAgaWYgKHByb3BzLmNvbWJvQXR0cmlidXRlcyAhPSBudWxsKSB7XG4gICAgICB0aGlzLmNvbWJvQXR0cmlidXRlcyA9IHByb3BzLmNvbWJvQXR0cmlidXRlcztcbiAgICB9XG5cbiAgICB0aGlzLnJ1blRpbWVJbmZvID0gcHJvcHMucnVuVGltZUluZm87XG4gICAgLypcbiAgICBLZWVwcyBhbiBpbmRleGluZyBvZiB0aGUgbGFuZXMgZWFjaCBBbmltYXRpb24gYmVsb25ncyB0by4gVGhlIGZvcm0gaXMgdGhlIGZvbGxvd2luZzpcbiAgICBiZWxvbmdpbmdMYW5lS2V5c0J5QW5pbWF0aW9uSWQ6IHtcbiAgICAgICAgPGFuaW1hdGlvbl9pZD46IFtsYW5lS2V5MSwgbGFuZUtleTIsIC4uLl0sXG4gICAgICAgIDxhbmltYXRpb25faWQ+OiBbbGFuZUtleTIsIGxhbmVLZXkzLCAuLi5dLFxuICAgICAgICAuLi5cbiAgICB9XG4gICAgICovXG5cbiAgICB0aGlzLmJlbG9uZ2luZ0xhbmVLZXlzQnlBbmltYXRpb25JZCA9IG5ldyBDb2xsZWN0aW9uKHt9KTtcblxuICAgIGlmIChwcm9wcy5iZWxvbmdpbmdMYW5lS2V5c0J5QW5pbWF0aW9uSWQpIHtcbiAgICAgIHRoaXMuYmVsb25naW5nTGFuZUtleXNCeUFuaW1hdGlvbklkID0gcHJvcHMuYmVsb25naW5nTGFuZUtleXNCeUFuaW1hdGlvbklkO1xuICAgIH1cbiAgICAvKlxuICAgIGtlZXBzIGFsbCBJbmNpZGVudHMgKHRoYXQgYXBwZWFyIG9uIHRoZSBsYW5lcykgbWFwcGVkIG9uIGEga2V5IC0gdmFsdWUgcGFpclxuICAgIG9iamVjdCBvbiB3aGljaCB0aGUga2V5cyBhcmUgdGhlIGlkcyBhbmQgdGhlIHZhbHVlcyB0aGUgY29ycmVzcG9uZGluZyBJbmNpZGVudHMuXG4gICAgVGhlIEluY2lkZW50cyBvZiB0aGlzIG9iamVjdCBhcmUgQ29udGV4dEF3YXJlSW5jaWRlbnRzXG4gICAgKi9cblxuXG4gICAgdGhpcy5pbmNpZGVudHNCeUlkID0gbmV3IENvbGxlY3Rpb24oe30pO1xuXG4gICAgaWYgKHByb3BzLmluY2lkZW50c0J5SWQpIHtcbiAgICAgIHRoaXMuaW5jaWRlbnRzQnlJZCA9IHByb3BzLmluY2lkZW50c0J5SWQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZXNpemVzIGFsbCB0aGUgbGFuZXMgb2YgdGhlIExhbmVzIEhhbmRsZXIgYnkgdGhlIGR1cmF0aW9uRnJhY3Rpb24gcHJvdmlkZWQuXG4gICAqIE5vIGNoZWNrcyBhcmUgcGVyZm9ybWVkLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBiZWVuIGludm9rZWQgaW4gY2FzZXMgd2hlcmUgYSBmdWxsIENsaXAgZ2V0cyByZXNpemVkLCBzbyBubyBjb25mbGljdCBjaGVja3MgbmVlZCB0b1xuICAgKiBydW4uXG4gICAqIEBwYXJhbSB7ZmxvYXR9IGR1cmF0aW9uRnJhdGlvbjogdGhlIGZyYWN0aW9uIGJldHdlZW4gdGhlIG5ldyBkdXJhdGlvbiBhbmQgdGhlIGN1cnJlbnRcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoTGFuZXNIYW5kbGVyLCBbe1xuICAgIGtleTogXCJfcmVzaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNpemUoZHVyYXRpb25GcmFjdGlvbikge1xuICAgICAgdmFyIGtleXMgPSB0aGlzLmxhbmVzLl9rZXlzKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICB2YXIgdGhlTGFuZSA9IHRoaXMubGFuZXMuX2dldChrZXkpO1xuXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGVMYW5lLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHRoZUxhbmVbX2ldLm1pbGxpc2Vjb25kID0gdGhlTGFuZVtfaV0ubWlsbGlzZWNvbmQgKiBkdXJhdGlvbkZyYWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGl0IGNyZWF0ZXMgYSBuZXcgTGFuZXNIYW5kbGVyIHRoYXQgYWN0cyBhcyBhIHNhbmJveCBmb3IgdGVzdGluZyBjaGFuZ2VzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjcmVhdGVUZXN0TGFuZXNTYW5ib3hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVGVzdExhbmVzU2FuYm94KCkge1xuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBsYW5lczogbmV3IFNhbmRib3hMYW5lcyh0aGlzLmxhbmVzLl9leHBvcnQoKSksXG4gICAgICAgIGJlbG9uZ2luZ0xhbmVLZXlzQnlBbmltYXRpb25JZDogbmV3IFNhbmRib3hDb2xsZWN0aW9uKHRoaXMuYmVsb25naW5nTGFuZUtleXNCeUFuaW1hdGlvbklkLl9leHBvcnQoKSksXG4gICAgICAgIGluY2lkZW50c0J5SWQ6IG5ldyBTYW5kYm94SW5jaWRlbnRzQnlJZCh0aGlzLmluY2lkZW50c0J5SWQuX2V4cG9ydCgpKVxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuY29tYm9BdHRyaWJ1dGVzKSB7XG4gICAgICAgIHByb3BzLmNvbWJvQXR0cmlidXRlcyA9IHRoaXMuY29tYm9BdHRyaWJ1dGVzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IExhbmVzSGFuZGxlcihwcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldExhbmVzQ29weVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYW5lc0NvcHkobGFuZSkge1xuICAgICAgdmFyIGxhbmVUb1JldHVybiA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhbmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGFuZVRvUmV0dXJuLnB1c2goe1xuICAgICAgICAgIGlkOiBsYW5lW2ldLmlkLFxuICAgICAgICAgIG1pbGxpc2Vjb25kOiBsYW5lW2ldLm1pbGxpc2Vjb25kICogMVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxhbmVUb1JldHVybjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TGFuZUVsZW1lbnRzQ2xvbmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFuZUVsZW1lbnRzQ2xvbmUobGFuZUVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBsYW5lRWxlbWVudC5pZCxcbiAgICAgICAgbWlsbGlzZWNvbmQ6IGxhbmVFbGVtZW50Lm1pbGxpc2Vjb25kICogMVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXBwbHlTYW5kYm94Q2hhbmdlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseVNhbmRib3hDaGFuZ2VzKFNhbmJveE9iamVjdCkge1xuICAgICAgdGhpcy5sYW5lcyA9IG5ldyBDb2xsZWN0aW9uKFNhbmJveE9iamVjdC5sYW5lcy5fZXhwb3J0KCkpO1xuICAgICAgdGhpcy5iZWxvbmdpbmdMYW5lS2V5c0J5QW5pbWF0aW9uSWQgPSBuZXcgQ29sbGVjdGlvbihTYW5ib3hPYmplY3QuYmVsb25naW5nTGFuZUtleXNCeUFuaW1hdGlvbklkLl9leHBvcnQoKSk7XG4gICAgICB0aGlzLmluY2lkZW50c0J5SWQgPSBuZXcgQ29sbGVjdGlvbihTYW5ib3hPYmplY3QuaW5jaWRlbnRzQnlJZC5fZXhwb3J0KCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRMYW5lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhbmUobWNpZCwgYXR0cikge1xuICAgICAgcmV0dXJuIHRoaXMubGFuZXMuX2dldChoZWxwZXIuZ2V0TGFuZUtleShtY2lkLCBhdHRyKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJldHVybiB0cnVlIGlmIGxhbmUgZXhpc3RzIG9yIGZhbHNlIG90aGVyd2lzZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtY2lkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlmTm90Q3JlYXRlSXQgLSBpZiBpcyBzZXQgdG8gdHJ1ZSBhbmQgdGhlIGxhbmUgZG9lc24ndCBleGlzdCBpdCBjcmVhdGVzIGl0IGJ1dCBzdGlsbCByZXR1cm5pbmcgZmFsc2VcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxhbmVFeGlzdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGFuZUV4aXN0cyhtY2lkLCBhdHRyKSB7XG4gICAgICB2YXIgaWZOb3RDcmVhdGVJdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gICAgICB2YXIgbGFuZUtleSA9IGhlbHBlci5nZXRMYW5lS2V5KG1jaWQsIGF0dHIpO1xuXG4gICAgICBpZiAoIXRoaXMubGFuZXMuX2hhc093blByb3BlcnR5KGxhbmVLZXkpKSB7XG4gICAgICAgIGlmIChpZk5vdENyZWF0ZUl0KSB7XG4gICAgICAgICAgdGhpcy5sYW5lcy5fc2V0KGxhbmVLZXksIFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbmV3QW5pbSAtIGFuIG9iamVjdCBvZiB0aGUgZm9ybSBvZiBhIGxhbmUgaXRlbSAod2l0aCBrZXlzIFwibWlsbGlzZWNvbmRcIiBhbmQgXCJpbmNpZGVudFwiXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1jaWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0clxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGV4Y2x1ZGVJZHNGcm9tQ2hlY2sgLSBvcHRpb25hbC4gSWYgZXhpc3RzIGl0IGV4Y2x1ZGVzIGFsbCB0aGUgaWRzIG9mIHRoaXMgYXJyYXkgZnJvbSBjaGVjay4gVGhpc1xuICAgICAqICBwYXJhbWV0ZXIgaGFzIGJlZW4gYWRkZWQgZm9yIHRoZSBlZGl0IGNoZWNrcyB3aGVyZSBhbiBhbmltYXRpb24gbWlnaHQgb3ZlcmxhcCBhbm90aGVyIGFuaW1hdGlvbiB0aGF0IHBhcnRpY2lwYXRlcyBvblxuICAgICAqICB0aGUgbW92ZSwgc29tZXRoaW5nIHRoYXQgc2hvdWxkIG5vdCBoYXBwZW4gYXMgdGhlIGVkaXRlZCBhbmltYXRpb25zIHByZS1leGlzdGVkIHdpdGhvdXQgY29uZmxpY3RzIGFuZCB0aGUgbW92ZSBvZiBhbGxcbiAgICAgKiAgb2YgdGhlbSB0b2dldGhlciBndWFyYW50ZWVzIHRoYXQgdGhlcmUgaXMgZ29pbmcgdG8gYmUgbm8gY29uZmxpY3QgYmV0d2VlbiB0aGVtIGV2ZW4gYWZ0ZXIgdGhlIGVkaXRcbiAgICAgKiBAcGFyYW0ge2ludH0gdGVzdER1cmF0aW9uIC0gb3B0aW9uYWwuIFRoaXMgcGFyYW1ldGVyIGlzIHVzZWQgd2hlbiB0aGUgY2hhbm5lbCBuZWVkcyB0byBhZGRjaGVjayBvdmVybGFwcyBhZnRlciBkdXJhdGlvblxuICAgICAqICBlZGl0cywgc28gdGhlIHRlc3REdXJhdGlvbiBpcyBwYXNzZWQgKHdlIGRvbid0IHdhbnQgdG8gcG9sdXRlIHRoZSBvcmlnaW5hbCBhbmltYXRpb24gb2JqZWN0IGFzIGl0IHJlZmVycyB0byB0aGUgcmVhbCBvbmUpXG4gICAgICogQHJldHVucyB7YXJyYXl9IC0gYSBsaXN0IG9mIGFsbCBvdmVybGFwcGluZyBhbmltYXRpb25zIG9mIHRoZSBsYW5lXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRPdmVybGFwcGluZ0FuaW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE92ZXJsYXBwaW5nQW5pbXMobmV3QW5pbSwgbWNpZCwgYXR0cikge1xuICAgICAgdmFyIGV4Y2x1ZGVJZHNGcm9tQ2hlY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdO1xuICAgICAgdmFyIHRlc3REdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogbnVsbDtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgdmFyIG92ZXJsYXBwaW5nQW5pbXMgPSBfZmlsdGVyKHRoaXMubGFuZXMuX2dldChoZWxwZXIuZ2V0TGFuZUtleShtY2lkLCBhdHRyKSksIGZ1bmN0aW9uIChleGlzdGluZ0FuaW0pIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uVG9Vc2VPbkNoZWNrcyA9IG5ld0FuaW0uaW5jaWRlbnQuZHVyYXRpb247XG5cbiAgICAgICAgaWYgKHRlc3REdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgZHVyYXRpb25Ub1VzZU9uQ2hlY2tzID0gdGVzdER1cmF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nQW5pbS5pZCAhPSBuZXdBbmltLmluY2lkZW50LmlkICYmIGV4Y2x1ZGVJZHNGcm9tQ2hlY2suaW5kZXhPZihleGlzdGluZ0FuaW0uaWQpIDwgMCAmJiAoIC8vIGV4aXN0aW5nIGFuaW0gc3RhcnRzIHdpdGhpbiB0aGUgbmV3IGFuaW0ncyBleHRlbmRcbiAgICAgICAgZXhpc3RpbmdBbmltLm1pbGxpc2Vjb25kID49IG5ld0FuaW0ubWlsbGlzZWNvbmQgJiYgZXhpc3RpbmdBbmltLm1pbGxpc2Vjb25kIDwgZHVyYXRpb25Ub1VzZU9uQ2hlY2tzICsgbmV3QW5pbS5taWxsaXNlY29uZCB8fCAvLyBvciBlbmRzIHdpdGhpbiB0aGUgbmV3IGFuaW0ncyBleHRlbmRcbiAgICAgICAgZXhpc3RpbmdBbmltLm1pbGxpc2Vjb25kICsgdGhhdC5pbmNpZGVudHNCeUlkLl9nZXQoZXhpc3RpbmdBbmltLmlkKS5kdXJhdGlvbiA+IG5ld0FuaW0ubWlsbGlzZWNvbmQgJiYgZXhpc3RpbmdBbmltLm1pbGxpc2Vjb25kICsgdGhhdC5pbmNpZGVudHNCeUlkLl9nZXQoZXhpc3RpbmdBbmltLmlkKS5kdXJhdGlvbiA8PSBkdXJhdGlvblRvVXNlT25DaGVja3MgKyBuZXdBbmltLm1pbGxpc2Vjb25kIC8vIG9yIGl0IHN0YXJ0cyBiZWZvcmUgYW5kIGVuZHMgYWZ0ZXIgdGhlIG5ldyBhbmltJ3MgZXh0ZW5kXG4gICAgICAgIHx8IGV4aXN0aW5nQW5pbS5taWxsaXNlY29uZCA8IG5ld0FuaW0ubWlsbGlzZWNvbmQgJiYgZXhpc3RpbmdBbmltLm1pbGxpc2Vjb25kICsgdGhhdC5pbmNpZGVudHNCeUlkLl9nZXQoZXhpc3RpbmdBbmltLmlkKS5kdXJhdGlvbiA+IGR1cmF0aW9uVG9Vc2VPbkNoZWNrcyArIG5ld0FuaW0ubWlsbGlzZWNvbmQpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvdmVybGFwcGluZ0FuaW1zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBpdCBqdXN0cyBhZGRzIHRoZSBsYW5lIGl0ZW0gdG8gdGhlIGxhbmUgYW5kIGFkanVzdHMgdGhlIGluaXRpYWwgdmFsdWVzIG9mIHRoZSBBbmltcyBpbiBzZXF1ZW5jZVxuICAgICAqIE5vIGNoZWNrcyBhcmUgcGVyZm9ybWVkLCBqdXN0IGV4ZWN1dGlvbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWNpZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyXG4gICAgICogQHBhcmFtIHtpbnR9IG1pbGxpc2Vjb25kXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGluY2lkZW50XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhZGRFbGVtZW50VG9MYW5lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEVsZW1lbnRUb0xhbmUobWNpZCwgYXR0ciwgbWlsbGlzZWNvbmQsIGluY2lkZW50KSB7XG4gICAgICB2YXIgbGFuZUtleSA9IGhlbHBlci5nZXRMYW5lS2V5KG1jaWQsIGF0dHIpO1xuXG4gICAgICB0aGlzLmluY2lkZW50c0J5SWQuX3NldChpbmNpZGVudC5pZCwgaW5jaWRlbnQpO1xuXG4gICAgICB2YXIgbGFuZUVsZW1lbnQgPSB7XG4gICAgICAgIG1pbGxpc2Vjb25kOiBtaWxsaXNlY29uZCxcbiAgICAgICAgaWQ6IGluY2lkZW50LmlkXG4gICAgICB9O1xuICAgICAgdGhpcy5sYW5lRXhpc3RzKG1jaWQsIGF0dHIsIHRydWUpO1xuXG4gICAgICB2YXIgdGhlTGFuZSA9IHRoaXMubGFuZXMuX2dldChsYW5lS2V5KTtcblxuICAgICAgdGhlTGFuZS5wdXNoKGxhbmVFbGVtZW50KTtcbiAgICAgIHRoZUxhbmUgPSBfc29ydEJ5KHRoZUxhbmUsIFsnbWlsbGlzZWNvbmQnXSk7XG5cbiAgICAgIHRoaXMubGFuZXMuX3NldChsYW5lS2V5LCB0aGVMYW5lKTsgLy8gaW5kZXhpbmcgc3R1ZmZcblxuXG4gICAgICBpZiAoIXRoaXMuYmVsb25naW5nTGFuZUtleXNCeUFuaW1hdGlvbklkLl9oYXNPd25Qcm9wZXJ0eShpbmNpZGVudC5pZCkpIHtcbiAgICAgICAgdGhpcy5iZWxvbmdpbmdMYW5lS2V5c0J5QW5pbWF0aW9uSWQuX3NldChpbmNpZGVudC5pZCwgW10pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJlbG9uZ2luZ0xhbmVLZXlzQnlBbmltYXRpb25JZC5fZ2V0KGluY2lkZW50LmlkKS5wdXNoKGxhbmVLZXkpOyAvLyBpbmRleGluZ1xuXG5cbiAgICAgIHZhciBuZXdBbmltc0luZGV4ID0gX2ZpbmRJbmRleCh0aGVMYW5lLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5pZCA9PT0gaW5jaWRlbnQuaWQ7XG4gICAgICB9KTsgLy8gaGVscGVyLmxvZyhuZXdBbmltc0luZGV4KTtcbiAgICAgIC8vIHN0ZXAgMTogc2V0IHRoZSBpbnRpYWwgdmFsdWVzIG9mIHRoZSBuZXcgQW5pbWF0aW9uXG5cblxuICAgICAgaWYgKG5ld0FuaW1zSW5kZXggPT09IDApIHtcbiAgICAgICAgLy8gaWYgdGhlIG5ld2x5IGVudGVyZWQgYW5pbWF0aW9uIGlzIHRoZSBmaXJzdCBvZiB0aGUgbGFuZVxuICAgICAgICBpZiAodGhlTGFuZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgLy8gYW5kIGl0IGhhcyBvdGhlciBhbmltYXRpb25zIHRvb1xuICAgICAgICAgIGluY2lkZW50LnNldEluaXRpYWxWYWx1ZSh0aGlzLmluY2lkZW50c0J5SWQuX2dldCh0aGVMYW5lWzFdLmlkKS5wdXJlSW5pdGlhbFZhbHVlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5jaWRlbnQuc2V0SW5pdGlhbFZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluY2lkZW50LnNldEluaXRpYWxWYWx1ZSh0aGlzLmluY2lkZW50c0J5SWQuX2dldCh0aGVMYW5lW25ld0FuaW1zSW5kZXggLSAxXS5pZCkuYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICB9XG4gICAgICAvKiBpZiB0aGUgYXR0cmlidXRlIG9mIHRoZSBsYW5lIGlzIGEgY29tcG8gYXR0cmlidXRlICovXG5cblxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmNvbWJvQXR0cmlidXRlcywgYXR0cikpIHtcbiAgICAgICAgdmFyIGluY2lkZW50SW5pdGlhbFZhbHVlcyA9IGluY2lkZW50LmluaXRpYWxWYWx1ZTtcbiAgICAgICAgc2V0SW5pdGlhbFZhbHVlRm9yQ29tYm8odGhlTGFuZSwgdGhpcy5pbmNpZGVudHNCeUlkLCBpbmNpZGVudEluaXRpYWxWYWx1ZXMsIG5ld0FuaW1zSW5kZXgpO1xuICAgICAgfSAvLyBzdGVwIDI6IHNldCB0aGUgaW5pdGFsIHZhbHVlcyBvZiB0aGUgZm9sbG93aW5nIEFuaW1hdGlvbiAoaWYgYW55KS5cblxuXG4gICAgICBpZiAobmV3QW5pbXNJbmRleCArIDEgPCB0aGVMYW5lLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmluY2lkZW50c0J5SWQuX2dldCh0aGVMYW5lW25ld0FuaW1zSW5kZXggKyAxXS5pZCkuc2V0SW5pdGlhbFZhbHVlKGluY2lkZW50LmFuaW1hdGVkQXR0cmlidXRlVmFsdWUpO1xuXG4gICAgICAgIGlmICh0aGlzLmluY2lkZW50c0J5SWQuX2dldCh0aGVMYW5lW25ld0FuaW1zSW5kZXggKyAxXS5pZCkuZ290Q29udGV4dCkge1xuICAgICAgICAgIHRoaXMuaW5jaWRlbnRzQnlJZC5fZ2V0KHRoZUxhbmVbbmV3QW5pbXNJbmRleCArIDFdLmlkKS5sYXN0V2lzaCgpO1xuXG4gICAgICAgICAgdGhpcy5pbmNpZGVudHNCeUlkLl9nZXQodGhlTGFuZVtuZXdBbmltc0luZGV4ICsgMV0uaWQpLm9uR2V0Q29udGV4dCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGl0IGp1c3RzIHVwZGF0ZXMgdGhlIGxhbmVcbiAgICAgKiBObyBjaGVja3MgYXJlIHBlcmZvcm1lZCwganVzdCBleGVjdXRpb25cbiAgICAgKiBAcGFyYW0ge2FycmF5fSBhZmZlY3RlZEFuaW1hdGlvbnNJZHNcbiAgICAgKiBAcGFyYW0ge2ludH0gbWlsbGlzZWNvbmREZWx0YVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlTGFuZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVMYW5lKGFmZmVjdGVkQW5pbWF0aW9uc0lkcywgbWlsbGlzZWNvbmRzRGVsdGEpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIGZpcnN0IHdlIGdyb3VwIHRoZSBhZmZlY3RlZCBhbmltYXRpb25zIGJ5IGxhbmVzXG4gICAgICB2YXIgYWZmZWN0ZWRMYW5lcyA9IHt9O1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFmZmVjdGVkQW5pbWF0aW9uc0lkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYmVsb25naW5nTGFuZXMgPSB0aGlzLmJlbG9uZ2luZ0xhbmVLZXlzQnlBbmltYXRpb25JZC5fZ2V0KGFmZmVjdGVkQW5pbWF0aW9uc0lkc1tpXSk7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBiZWxvbmdpbmdMYW5lcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBsYW5lS2V5ID0gYmVsb25naW5nTGFuZXNbal07XG5cbiAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhZmZlY3RlZExhbmVzLCBsYW5lS2V5KSkge1xuICAgICAgICAgICAgYWZmZWN0ZWRMYW5lc1tsYW5lS2V5XSA9IHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uczogW10sXG4gICAgICAgICAgICAgIGxhbmU6IHRoYXQubGFuZXMuX2dldChsYW5lS2V5KSxcbiAgICAgICAgICAgICAgbGFuZURhdGE6IGhlbHBlci5nZXRNQ0lEYW5kQXR0ck91dE9mTGFuZUtleShiZWxvbmdpbmdMYW5lc1tqXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWZmZWN0ZWRMYW5lc1tsYW5lS2V5XS5hbmltYXRpb25zLnB1c2goYWZmZWN0ZWRBbmltYXRpb25zSWRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBmb3IgZWFjaCBvZiB0aGUgYWZmZWN0ZWQgbGFuZXNcblxuXG4gICAgICBmb3IgKHZhciBfbGFuZUtleSBpbiBhZmZlY3RlZExhbmVzKSB7XG4gICAgICAgIHZhciBhZmZlY3RlZExhbmUgPSBhZmZlY3RlZExhbmVzW19sYW5lS2V5XTtcbiAgICAgICAgdmFyIGxhbmUgPSBhZmZlY3RlZExhbmUubGFuZTtcbiAgICAgICAgdmFyIGxhbmVEYXRhID0gYWZmZWN0ZWRMYW5lLmxhbmVEYXRhO1xuXG4gICAgICAgIHZhciBsYW5lQmVmb3JlRWRpdCA9IF9zb3J0QnkodGhpcy5nZXRMYW5lc0NvcHkobGFuZSksIFsnbWlsbGlzZWNvbmQnXSk7XG5cbiAgICAgICAgdmFyIGlzQ29tYm9BdHRyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29tYm9BdHRyaWJ1dGVzLCBsYW5lRGF0YS5hdHRyaWJ1dGUpOyAvLyBlZGl0IGxhbmUgaXRlbXMgbWlsbGlzZWNvbmRcblxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGxhbmUubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBpZiAoYWZmZWN0ZWRMYW5lLmFuaW1hdGlvbnMuaW5kZXhPZihsYW5lW2tdLmlkKSA+PSAwKSB7XG4gICAgICAgICAgICBsYW5lW2tdLm1pbGxpc2Vjb25kICs9IG1pbGxpc2Vjb25kc0RlbHRhO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBlbmQgZm9yIHNlYXJjaGluZyBmb3IgdGhlIGFuaW1hdGlvbnMgd2l0aGluIHRoZSBsYW5lXG5cblxuICAgICAgICB2YXIgc29ydGVkTGFuZSA9IF9zb3J0QnkobGFuZSwgWydtaWxsaXNlY29uZCddKTtcblxuICAgICAgICB0aGlzLmxhbmVzLl9zZXQoX2xhbmVLZXksIHNvcnRlZExhbmUpO1xuXG4gICAgICAgIGxhbmUgPSBzb3J0ZWRMYW5lO1xuXG4gICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pMikge1xuICAgICAgICAgIHZhciBhbmltYXRpb25Ub0NoZWNrID0gYWZmZWN0ZWRMYW5lLmFuaW1hdGlvbnNbX2kyXTtcblxuICAgICAgICAgIHZhciBhbmltYXRpb25JbmRleEJlZm9yZUVkaXQgPSBfZmluZEluZGV4KGxhbmVCZWZvcmVFZGl0LCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaWQgPT09IGFuaW1hdGlvblRvQ2hlY2s7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgYW5pbWF0aW9uSW5kZXhBZnRlckVkaXQgPSBfZmluZEluZGV4KGxhbmUsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5pZCA9PT0gYW5pbWF0aW9uVG9DaGVjaztcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBhbmltYXRpb24gPSBfdGhpcy5pbmNpZGVudHNCeUlkLl9nZXQobGFuZVthbmltYXRpb25JbmRleEFmdGVyRWRpdF0uaWQpO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkluZGV4QmVmb3JlRWRpdCAhPT0gYW5pbWF0aW9uSW5kZXhBZnRlckVkaXQgfHwgYW5pbWF0aW9uSW5kZXhBZnRlckVkaXQgPiAxKSB7XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uSW5kZXhCZWZvcmVFZGl0ICsgMSA8IGxhbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBhbmltYXRpb24gd2FzIG5vdCB0aGUgbGFzdCBhbmltYXRpb24gb24gdGhlIGxhbmUgYmVmb3JlIHRoZSBlZGl0XG4gICAgICAgICAgICAgIC8vIHdlIHNob3VsZCB0YWtlIGNhcmUgb2YgdGhlIGluaXRpYWwgdmFsdWVzIG9mIHRoZSBhbmltYXRpb24ncyBwcmV2aW91cyBzdWNjZXNzb3JcbiAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkluZGV4QmVmb3JlRWRpdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBlZGl0ZWQgYW5pbWF0aW9uIHdhcyB0aGUgZmlyc3Qgb25lIGJlZm9yZSB0aGUgZWRpdFxuICAgICAgICAgICAgICAgIC8vIHBhc3MgaXRzIGluaXRpYWwgdmFsdWVzIHRvIGl0cyBwcmV2aW91cyBzdWNjZXNzb3IgYXMgaXRzIG5ldyBpbml0aWFsIHZhbHVlc1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbWJvQXR0cikge1xuICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFZhbHVlRm9yQ29tYm8obGFuZSwgX3RoaXMuaW5jaWRlbnRzQnlJZCwgYW5pbWF0aW9uLnB1cmVJbml0aWFsVmFsdWVzLCAwLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuaW5jaWRlbnRzQnlJZC5fZ2V0KGxhbmVCZWZvcmVFZGl0WzFdLmlkKS5zZXRJbml0aWFsVmFsdWUoYW5pbWF0aW9uLnB1cmVJbml0aWFsVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgICAgX3RoaXMuaW5jaWRlbnRzQnlJZC5fZ2V0KGxhbmVCZWZvcmVFZGl0WzFdLmlkKS5vbkdldENvbnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZWxzZSBpZiB0aGUgZWRpdGVkIGFuaW1hdGlvbiB3YXMgbm90IHRoZSBmaXJzdCBvbmUgYmVmb3JlIHRoZSBlZGl0XG4gICAgICAgICAgICAgICAgLy8gbWVhbmluZyBpdHMgcHJldmlvdXMgc3VjY2Vzc29yIGlzIG5vdCB0aGUgZmlyc3Qgb25lIG9uIHRoZSBsYW5lIGFmdGVyIHRoZSBlZGl0XG4gICAgICAgICAgICAgICAgLy8ganVzdCBncmFiIHRoZSB0YXJnZXQgdmFsdWUgb2YgdGhlIG5ldyBwcmV2aW91cyBhbmltYXRpb24gb2YgdGhlIGFuaW1hdGlvbidzIHByZXZpb3VzIHN1Y2Nlc3NvciBhbmQgc2V0IGl0IGFzIGluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21ib0F0dHIpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpbmRleFRvQWZmZWN0ID0gYW5pbWF0aW9uSW5kZXhBZnRlckVkaXQgPiBhbmltYXRpb25JbmRleEJlZm9yZUVkaXQgPyBhbmltYXRpb25JbmRleEJlZm9yZUVkaXQgOiBhbmltYXRpb25JbmRleEFmdGVyRWRpdDtcbiAgICAgICAgICAgICAgICAgIHNldEluaXRpYWxWYWx1ZUZvckNvbWJvKGxhbmUsIF90aGlzLmluY2lkZW50c0J5SWQsIF90aGlzLmluY2lkZW50c0J5SWQuX2dldChsYW5lQmVmb3JlRWRpdFthbmltYXRpb25JbmRleEJlZm9yZUVkaXQgLSAxXS5pZCkuYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSwgaW5kZXhUb0FmZmVjdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLmluY2lkZW50c0J5SWQuX2dldChsYW5lQmVmb3JlRWRpdFthbmltYXRpb25JbmRleEJlZm9yZUVkaXQgKyAxXS5pZCkuc2V0SW5pdGlhbFZhbHVlKF90aGlzLmluY2lkZW50c0J5SWQuX2dldChsYW5lQmVmb3JlRWRpdFthbmltYXRpb25JbmRleEJlZm9yZUVkaXQgLSAxXS5pZCkuYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgIF90aGlzLmluY2lkZW50c0J5SWQuX2dldChsYW5lQmVmb3JlRWRpdFthbmltYXRpb25JbmRleEJlZm9yZUVkaXQgKyAxXS5pZCkub25HZXRDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIGZvciB0aGUgZWRpdGVkIGFuaW1hdGlvbiBpdHNlbGYgbm93OlxuXG5cbiAgICAgICAgICAgIGlmIChhbmltYXRpb25JbmRleEFmdGVyRWRpdCA9PT0gMCkge1xuICAgICAgICAgICAgICAvLyBpcyBpdCB0aGUgZmlyc3Qgb25lIChhZnRlciBlZGl0KT9cbiAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBpbml0aWFsIHZhbHVlcyBvZiB0aGUgcHJldmlvdXNseSAwIGluZGV4ZWQgYW5pbWF0aW9uIG9mIHRoZSBsYW5lXG4gICAgICAgICAgICAgIGlmIChpc0NvbWJvQXR0cikge1xuICAgICAgICAgICAgICAgIHNldEluaXRpYWxWYWx1ZUZvckNvbWJvKGxhbmUsIF90aGlzLmluY2lkZW50c0J5SWQsIF90aGlzLmluY2lkZW50c0J5SWQuX2dldChsYW5lQmVmb3JlRWRpdFswXS5pZCkucHVyZUluaXRpYWxWYWx1ZXMsIGFuaW1hdGlvbkluZGV4QWZ0ZXJFZGl0LCB0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uc2V0SW5pdGlhbFZhbHVlKF90aGlzLmluY2lkZW50c0J5SWQuX2dldChsYW5lQmVmb3JlRWRpdFswXS5pZCkucHVyZUluaXRpYWxWYWx1ZXMpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5vbkdldENvbnRleHQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gZWxzZSBpZiBpdCBpcyBub3QgdGhlIGZpcnN0IG9uZSBhZnRlciBlZGl0ZFxuICAgICAgICAgICAgICAvLyBqdXN0IGdyYWIgdGhlIHRhcmdldCB2YWx1ZSBvZiB0aGUgcHJldmlvdXMgYW5pbWF0aW9uIG9uIHRoZSB1cGRhdGVkIGxhbmUgYW5kIHNldCBpdCBhcyBpdHMgaW5pdGlhbCB2YWx1ZVxuICAgICAgICAgICAgICBpZiAoaXNDb21ib0F0dHIpIHtcbiAgICAgICAgICAgICAgICBzZXRJbml0aWFsVmFsdWVGb3JDb21ibyhsYW5lLCBfdGhpcy5pbmNpZGVudHNCeUlkLCBfdGhpcy5pbmNpZGVudHNCeUlkLl9nZXQobGFuZVthbmltYXRpb25JbmRleEFmdGVyRWRpdCAtIDFdLmlkKS5hbmltYXRlZEF0dHJpYnV0ZVZhbHVlLCBhbmltYXRpb25JbmRleEFmdGVyRWRpdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnNldEluaXRpYWxWYWx1ZShfdGhpcy5pbmNpZGVudHNCeUlkLl9nZXQobGFuZVthbmltYXRpb25JbmRleEFmdGVyRWRpdCAtIDFdLmlkKS5hbmltYXRlZEF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ub25HZXRDb250ZXh0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gLy8gZm9yIGl0cyBuZXcgbmV4dCBhbmltYXRpb24gKGlmIGl0IGhhcyBvbmUpXG5cblxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkluZGV4QWZ0ZXJFZGl0ICsgMSA8IGxhbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIHNldCBpdHMgaW5pdGlhbCB2YWx1ZSB0byBlcXVhbCB0aGUgdGFyZ2V0IHZhbHVlIG9mIHRoZSBlZGl0ZWQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgIGlmIChpc0NvbWJvQXR0cikge1xuICAgICAgICAgICAgICAgIHNldEluaXRpYWxWYWx1ZUZvckNvbWJvKGxhbmUsIF90aGlzLmluY2lkZW50c0J5SWQsIGFuaW1hdGlvbi5hbmltYXRlZEF0dHJpYnV0ZVZhbHVlLCBhbmltYXRpb25JbmRleEFmdGVyRWRpdCArIDEsIHRydWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmluY2lkZW50c0J5SWQuX2dldChsYW5lW2FuaW1hdGlvbkluZGV4QWZ0ZXJFZGl0ICsgMV0uaWQpLnNldEluaXRpYWxWYWx1ZShhbmltYXRpb24uYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5pbmNpZGVudHNCeUlkLl9nZXQobGFuZVthbmltYXRpb25JbmRleEFmdGVyRWRpdCArIDFdLmlkKS5vbkdldENvbnRleHQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBhZmZlY3RlZExhbmUuYW5pbWF0aW9ucy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgX2xvb3AoX2kyKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBlbmQgZm9yIGVhY2ggb2YgdGhlIGJlbG9uZ2luZyBsYW5lcyBvZiB0aGUgYW5pbWF0aW9uXG5cbiAgICB9XG4gICAgLyoqXG4gICAgICogcmVtb3ZlcyB0aGUgbGlzdCBvZiBhbmltYXRpb25zIGFzIHByb3ZpZGVkXG4gICAgICogQHBhcmFtIHthcnJheX0gcmVtb3ZlZEFuaW1hdGlvbnMgLSBhbiBhcnJheSB3aXRoIHRoZSByZW1vdmVkIGFuaW1hdGlvbnMnIGlkc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVsZXRlQW5pbWF0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVBbmltYXRpb25zKHJlbW92ZWRBbmltYXRpb25zKSB7XG4gICAgICB2YXIgYWZmZWN0ZWRMYW5lcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbW92ZWRBbmltYXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpZCA9IHJlbW92ZWRBbmltYXRpb25zW2ldOyAvLyBmb3IgZWFjaCBsYW5lIHRoZSBhZmZlY3RlZCBBbmltYXRpb24gYXBwZWFycyBpblxuXG4gICAgICAgIHZhciBiZWxvbmdpbmdMYW5lcyA9IHRoaXMuYmVsb25naW5nTGFuZUtleXNCeUFuaW1hdGlvbklkLl9nZXQoaWQpO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYmVsb25naW5nTGFuZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICB2YXIgbGFuZSA9IHRoaXMubGFuZXMuX2dldChiZWxvbmdpbmdMYW5lc1tqXSk7XG5cbiAgICAgICAgICB2YXIgYW5pbWF0aW9uSW5kZXhCZWZvcmVFZGl0ID0gLTE7XG5cbiAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGxhbmUubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIGlmIChsYW5lW2tdLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICBhbmltYXRpb25JbmRleEJlZm9yZUVkaXQgPSBrO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIGhlbHBlci5sb2coYW5pbWF0aW9uSW5kZXhCZWZvcmVFZGl0KTtcblxuXG4gICAgICAgICAgdmFyIGFuaW1hdGlvblRvRGVsZXRlID0gT2JqZWN0LmFzc2lnbih7fSwgbGFuZVthbmltYXRpb25JbmRleEJlZm9yZUVkaXRdKTtcblxuICAgICAgICAgIHZhciBhbmltYXRpb25PYmplY3RUb0RlbGV0ZSA9IHRoaXMuaW5jaWRlbnRzQnlJZC5fZ2V0KGFuaW1hdGlvblRvRGVsZXRlLmlkKTtcblxuICAgICAgICAgIHZhciBsYW5lRGF0YSA9IGhlbHBlci5nZXRNQ0lEYW5kQXR0ck91dE9mTGFuZUtleShiZWxvbmdpbmdMYW5lc1tqXSk7IC8vIGdldHMgdGhlIGxhbmUgd2l0aG91dCB0aGUgcmVtb3ZlZCBhbmltYXRpb25cblxuICAgICAgICAgIHZhciBuZXdMYW5lID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbGFuZS5sZW5ndGg7IF9rKyspIHtcbiAgICAgICAgICAgIGlmIChsYW5lW19rXS5pZCAhPSBpZCkge1xuICAgICAgICAgICAgICBuZXdMYW5lLnB1c2gobGFuZVtfa10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubGFuZXMuX3NldChiZWxvbmdpbmdMYW5lc1tqXSwgbmV3TGFuZSk7XG5cbiAgICAgICAgICBsYW5lID0gdGhpcy5sYW5lcy5fZ2V0KGJlbG9uZ2luZ0xhbmVzW2pdKTtcblxuICAgICAgICAgIGlmIChsYW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gaW4gY2FzZSB0aGVyZSBhcmUgbm8gbW9yZSBhbmltYXRpb25zIG9uIHRoZSBsYW5lIGFueSBtb3JlIHdlIHJlc2V0XG4gICAgICAgICAgICAvLyB0aGUgbGFuZSBieSBydW5uaW5nIHRoZSBwcm9ncmVzcygwLDApLCBzbyB0aGF0IHRoZSBhZmZlY3RlZCBlbGVtZW50c1xuICAgICAgICAgICAgLy8gd2lsbCBnZXQgYmFjayB0byB0aGVpciBvcmlnaW5hbCBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgICAgICAgIGFuaW1hdGlvbk9iamVjdFRvRGVsZXRlLm9uUHJvZ3Jlc3MoMCwgMCk7XG5cbiAgICAgICAgICAgIHRoaXMubGFuZXMuX2RlbGV0ZShiZWxvbmdpbmdMYW5lc1tqXSk7XG5cbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYWZmZWN0ZWRMYW5lcywgYmVsb25naW5nTGFuZXNbal0pKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBhZmZlY3RlZExhbmVzW2JlbG9uZ2luZ0xhbmVzW2pdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWZmZWN0ZWRMYW5lc1tiZWxvbmdpbmdMYW5lc1tqXV0gPSBoZWxwZXIuZ2V0TUNJRGFuZEF0dHJPdXRPZkxhbmVLZXkoYmVsb25naW5nTGFuZXNbal0pO1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uSW5kZXhCZWZvcmVFZGl0IDwgbGFuZS5sZW5ndGggJiYgdGhpcy5pbmNpZGVudHNCeUlkLl9nZXQoYW5pbWF0aW9uVG9EZWxldGUuaWQpLnB1cmVJbml0aWFsVmFsdWVzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29tYm9BdHRyaWJ1dGVzLCBsYW5lRGF0YS5hdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgICAgICAgc2V0SW5pdGlhbFZhbHVlRm9yQ29tYm8obGFuZSwgdGhpcy5pbmNpZGVudHNCeUlkLCB0aGlzLmluY2lkZW50c0J5SWQuX2dldChhbmltYXRpb25Ub0RlbGV0ZS5pZCkucHVyZUluaXRpYWxWYWx1ZXMsIGFuaW1hdGlvbkluZGV4QmVmb3JlRWRpdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmNpZGVudHNCeUlkLl9nZXQobGFuZVthbmltYXRpb25JbmRleEJlZm9yZUVkaXRdLmlkKS5zZXRJbml0aWFsVmFsdWUodGhpcy5pbmNpZGVudHNCeUlkLl9nZXQoYW5pbWF0aW9uVG9EZWxldGUuaWQpLnB1cmVJbml0aWFsVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaW5jaWRlbnRzQnlJZC5fZ2V0KGxhbmVbYW5pbWF0aW9uSW5kZXhCZWZvcmVFZGl0XS5pZCkub25HZXRDb250ZXh0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJlbG9uZ2luZ0xhbmVLZXlzQnlBbmltYXRpb25JZC5fZGVsZXRlKHJlbW92ZWRBbmltYXRpb25zW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFmZmVjdGVkTGFuZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciByZWNhbGN1bGF0aW5nIHRoZSBzY3JhdGNoIHZhbHVlcyBvZiB0aGUgZmlyc3RcbiAgICAgKiBJbmNpZGVudCBvZiBlYWNoIG9mIHRoZSBsYW5lcyBvZiB0aGUgTGFuZXNIYW5kbGVyIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWRcbiAgICAgKiBjb250ZXh0IGlkXG4gICAgICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVjYWxjU2NyYXRjaFZhbHVlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWNhbGNTY3JhdGNoVmFsdWVzKGNvbnRleHRJZCkge1xuICAgICAgdmFyIGtleXMgPSB0aGlzLmxhbmVzLl9rZXlzKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICB2YXIgdGhlTGFuZSA9IHRoaXMubGFuZXMuX2dldChrZXkpO1xuXG4gICAgICAgIGlmICh0aGVMYW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgZmlyc3RJbmNpZGVudCA9IHRoaXMuaW5jaWRlbnRzQnlJZC5fZ2V0KHRoZUxhbmVbMF0uaWQpO1xuXG4gICAgICAgICAgdmFyIG5ld1NjcmF0Y2hWYWx1ZSA9IGZpcnN0SW5jaWRlbnQuZ2V0U2NyYXRjaFZhbHVlKGNvbnRleHRJZCk7XG4gICAgICAgICAgdmFyIGxhbmVEYXRhID0gaGVscGVyLmdldExhbmVEYXRhRnJvbUxhbmVLZXkoa2V5KTtcblxuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb21ib0F0dHJpYnV0ZXMsIGxhbmVEYXRhLmF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgIC8vIGlmIGl0IGlzIGEgY29tYm9cbiAgICAgICAgICAgIHNldEluaXRpYWxWYWx1ZUZvckNvbWJvKHRoZUxhbmUsIHRoaXMuaW5jaWRlbnRzQnlJZCwgbmV3U2NyYXRjaFZhbHVlLCAwLCB0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZWxzZSBpZiBpdCdzIG5vdCBhIGNvbWJvIGF0dHJpYnV0ZVxuICAgICAgICAgICAgZmlyc3RJbmNpZGVudC5zZXRJbml0aWFsVmFsdWUobmV3U2NyYXRjaFZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaXJzdEluY2lkZW50Lmxhc3RXaXNoKCk7XG4gICAgICAgICAgZmlyc3RJbmNpZGVudC5vbkdldENvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMYW5lc0hhbmRsZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGFuZXNIYW5kbGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Collection =\n/*#__PURE__*/\nfunction () {\n  function Collection() {\n    var initialArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, Collection);\n\n    this.realArray = [];\n\n    if (initialArray != null) {\n      this.realArray = initialArray;\n    }\n  }\n\n  _createClass(Collection, [{\n    key: \"_hasOwnProperty\",\n    value: function _hasOwnProperty(key) {\n      return Object.prototype.hasOwnProperty.call(this.realArray, key);\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(key) {\n      return this.realArray[key];\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(key, value) {\n      this.realArray[key] = value;\n    }\n  }, {\n    key: \"_keys\",\n    value: function _keys() {\n      return Object.keys(this.realArray);\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(key) {\n      return delete this.realArray[key];\n    }\n    /**\n     * exports a Collection object\n     */\n\n  }, {\n    key: \"_export\",\n    value: function _export() {\n      return this.realArray;\n    }\n  }]);\n\n  return Collection;\n}();\n\nmodule.exports = Collection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL0NvbGxlY3Rpb24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL0NvbGxlY3Rpb24uanM/OGQ3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgQ29sbGVjdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbGxlY3Rpb24oKSB7XG4gICAgdmFyIGluaXRpYWxBcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsZWN0aW9uKTtcblxuICAgIHRoaXMucmVhbEFycmF5ID0gW107XG5cbiAgICBpZiAoaW5pdGlhbEFycmF5ICE9IG51bGwpIHtcbiAgICAgIHRoaXMucmVhbEFycmF5ID0gaW5pdGlhbEFycmF5O1xuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2xsZWN0aW9uLCBbe1xuICAgIGtleTogXCJfaGFzT3duUHJvcGVydHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhc093blByb3BlcnR5KGtleSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnJlYWxBcnJheSwga2V5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVhbEFycmF5W2tleV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldChrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLnJlYWxBcnJheVtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9rZXlzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9rZXlzKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVhbEFycmF5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlbGV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGtleSkge1xuICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzLnJlYWxBcnJheVtrZXldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBleHBvcnRzIGEgQ29sbGVjdGlvbiBvYmplY3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9leHBvcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V4cG9ydCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlYWxBcnJheTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29sbGVjdGlvbjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\nlane:\n     * [\n     *      {\n     *          id: the id of the Incident\n     *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n     *      }\n     *  ]\n*/\nfunction updateFinalValues(affectedIncident, initialValues, originalFinalValues, finalValues) {\n  // console.log(initialValues, originalFinalValues);\n  var change = false;\n\n  for (var key in initialValues) {\n    if (!Object.prototype.hasOwnProperty.call(originalFinalValues, key)) {\n      change = true;\n      finalValues[key] = initialValues[key];\n    }\n  }\n\n  affectedIncident.animatedAttributeValue = finalValues;\n  return change;\n}\n/**\n * This function takes as input the index of the affected incident on the lane,\n * the lane and it re-calculates the\n * initial and final values of all the following incidents in the lane.\n * The function is used only in cases of combo attributes\n *\n * @param {boolean} store - if set to true the first Incident to be edited stores the\n *      initial values as its pureInitialValues\n **/\n\n\nfunction setInitialValue(lane, incidentsById, newInitialValues, affectedIndex) {\n  var store = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var affectedItem = lane[affectedIndex];\n\n  var affectedIncident = incidentsById._get(affectedItem.id);\n\n  affectedIncident.setInitialValue(newInitialValues, store);\n  var change = updateFinalValues(affectedIncident, affectedIncident.initialValue, affectedIncident.originalAnimatedAttributeValue, JSON.parse(JSON.stringify(affectedIncident.animatedAttributeValue))); /// if the final values have changed according to the new initial values and there is\n  // a following incident on the lane\n\n  if (change) {\n    affectedIncident.lastWish();\n    affectedIncident.onGetContext();\n  }\n\n  if (change && affectedIndex < lane.length - 1) {\n    setInitialValue(lane, incidentsById, affectedIncident.animatedAttributeValue, affectedIndex + 1, false);\n  }\n}\n\nmodule.exports = setInitialValue;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL0NvbWJvQXR0cnNDYXNjYWRpbmcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL0NvbWJvQXR0cnNDYXNjYWRpbmcuanM/MzQ0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbmxhbmU6XG4gICAgICogW1xuICAgICAqICAgICAge1xuICAgICAqICAgICAgICAgIGlkOiB0aGUgaWQgb2YgdGhlIEluY2lkZW50XG4gICAgICogICAgICAgICAgbWlsbGlzZWNvbmQ6IHRoZSBtaWxsaXNlY29uZCBvZiB0aGUgY2hhbm5lbCB0aGlzIEFuaW1hdGlvbiAodGhhdCBhZmZlY3RzIHRoZSBzZWxlY3Rvci9hdHRyaWJ1dGUgcGFpcikgcnVuc1xuICAgICAqICAgICAgfVxuICAgICAqICBdXG4qL1xuZnVuY3Rpb24gdXBkYXRlRmluYWxWYWx1ZXMoYWZmZWN0ZWRJbmNpZGVudCwgaW5pdGlhbFZhbHVlcywgb3JpZ2luYWxGaW5hbFZhbHVlcywgZmluYWxWYWx1ZXMpIHtcbiAgLy8gY29uc29sZS5sb2coaW5pdGlhbFZhbHVlcywgb3JpZ2luYWxGaW5hbFZhbHVlcyk7XG4gIHZhciBjaGFuZ2UgPSBmYWxzZTtcblxuICBmb3IgKHZhciBrZXkgaW4gaW5pdGlhbFZhbHVlcykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9yaWdpbmFsRmluYWxWYWx1ZXMsIGtleSkpIHtcbiAgICAgIGNoYW5nZSA9IHRydWU7XG4gICAgICBmaW5hbFZhbHVlc1trZXldID0gaW5pdGlhbFZhbHVlc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIGFmZmVjdGVkSW5jaWRlbnQuYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSA9IGZpbmFsVmFsdWVzO1xuICByZXR1cm4gY2hhbmdlO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGFzIGlucHV0IHRoZSBpbmRleCBvZiB0aGUgYWZmZWN0ZWQgaW5jaWRlbnQgb24gdGhlIGxhbmUsXG4gKiB0aGUgbGFuZSBhbmQgaXQgcmUtY2FsY3VsYXRlcyB0aGVcbiAqIGluaXRpYWwgYW5kIGZpbmFsIHZhbHVlcyBvZiBhbGwgdGhlIGZvbGxvd2luZyBpbmNpZGVudHMgaW4gdGhlIGxhbmUuXG4gKiBUaGUgZnVuY3Rpb24gaXMgdXNlZCBvbmx5IGluIGNhc2VzIG9mIGNvbWJvIGF0dHJpYnV0ZXNcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0b3JlIC0gaWYgc2V0IHRvIHRydWUgdGhlIGZpcnN0IEluY2lkZW50IHRvIGJlIGVkaXRlZCBzdG9yZXMgdGhlXG4gKiAgICAgIGluaXRpYWwgdmFsdWVzIGFzIGl0cyBwdXJlSW5pdGlhbFZhbHVlc1xuICoqL1xuXG5cbmZ1bmN0aW9uIHNldEluaXRpYWxWYWx1ZShsYW5lLCBpbmNpZGVudHNCeUlkLCBuZXdJbml0aWFsVmFsdWVzLCBhZmZlY3RlZEluZGV4KSB7XG4gIHZhciBzdG9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG4gIHZhciBhZmZlY3RlZEl0ZW0gPSBsYW5lW2FmZmVjdGVkSW5kZXhdO1xuXG4gIHZhciBhZmZlY3RlZEluY2lkZW50ID0gaW5jaWRlbnRzQnlJZC5fZ2V0KGFmZmVjdGVkSXRlbS5pZCk7XG5cbiAgYWZmZWN0ZWRJbmNpZGVudC5zZXRJbml0aWFsVmFsdWUobmV3SW5pdGlhbFZhbHVlcywgc3RvcmUpO1xuICB2YXIgY2hhbmdlID0gdXBkYXRlRmluYWxWYWx1ZXMoYWZmZWN0ZWRJbmNpZGVudCwgYWZmZWN0ZWRJbmNpZGVudC5pbml0aWFsVmFsdWUsIGFmZmVjdGVkSW5jaWRlbnQub3JpZ2luYWxBbmltYXRlZEF0dHJpYnV0ZVZhbHVlLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFmZmVjdGVkSW5jaWRlbnQuYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSkpKTsgLy8vIGlmIHRoZSBmaW5hbCB2YWx1ZXMgaGF2ZSBjaGFuZ2VkIGFjY29yZGluZyB0byB0aGUgbmV3IGluaXRpYWwgdmFsdWVzIGFuZCB0aGVyZSBpc1xuICAvLyBhIGZvbGxvd2luZyBpbmNpZGVudCBvbiB0aGUgbGFuZVxuXG4gIGlmIChjaGFuZ2UpIHtcbiAgICBhZmZlY3RlZEluY2lkZW50Lmxhc3RXaXNoKCk7XG4gICAgYWZmZWN0ZWRJbmNpZGVudC5vbkdldENvbnRleHQoKTtcbiAgfVxuXG4gIGlmIChjaGFuZ2UgJiYgYWZmZWN0ZWRJbmRleCA8IGxhbmUubGVuZ3RoIC0gMSkge1xuICAgIHNldEluaXRpYWxWYWx1ZShsYW5lLCBpbmNpZGVudHNCeUlkLCBhZmZlY3RlZEluY2lkZW50LmFuaW1hdGVkQXR0cmlidXRlVmFsdWUsIGFmZmVjdGVkSW5kZXggKyAxLCBmYWxzZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRJbml0aWFsVmFsdWU7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * The goal of this class is to get an original array, provide all the functionality\n * of the Collection class but by keeping the originalArray clean as it was provided.\n */\nvar SandboxCollection =\n/*#__PURE__*/\nfunction () {\n  function SandboxCollection(originalArray) {\n    _classCallCheck(this, SandboxCollection);\n\n    this.originalArray = originalArray;\n    this.extraArray = {};\n    this.addedKeys = [];\n    this.removedKeys = [];\n  }\n\n  _createClass(SandboxCollection, [{\n    key: \"_hasOwnProperty\",\n    value: function _hasOwnProperty(key) {\n      return Object.prototype.hasOwnProperty.call(this.originalArray, key) || Object.prototype.hasOwnProperty.call(this.extraArray, key);\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        this.extraArray[key] = Object.assign({}, this.originalArray[key]);\n        return this.extraArray[key];\n      }\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(key, value) {\n      this.extraArray[key] = value;\n\n      if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        this.addedKeys.push(key);\n      }\n\n      var indexOnRemovedKeys = this.removedKeys.indexOf(key);\n\n      if (indexOnRemovedKeys > -1) {\n        this.removedKeys.splice(indexOnRemovedKeys, 1);\n      }\n    }\n  }, {\n    key: \"_keys\",\n    value: function _keys() {\n      var allKeys = Object.keys(this.originalArray).concat(this.addedKeys);\n\n      for (var i = 0; i < this.removedKeys.length; i++) {\n        var indexOnArray = this.removedKeys.indexOf(this.removedKeys[i]);\n        allKeys.splice(indexOnArray, 1);\n      }\n\n      return allKeys;\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(key) {\n      var indexOnAddedKeys = this.addedKeys.indexOf(key);\n\n      if (indexOnAddedKeys > -1) {\n        this.addedKeys.splice(indexOnAddedKeys);\n        return delete this.extraArray[key];\n      } else {\n        return this.removedKeys.push(key);\n      }\n    }\n  }, {\n    key: \"_export\",\n    value: function _export() {\n      for (var key in this.extraArray) {\n        this.originalArray[key] = this.extraArray[key];\n      }\n\n      for (var i = 0; i < this.removedKeys.length; i++) {\n        delete this.originalArray[this.removedKeys[i]];\n      }\n\n      return this.originalArray;\n    }\n  }]);\n\n  return SandboxCollection;\n}();\n\nmodule.exports = SandboxCollection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hDb2xsZWN0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94Q29sbGVjdGlvbi5qcz81MWZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qKlxuICogVGhlIGdvYWwgb2YgdGhpcyBjbGFzcyBpcyB0byBnZXQgYW4gb3JpZ2luYWwgYXJyYXksIHByb3ZpZGUgYWxsIHRoZSBmdW5jdGlvbmFsaXR5XG4gKiBvZiB0aGUgQ29sbGVjdGlvbiBjbGFzcyBidXQgYnkga2VlcGluZyB0aGUgb3JpZ2luYWxBcnJheSBjbGVhbiBhcyBpdCB3YXMgcHJvdmlkZWQuXG4gKi9cbnZhciBTYW5kYm94Q29sbGVjdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNhbmRib3hDb2xsZWN0aW9uKG9yaWdpbmFsQXJyYXkpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2FuZGJveENvbGxlY3Rpb24pO1xuXG4gICAgdGhpcy5vcmlnaW5hbEFycmF5ID0gb3JpZ2luYWxBcnJheTtcbiAgICB0aGlzLmV4dHJhQXJyYXkgPSB7fTtcbiAgICB0aGlzLmFkZGVkS2V5cyA9IFtdO1xuICAgIHRoaXMucmVtb3ZlZEtleXMgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTYW5kYm94Q29sbGVjdGlvbiwgW3tcbiAgICBrZXk6IFwiX2hhc093blByb3BlcnR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYXNPd25Qcm9wZXJ0eShrZXkpIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5vcmlnaW5hbEFycmF5LCBrZXkpIHx8IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmV4dHJhQXJyYXksIGtleSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldChrZXkpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5leHRyYUFycmF5LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9yaWdpbmFsQXJyYXksIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXh0cmFBcnJheVtrZXldID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcmlnaW5hbEFycmF5W2tleV0pO1xuICAgICAgICByZXR1cm4gdGhpcy5leHRyYUFycmF5W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldChrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmV4dHJhQXJyYXlba2V5XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9yaWdpbmFsQXJyYXksIGtleSkpIHtcbiAgICAgICAgdGhpcy5hZGRlZEtleXMucHVzaChrZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXhPblJlbW92ZWRLZXlzID0gdGhpcy5yZW1vdmVkS2V5cy5pbmRleE9mKGtleSk7XG5cbiAgICAgIGlmIChpbmRleE9uUmVtb3ZlZEtleXMgPiAtMSkge1xuICAgICAgICB0aGlzLnJlbW92ZWRLZXlzLnNwbGljZShpbmRleE9uUmVtb3ZlZEtleXMsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfa2V5c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfa2V5cygpIHtcbiAgICAgIHZhciBhbGxLZXlzID0gT2JqZWN0LmtleXModGhpcy5vcmlnaW5hbEFycmF5KS5jb25jYXQodGhpcy5hZGRlZEtleXMpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVtb3ZlZEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGluZGV4T25BcnJheSA9IHRoaXMucmVtb3ZlZEtleXMuaW5kZXhPZih0aGlzLnJlbW92ZWRLZXlzW2ldKTtcbiAgICAgICAgYWxsS2V5cy5zcGxpY2UoaW5kZXhPbkFycmF5LCAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFsbEtleXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9kZWxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBpbmRleE9uQWRkZWRLZXlzID0gdGhpcy5hZGRlZEtleXMuaW5kZXhPZihrZXkpO1xuXG4gICAgICBpZiAoaW5kZXhPbkFkZGVkS2V5cyA+IC0xKSB7XG4gICAgICAgIHRoaXMuYWRkZWRLZXlzLnNwbGljZShpbmRleE9uQWRkZWRLZXlzKTtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW92ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2V4cG9ydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXhwb3J0KCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZXh0cmFBcnJheSkge1xuICAgICAgICB0aGlzLm9yaWdpbmFsQXJyYXlba2V5XSA9IHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVtb3ZlZEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVsZXRlIHRoaXMub3JpZ2luYWxBcnJheVt0aGlzLnJlbW92ZWRLZXlzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxBcnJheTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2FuZGJveENvbGxlY3Rpb247XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2FuZGJveENvbGxlY3Rpb247Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar SandboxCollection = __webpack_require__(/*! ./SandboxCollection */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxIncidentsById =\n/*#__PURE__*/\nfunction (_SandboxCollection) {\n  _inherits(SandboxIncidentsById, _SandboxCollection);\n\n  function SandboxIncidentsById() {\n    _classCallCheck(this, SandboxIncidentsById);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SandboxIncidentsById).apply(this, arguments));\n  }\n\n  _createClass(SandboxIncidentsById, [{\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        return this.originalArray[key];\n      }\n    }\n  }]);\n\n  return SandboxIncidentsById;\n}(SandboxCollection);\n\nmodule.exports = SandboxIncidentsById;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hJbmNpZGVudHNCeUlkLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94SW5jaWRlbnRzQnlJZC5qcz9iZTAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIFNhbmRib3hDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9TYW5kYm94Q29sbGVjdGlvbicpO1xuXG52YXIgU2FuZGJveEluY2lkZW50c0J5SWQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TYW5kYm94Q29sbGVjdGlvbikge1xuICBfaW5oZXJpdHMoU2FuZGJveEluY2lkZW50c0J5SWQsIF9TYW5kYm94Q29sbGVjdGlvbik7XG5cbiAgZnVuY3Rpb24gU2FuZGJveEluY2lkZW50c0J5SWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNhbmRib3hJbmNpZGVudHNCeUlkKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2FuZGJveEluY2lkZW50c0J5SWQpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNhbmRib3hJbmNpZGVudHNCeUlkLCBbe1xuICAgIGtleTogXCJfZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXQoa2V5KSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZXh0cmFBcnJheSwga2V5KSkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRyYUFycmF5W2tleV07XG4gICAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5vcmlnaW5hbEFycmF5LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbEFycmF5W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNhbmRib3hJbmNpZGVudHNCeUlkO1xufShTYW5kYm94Q29sbGVjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gU2FuZGJveEluY2lkZW50c0J5SWQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar SandboxCollection = __webpack_require__(/*! ./SandboxCollection */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxLanes =\n/*#__PURE__*/\nfunction (_SandboxCollection) {\n  _inherits(SandboxLanes, _SandboxCollection);\n\n  function SandboxLanes() {\n    _classCallCheck(this, SandboxLanes);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SandboxLanes).apply(this, arguments));\n  }\n\n  _createClass(SandboxLanes, [{\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        this.extraArray[key] = [];\n\n        for (var i = 0; i < this.originalArray[key].length; i++) {\n          this.extraArray[key].push({\n            id: this.originalArray[key][i].id,\n            // incident: this.originalArray[key][i].incident,\n            millisecond: this.originalArray[key][i].millisecond * 1\n          });\n        }\n\n        return this.extraArray[key];\n      }\n    }\n  }]);\n\n  return SandboxLanes;\n}(SandboxCollection);\n\nmodule.exports = SandboxLanes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hMYW5lcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2hhbm5lbHMvQXR0cmlidXRlL2hlbHBlcnMvU2FuZGJveExhbmVzLmpzPzdmZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgU2FuZGJveENvbGxlY3Rpb24gPSByZXF1aXJlKCcuL1NhbmRib3hDb2xsZWN0aW9uJyk7XG5cbnZhciBTYW5kYm94TGFuZXMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9TYW5kYm94Q29sbGVjdGlvbikge1xuICBfaW5oZXJpdHMoU2FuZGJveExhbmVzLCBfU2FuZGJveENvbGxlY3Rpb24pO1xuXG4gIGZ1bmN0aW9uIFNhbmRib3hMYW5lcygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2FuZGJveExhbmVzKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2FuZGJveExhbmVzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTYW5kYm94TGFuZXMsIFt7XG4gICAga2V5OiBcIl9nZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldChrZXkpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5leHRyYUFycmF5LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9yaWdpbmFsQXJyYXksIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXh0cmFBcnJheVtrZXldID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9yaWdpbmFsQXJyYXlba2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuZXh0cmFBcnJheVtrZXldLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLmlkLFxuICAgICAgICAgICAgLy8gaW5jaWRlbnQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLmluY2lkZW50LFxuICAgICAgICAgICAgbWlsbGlzZWNvbmQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLm1pbGxpc2Vjb25kICogMVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTYW5kYm94TGFuZXM7XG59KFNhbmRib3hDb2xsZWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTYW5kYm94TGFuZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel =\n/*#__PURE__*/\nfunction () {\n  function Channel(props) {\n    _classCallCheck(this, Channel);\n\n    this.runTimeInfo = props.runTimeInfo;\n    this.context = props.context;\n    this.onInitialise();\n    this.getIncidentById = props.getIncidentById; // this.type = \"plain\";\n  }\n\n  _createClass(Channel, [{\n    key: \"onInitialise\",\n    value: function onInitialise() {}\n  }, {\n    key: \"_resize\",\n    value: function _resize() {\n      helper.log('Please overwite the _resize method of the Channel');\n    }\n    /**\n     * @param {array} incidents - A collection of Incidents in the form:\n     * {\n     *  millisecond\n     *  incident\n     *  id\n     * }\n     * @returns either:\n     *   {\n     *       result:true,\n     *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n     *   }\n     *   or\n     *   {\n     *       result: false,\n     *       errors\n     *   }\n     */\n\n  }, {\n    key: \"addIncidents\",\n    value: function addIncidents(incidents) {\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkAddition(incidents);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n     * that apply the change\n     * @param {array} incidents - the list of the incidents to edit in an array format [object, object, ...]\n     * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n     * @returns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"editIncidents\",\n    value: function editIncidents(incidents, millisecondsDelta) {\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkEdit(incidents, millisecondsDelta);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * Method to remove incidents\n     * @param {array} incidents - the ids of the incidents to remove in an array format\n     * @param {object} props\n     * @retuns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"removeIncidents\",\n    value: function removeIncidents(incidents) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkDelete(incidents, props);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * This method is invoked whenever a CASI (the owner of the Channel) enters\n     * the tree of another clip, so the scratch values of all first Incidents of\n     * each channel should be recalculated based on the context. All Channels\n     * that extend Channel can rewrite this method accordingly\n     * @param {string} contextId - The id of the context of the Clip Copy according to which\n     *      we are going to recalc the scratch values\n     **/\n\n  }, {\n    key: \"recalcScratchValues\",\n    value: function recalcScratchValues(contextId) {}\n    /**\n     * On this method the user defines the specific rules that apply on the plugin itself and on the Incidents of the plugin itself\n     * The method should either return {result: true} or {result: false, errors:[{error-object}]}, where error-object has the structure:\n     *  {\n            incident: // reference to the Incident object that has bee discarded\n            error: // text\n        }\n    * @param {array} incidents - a colleciton of all incidents to be added on the form:\n    *\n        {\n            id\n            millisecond\n            incident\n        }\n    * @returns {object} -\n    * either:\n        {\n            result:true,\n            execute: // a function that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidentsArray, millisecondsDelta) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentIds) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {} // eslint-disable-line no-unused-vars\n\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return \"plain\";\n    }\n  }]);\n\n  return Channel;\n}();\n\nmodule.exports = Channel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel = __webpack_require__(/*! ../Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index.js */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index.js */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar ClipChannel =\n/*#__PURE__*/\nfunction (_Channel) {\n  _inherits(ClipChannel, _Channel);\n\n  function ClipChannel() {\n    _classCallCheck(this, ClipChannel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClipChannel).apply(this, arguments));\n  }\n\n  _createClass(ClipChannel, [{\n    key: \"onInitialise\",\n\n    /*\n    this.incidents is a collection of {incident, id, millisecond} objects always kept in order\n        from lower to higher millisecond\n    this.incidetnsById is an index of the incidents kept by id (this.incidents[incident-id] = Incident)\n    */\n    value: function onInitialise() {\n      this.incidents = [];\n      this.incidentsById = {};\n    }\n  }, {\n    key: \"_incidentById\",\n    value: function _incidentById(id) {\n      return this.incidentsById[id];\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      for (var i = 0; i < this.incidents.length; i++) {\n        this.incidents[i].millisecond = this.incidents[i].millisecond * durationFraction;\n      }\n    }\n    /**\n    * @param {array} incidents - a colleciton of all incidents to be added on the form:\n    *\n        {\n            id\n            millisecond\n            incident\n        }\n    * @returns {object} -\n    * either:\n        {\n            result:true,\n            execute: // a function that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      var errors = [];\n      var candidateIncidentsById = {};\n      var incidentsToConcat = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        candidateIncidentsById[incidents[i].id] = incidents[i].incident;\n        incidentsToConcat.push({\n          id: incidents[i].id,\n          millisecond: incidents[i].millisecond\n        });\n\n        if (Object.prototype.hasOwnProperty.call(this.incidentsById, incidents[i].id)) {\n          helper.error(\"Incident with the id \".concat(incidents[i].id, \" already exists. Addition is rejected.\"));\n          errors.push({\n            type: 'Already existing id',\n            meta: {\n              id: incidents[i].id\n            }\n          });\n        }\n      }\n\n      if (errors.length > 0) {\n        return {\n          result: false,\n          errors: errors\n        };\n      }\n\n      var that = this;\n\n      var exec = function exec() {\n        that.incidentsById = Object.assign(that.incidentsById, candidateIncidentsById);\n        that.incidents = that.incidents.concat(incidentsToConcat);\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n\n        for (var _i = 0; _i < incidents.length; _i++) {\n          that._incidentById(incidents[_i].id)._onGetContextOnce(that.context);\n        }\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n    @param {array} incidentsArray - A collection of the Incidetns to get edited in the form:\n    {\n        id\n        millisecond\n        incident\n    }\n    @param {int} millisecondsDelta- the delta of the star point of the provided incidents\n    */\n\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidentsArray, millisecondsDelta) {\n      var that = this;\n\n      var exec = function exec() {\n        for (var i = 0; i < incidentsArray.length; i++) {\n          for (var j = 0; j < that.incidents.length; j++) {\n            if (that.incidents[j].id === incidentsArray[i].id) {\n              that.incidents[j].millisecond += millisecondsDelta;\n              break;\n            }\n          }\n        }\n\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentsArray) {\n      var that = this;\n      var incidentIds = [];\n\n      for (var i = 0; i < incidentsArray.length; i++) {\n        incidentIds.push(incidentsArray[i].id);\n      }\n\n      var exec = function exec() {\n        var newIncidents = _filter(that.incidents, function (incident) {\n          return incidentIds.indexOf(incident.id) === -1;\n        });\n\n        that.incidents = newIncidents;\n\n        for (var _i2 = 0; _i2 < incidentIds.length; _i2++) {\n          delete that.incidentsById[incidentIds[_i2]];\n        }\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     * @param {array} incidents - [{id, start, end, startDelta}]\n     */\n\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      var that = this;\n\n      var exec = function exec() {\n        for (var i = 0; i < incidents.length; i++) {\n          for (var j = 0; j < that.incidents.length; j++) {\n            if (that.incidents[j].id === incidents[i].id) {\n              that.incidents[j].millisecond += incidents[i].startDelta;\n              break;\n            }\n          }\n        }\n\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {string} contextId - the context id to move\n     @param {boolean} forceReset - set to true when we want full flash\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (forceReset === true) {\n        // incidents: [{id, millisecond}, {}, {}...]\n        for (var i = 0; i < this.incidents.length; i++) {\n          var laneItem = this.incidents[i];\n\n          var incident = this._incidentById(laneItem.id);\n\n          if (to < laneItem.millisecond) {\n            incident.onProgress(0, 0, contextId, true);\n          } else if (to > laneItem.millisecond + incident.duration) {\n            incident.onProgress(1, incident.duration, contextId, true);\n          } else {\n            incident.onProgress((to - laneItem.millisecond) / incident.duration, to - laneItem.millisecond, contextId, true);\n          }\n        }\n      } else {\n        var that = this;\n        var participatingItems;\n\n        if (to > from) {\n          participatingItems = _filter(this.incidents, function (laneItem) {\n            return laneItem.millisecond + that._incidentById(laneItem.id).duration >= from && laneItem.millisecond + that._incidentById(laneItem.id).duration <= to || // it ends after from and before to millisecond\n            that._incidentById(laneItem.id).duration + laneItem.millisecond >= to && laneItem.millisecond <= to; // or it ends after the target millisecond but also starts before it\n          });\n        } else {\n          participatingItems = _filter(this.incidents, function (laneItem) {\n            return laneItem.millisecond + that._incidentById(laneItem.id).duration >= to && laneItem.millisecond + that._incidentById(laneItem.id).duration <= from || // it ends after from and before to millisecond\n            that._incidentById(laneItem.id).duration + laneItem.millisecond >= from && laneItem.millisecond <= from; // or it ends after the target millisecond but also starts before it\n          });\n        }\n\n        for (var _i3 = 0; _i3 < participatingItems.length; _i3++) {\n          var _laneItem = participatingItems[_i3];\n\n          var contextAwareClipIncident = this._incidentById(_laneItem.id); // onProgress(fraction, milliseconds, contextId, forceReset = false) {\n\n\n          var overcameEnd = (to - _laneItem.millisecond) / contextAwareClipIncident.duration >= 1;\n          var fraction = overcameEnd ? 1 : (to - _laneItem.millisecond) / contextAwareClipIncident.duration;\n          var millisecond = overcameEnd ? contextAwareClipIncident.duration : to - _laneItem.millisecond;\n          contextAwareClipIncident.onProgress(fraction, millisecond, contextId, false);\n        }\n      } // this.runTimeInfo.currentMillisecond = to;\n\n    }\n  }]);\n\n  return ClipChannel;\n}(Channel);\n\nmodule.exports = ClipChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClipsChannel = __webpack_require__(/*! ../Clip/ClipsChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index.js */ \"./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar dataSeparator = \"|||\";\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioPlaybackChannel =\n/*#__PURE__*/\nfunction (_ClipsChannel) {\n  _inherits(AudioPlaybackChannel, _ClipsChannel);\n\n  function AudioPlaybackChannel(props) {\n    var _this;\n\n    _classCallCheck(this, AudioPlaybackChannel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioPlaybackChannel).call(this, props)); // keeps the list of the ids of MediaIncidents that are currently been played\n    // in the form `${id}|||$[contextId}`\n\n    _this.playingIncidentsIds = []; // when the Channel's Clip enters the transitional state the Channel ignores\n    // moveTos. When the transition ends though, no matter the currentMillisecond\n    // its Clip was it should recalc which sources to play as if we were going from\n    // 0 to the the target millisecond because of the different way the Playback operates\n    // (it has no onProgress). For this, it's very important to store the information\n    // that it entered the transitional state so on the next playing state moveTo\n    // to force as from ms 0.\n\n    _this.transitioned = false;\n    props.subscribe(helper.getAnId(), _this._stateChange.bind(_assertThisInitialized(_this)), 0, 1, true);\n    return _this;\n  }\n\n  _createClass(AudioPlaybackChannel, [{\n    key: \"_stateChange\",\n    value: function _stateChange(ms, state) {\n      if (state === \"paused\" || state === \"idle\" || state === \"blocked\") {\n        this._stopPlayingIncidents();\n\n        this.transitioned = true;\n      }\n    }\n  }, {\n    key: \"_stopPlayingIncidents\",\n    value: function _stopPlayingIncidents() {\n      for (var i = 0; i < this.playingIncidentsIds.length; i++) {\n        var incidentInfo = this.playingIncidentsIds[i].split(dataSeparator);\n\n        this._incidentById(incidentInfo[0]).stop(incidentInfo[1]);\n      }\n\n      this.playingIncidentsIds = [];\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {string} contextId - the context id to move\n     @param {boolean} forceReset - set to true when we want full flash\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (this.runTimeInfo.state === 'transitional' || forceReset === true) {\n        this.transitioned = true;\n\n        this._stopPlayingIncidents();\n\n        for (var i = 0; i < this.incidents.length; i++) {\n          var laneItem = this.incidents[i];\n\n          var incident = this._incidentById(laneItem.id);\n\n          if (to < laneItem.millisecond) {\n            incident.onProgress(0, 0, contextId, true);\n          } else if (to > laneItem.millisecond + incident.duration) {\n            incident.onProgress(1, incident.duration, contextId, true);\n          } else {\n            incident.onProgress((to - laneItem.millisecond) / incident.duration, to - laneItem.millisecond, contextId, true);\n          }\n        }\n\n        return;\n      } else {\n        if (this.transitioned === true) {\n          from = 0;\n          this.transitioned = false;\n        }\n      }\n\n      var that = this;\n\n      var startingAnims = _filter(this.incidents, function (laneItem) {\n        return laneItem.millisecond >= from && laneItem.millisecond < to && laneItem.millisecond + that._incidentById(laneItem.id).duration > to;\n      });\n\n      var finishingAnims = _filter(this.incidents, function (laneItem) {\n        return that._incidentById(laneItem.id).duration + laneItem.millisecond > from && that._incidentById(laneItem.id).duration + laneItem.millisecond <= to; // or it ends after the target millisecond but also starts before it\n      }); //console.log(this._incidentById);\n      // console.log(from, to);\n      // console.log(startingAnims);\n      // console.log(finishingAnims);\n\n\n      for (var _i = 0; _i < startingAnims.length; _i++) {\n        var _laneItem = startingAnims[_i];\n\n        var MediaIncident = this._incidentById(_laneItem.id); // onProgress(fraction, milliseconds, contextId, forceReset = false) {\n\n\n        var overcameEnd = (to - _laneItem.millisecond) / MediaIncident.duration >= 1;\n        var fraction = overcameEnd ? 1 : (to - _laneItem.millisecond) / MediaIncident.duration;\n        var millisecond = overcameEnd ? MediaIncident.duration : to - _laneItem.millisecond;\n        var startAttempt = MediaIncident.play(fraction, millisecond, contextId);\n\n        if (startAttempt === true) {\n          this.playingIncidentsIds.push(\"\".concat(_laneItem.id).concat(dataSeparator).concat(contextId));\n        }\n      }\n\n      for (var _i2 = 0; _i2 < finishingAnims.length; _i2++) {\n        var _laneItem2 = finishingAnims[_i2];\n\n        var _MediaIncident = this._incidentById(_laneItem2.id);\n\n        _MediaIncident.stop(contextId);\n\n        var index = this.playingIncidentsIds.indexOf(\"\".concat(_laneItem2.id).concat(dataSeparator).concat(contextId));\n\n        if (index > -1) {\n          this.playingIncidentsIds.splice(index, 1);\n        }\n      }\n\n      this.runTimeInfo.currentMillisecond = to;\n    }\n  }]);\n\n  return AudioPlaybackChannel;\n}(ClipsChannel);\n\nmodule.exports = AudioPlaybackChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MonoIncident = __webpack_require__(/*! ../BaseClasses/MonoIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ClipCopy =\n/*#__PURE__*/\nfunction (_MonoIncident) {\n  _inherits(ClipCopy, _MonoIncident);\n\n  function ClipCopy(attrs, props, dna) {\n    var _this;\n\n    _classCallCheck(this, ClipCopy);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClipCopy).call(this, attrs, props, dna));\n    _this.runTimeInfo = {\n      currentMillisecond: 0\n    };\n    return _this;\n  }\n\n  _createClass(ClipCopy, [{\n    key: \"lastWish\",\n    value: function lastWish() {\n      this.ownClip.ownContext.unmount();\n    }\n  }, {\n    key: \"onGetContext\",\n    value: function onGetContext() {\n      // In order to render itself on the given element first it needs the props (including html and css)\n      // from the real Clip it copies\n      var constructionArgs = this.DescriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip\n\n      var host = helper.getElementByMCID(this.context, this.mcid);\n\n      var hostedProps = _objectSpread({}, constructionArgs.props, {\n        selector: undefined,\n        host: host\n      }); // we create a clip because Clips on creation render and thus have their own context\n      // this.dna.descriptiveIncident.constructor.Incident keeps a reference to the non-audio real Clip\n      // Class. No audio is involved on this process\n\n\n      this.ownClip = new this.DescriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps);\n      this.ownClip.DescriptiveIncident = this.DescriptiveIncident;\n      this.ownClip.contextLoaded = this.contextLoaded.bind(this); // console.log(this.ownClip);\n      // flushes the realClip with its ownClip's context\n\n      this.DescriptiveIncident.realClip.addContext({\n        clipId: this.id,\n        context: this.ownClip.ownContext\n      }, true); // even though we have created an own clip, we have made no checks at all neither\n      // we added the incidents of the real clip to it. That is becuase playing and moving\n      // this clip copy means directly moving the real clip on the context of the own clip.\n      // So the only thing we need here is the context and nothing more.\n\n      this.contextReady = true;\n    }\n  }, {\n    key: \"contextLoaded\",\n    value: function contextLoaded() {\n      this.contextReady = true;\n      this.unblock();\n    }\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds) {\n      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (this.ownClip.ownContext.loading === true) {\n        this.setBlock();\n        return;\n      }\n\n      for (var key in this.DescriptiveIncident.realClip.instantiatedChannels) {\n        var channel = this.DescriptiveIncident.realClip.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, forceReset);\n      }\n\n      this.runTimeInfo.currentMillisecond = milliseconds;\n      this.ownClip.onAfterProgress(fraction, milliseconds);\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return this.DescriptiveIncident.realClip.duration;\n    },\n    set: function set(milliseconds) {\n      this.DescriptiveIncident.realClip._resize(milliseconds / this.realClip.duration);\n    }\n  }]);\n\n  return ClipCopy;\n}(MonoIncident);\n\nmodule.exports = ClipCopy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar conf = __webpack_require__(/*! ../_configuration/generalConf */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\"); // context handlers\n\n\nvar IframeContextHandler = __webpack_require__(/*! ./helpers/IframeContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js\");\n\nvar WebComponentContextHandler = __webpack_require__(/*! ./helpers/WebComponentContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./ExtendableClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar Clip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(Clip, _ExtendableClip);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function Clip() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, Clip);\n\n    var attrsToPass, propsToUse;\n    /*\n    backwards compatibility. If the user doesn't pass a second argument on the constructor then this is\n    the new way of initialising a Group (only props).\n    */\n\n    if (oldProps === null) {\n      attrsToPass = {};\n      propsToUse = props;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = props;\n      propsToUse = oldProps;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clip).call(this, attrsToPass, propsToUse));\n    propsToUse = _objectSpread({}, propsToUse, {\n      html: _this.html != '' ? _this.html : propsToUse.html,\n      css: _this.css != '' ? _this.css : propsToUse.css,\n      fonts: _this.fonts.length > 0 ? _this.fonts : propsToUse.fonts\n    }); // that means the Clip is hosted or, in other words a host has been\n    // provided on the props (and not a selector)\n    // this.isHostedClip = true;\n\n    var clipType = conf.selfContainedContextHandler;\n    _this.clipType = clipType;\n    var ContextHanlder = null;\n\n    if (document.head.createShadowRoot || document.head.attachShadow) {\n      ContextHanlder = WebComponentContextHandler;\n    } else {\n      ContextHanlder = IframeContextHandler;\n    } // console.log(`this.id: ${this.id}, Class: ${this.constructor.name}, this.html: ${this.html}`)\n\n\n    var contextHanlder = new ContextHanlder(propsToUse);\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: _this.isHostedClip\n    });\n    _this.iframe = contextHanlder.iframeElement;\n    _this.forceExportIncidents = true;\n\n    _this.onAfterRender();\n\n    return _this;\n  }\n\n  _createClass(Clip, [{\n    key: \"onAfterRender\",\n    value: function onAfterRender() {// implement here\n    }\n  }, {\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      // TODO also export CSS and fonts taking in account the potential existance\n      // of them on the get methods\n      return {\n        attrs: this.attrs,\n        props: _objectSpread({}, this.props, {\n          host: undefined,\n          html: this.ownContext.rootElement.innerHTML\n        })\n      };\n    }\n  }, {\n    key: \"setCustomEntity\",\n    value: function setCustomEntity(id, entity) {\n      var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return this.context.setCustomEntity(id, entity, classes);\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"css\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"fonts\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"rootElement\",\n    get: function get() {\n      return this.ownContext.clipContainer;\n    }\n  }]);\n\n  return Clip;\n}(ExtendableClip);\n\nmodule.exports = Clip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvRE9NQ2xpcC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9ET01DbGlwLmpzPzI2MTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBjb25mID0gcmVxdWlyZSgnLi4vX2NvbmZpZ3VyYXRpb24vZ2VuZXJhbENvbmYnKTsgLy8gY29udGV4dCBoYW5kbGVyc1xuXG5cbnZhciBJZnJhbWVDb250ZXh0SGFuZGxlciA9IHJlcXVpcmUoJy4vaGVscGVycy9JZnJhbWVDb250ZXh0SGFuZGxlcicpO1xuXG52YXIgV2ViQ29tcG9uZW50Q29udGV4dEhhbmRsZXIgPSByZXF1aXJlKCcuL2hlbHBlcnMvV2ViQ29tcG9uZW50Q29udGV4dEhhbmRsZXInKTtcblxudmFyIEV4dGVuZGFibGVDbGlwID0gcmVxdWlyZSgnLi9FeHRlbmRhYmxlQ2xpcCcpO1xuXG52YXIgQ2xpcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0V4dGVuZGFibGVDbGlwKSB7XG4gIF9pbmhlcml0cyhDbGlwLCBfRXh0ZW5kYWJsZUNsaXApO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBhbiBvYmplY3QgdGhhdCBzaG91bGQgY29udGFpbiBhbGwgb2YgdGhlIGZvbGxvd2luZyBrZXlzOlxuICAgKiAtIGh0bWwgKHRoZSBodG1sIHRlbXBsYXRlIHRvIHJlbmRlcilcbiAgICogLSBjc3MgKHRoZSBjc3MgdGVtcGxhdGUgb2YgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gaW5pdFBhcmFtcyAob3B0aW9uYWwgLyB0aGUgaW5pdGlhbGlzYXRpb24gcGFyYW1ldGVyZXMgdGhhdCB3aWxsIGJlIHBhc3NlZCBib3RoIG9uIHRoZSBjc3MgYW5kIHRoZSBodG1sIHRlbXBsYXRlcyBpbiBvcmRlciB0byByZW5kZXIpXG4gICAqIC0gaG9zdCAoYW4gRWxlbWVudCBvYmplY3QgdGhhdCB3aWxsIGhvc3QgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gY29udGFpbmVyUGFyYW1zIChhbiBvYmplY3QgdGhhdCBob2xkcyBwYXJhbWV0ZXJzIHRvIGFmZmVjdCB0aGUgY29udGFpbmVyIG9mIHRoZSBpc29sYXRlZCB0cmVlLCBlLmcuIHdpZHRoLCBoZWlnaHQgZXRjKVxuICAgKi9cbiAgZnVuY3Rpb24gQ2xpcCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBvbGRQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwKTtcblxuICAgIHZhciBhdHRyc1RvUGFzcywgcHJvcHNUb1VzZTtcbiAgICAvKlxuICAgIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBJZiB0aGUgdXNlciBkb2Vzbid0IHBhc3MgYSBzZWNvbmQgYXJndW1lbnQgb24gdGhlIGNvbnN0cnVjdG9yIHRoZW4gdGhpcyBpc1xuICAgIHRoZSBuZXcgd2F5IG9mIGluaXRpYWxpc2luZyBhIEdyb3VwIChvbmx5IHByb3BzKS5cbiAgICAqL1xuXG4gICAgaWYgKG9sZFByb3BzID09PSBudWxsKSB7XG4gICAgICBhdHRyc1RvUGFzcyA9IHt9O1xuICAgICAgcHJvcHNUb1VzZSA9IHByb3BzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbHNlLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBwYXNzZWQgdHdvIGFyZ3VtZW50cyB0aGVuIGJvdGggc2hvdWxkIGJlIHVzZWRcbiAgICAgIGF0dHJzVG9QYXNzID0gcHJvcHM7XG4gICAgICBwcm9wc1RvVXNlID0gb2xkUHJvcHM7XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ2xpcCkuY2FsbCh0aGlzLCBhdHRyc1RvUGFzcywgcHJvcHNUb1VzZSkpO1xuICAgIHByb3BzVG9Vc2UgPSBfb2JqZWN0U3ByZWFkKHt9LCBwcm9wc1RvVXNlLCB7XG4gICAgICBodG1sOiBfdGhpcy5odG1sICE9ICcnID8gX3RoaXMuaHRtbCA6IHByb3BzVG9Vc2UuaHRtbCxcbiAgICAgIGNzczogX3RoaXMuY3NzICE9ICcnID8gX3RoaXMuY3NzIDogcHJvcHNUb1VzZS5jc3MsXG4gICAgICBmb250czogX3RoaXMuZm9udHMubGVuZ3RoID4gMCA/IF90aGlzLmZvbnRzIDogcHJvcHNUb1VzZS5mb250c1xuICAgIH0pOyAvLyB0aGF0IG1lYW5zIHRoZSBDbGlwIGlzIGhvc3RlZCBvciwgaW4gb3RoZXIgd29yZHMgYSBob3N0IGhhcyBiZWVuXG4gICAgLy8gcHJvdmlkZWQgb24gdGhlIHByb3BzIChhbmQgbm90IGEgc2VsZWN0b3IpXG4gICAgLy8gdGhpcy5pc0hvc3RlZENsaXAgPSB0cnVlO1xuXG4gICAgdmFyIGNsaXBUeXBlID0gY29uZi5zZWxmQ29udGFpbmVkQ29udGV4dEhhbmRsZXI7XG4gICAgX3RoaXMuY2xpcFR5cGUgPSBjbGlwVHlwZTtcbiAgICB2YXIgQ29udGV4dEhhbmxkZXIgPSBudWxsO1xuXG4gICAgaWYgKGRvY3VtZW50LmhlYWQuY3JlYXRlU2hhZG93Um9vdCB8fCBkb2N1bWVudC5oZWFkLmF0dGFjaFNoYWRvdykge1xuICAgICAgQ29udGV4dEhhbmxkZXIgPSBXZWJDb21wb25lbnRDb250ZXh0SGFuZGxlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29udGV4dEhhbmxkZXIgPSBJZnJhbWVDb250ZXh0SGFuZGxlcjtcbiAgICB9IC8vIGNvbnNvbGUubG9nKGB0aGlzLmlkOiAke3RoaXMuaWR9LCBDbGFzczogJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LCB0aGlzLmh0bWw6ICR7dGhpcy5odG1sfWApXG5cblxuICAgIHZhciBjb250ZXh0SGFubGRlciA9IG5ldyBDb250ZXh0SGFubGRlcihwcm9wc1RvVXNlKTtcbiAgICBfdGhpcy5vd25Db250ZXh0ID0gX29iamVjdFNwcmVhZCh7fSwgY29udGV4dEhhbmxkZXIuY29udGV4dCwge1xuICAgICAgaXNIb3N0ZWRDbGlwOiBfdGhpcy5pc0hvc3RlZENsaXBcbiAgICB9KTtcbiAgICBfdGhpcy5pZnJhbWUgPSBjb250ZXh0SGFubGRlci5pZnJhbWVFbGVtZW50O1xuICAgIF90aGlzLmZvcmNlRXhwb3J0SW5jaWRlbnRzID0gdHJ1ZTtcblxuICAgIF90aGlzLm9uQWZ0ZXJSZW5kZXIoKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDbGlwLCBbe1xuICAgIGtleTogXCJvbkFmdGVyUmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQWZ0ZXJSZW5kZXIoKSB7Ly8gaW1wbGVtZW50IGhlcmVcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXhwb3J0Q29uc3RydWN0aW9uQXJndW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydENvbnN0cnVjdGlvbkFyZ3VtZW50cygpIHtcbiAgICAgIC8vIFRPRE8gYWxzbyBleHBvcnQgQ1NTIGFuZCBmb250cyB0YWtpbmcgaW4gYWNjb3VudCB0aGUgcG90ZW50aWFsIGV4aXN0YW5jZVxuICAgICAgLy8gb2YgdGhlbSBvbiB0aGUgZ2V0IG1ldGhvZHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGF0dHJzOiB0aGlzLmF0dHJzLFxuICAgICAgICBwcm9wczogX29iamVjdFNwcmVhZCh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICAgIGhvc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICBodG1sOiB0aGlzLm93bkNvbnRleHQucm9vdEVsZW1lbnQuaW5uZXJIVE1MXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRDdXN0b21FbnRpdHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q3VzdG9tRW50aXR5KGlkLCBlbnRpdHkpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuc2V0Q3VzdG9tRW50aXR5KGlkLCBlbnRpdHksIGNsYXNzZXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJodG1sXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNzc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb250c1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyb290RWxlbWVudFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMub3duQ29udGV4dC5jbGlwQ29udGFpbmVyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDbGlwO1xufShFeHRlbmRhYmxlQ2xpcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpcDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar selfContainedIncidentsNpmName = '@kissmybutton/self-contained-incidents'; // TODO remove this\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar ExtendableClip =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(ExtendableClip, _Group);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   * - type (optional, defaults to \"iframe\") the type of the Clip. It can be one of the:\n   *  - iframe\n   *  - plain\n   */\n  function ExtendableClip(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, ExtendableClip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExtendableClip).call(this, attrs, props));\n    _this.attrs = attrs;\n    _this.props = props;\n    _this.isTheClip = true;\n    _this.blockingWaitings = {};\n    /**\n     * The cnannels attribute holds a list of all intantiated Channels of the Incidents belonging to the clip\n     * this attribute is only valuable when the Group becomes the Clip\n     * The format of the attribute is:\n     *  key-value pairs in the manner:\n     * <mc_plugin_npm_name>: Channel object\n     */\n\n    _this.instantiatedChannels = {};\n    _this.isHostedClip = true;\n    /**\n     * The instantiatedCopiesContexts is a key-value pairs colleciton holding the\n     * contexts of all instantiated ClipCopies\n     **/\n\n    _this.instantiatedCopiesContexts = {};\n\n    _this.onClipInitialise();\n\n    _this.runTimeInfo = _this.props.runTimeInfo;\n    _this.durationSubs = []; // the audioClip property defines wether the Clip is Audio or not. Defaults to false\n    // and should be overiten to true on Audio Clip\n\n    _this.audioClip = false;\n    _this.contextReady = true;\n    return _this;\n  }\n\n  _createClass(ExtendableClip, [{\n    key: \"onClipInitialise\",\n    value: function onClipInitialise() {// called when group gets initialised\n    }\n  }, {\n    key: \"contextLoading\",\n    value: function contextLoading() {\n      this.contextReady = false;\n    }\n  }, {\n    key: \"contextLoaded\",\n    value: function contextLoaded() {\n      this.contextReady = true;\n      this.unblock();\n    }\n    /**\n     * This method is been called when a new ClipCopy enters the real tree successfully.\n     * @param {object} contextData - keys: clipId, context\n     **/\n\n  }, {\n    key: \"addContext\",\n    value: function addContext(contextData) {\n      this.instantiatedCopiesContexts[contextData.clipId] = contextData.context;\n      contextData.instantiatedCopiesContexts = this.instantiatedCopiesContexts;\n      var res = this.putMessageOnPipe('addContext', contextData, {}, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      }); // if the added context is the first one to enter the realClip we must\n      // recalculate the scratch values of all of our first Incidents on our instantiatedChannels\n\n      if (Object.keys(this.instantiatedCopiesContexts).length === 1) {\n        // if it is the first one to be added\n        for (var key in this.instantiatedChannels) {\n          this.instantiatedChannels[key].recalcScratchValues(contextData.clipId);\n        } // also we store this non fragmented context on our context so it can be\n        // used on Incidents addition for calculating scratch values\n\n\n        this.context.nonFragmentedContext = contextData.context;\n      }\n\n      return res;\n    }\n    /*\n    ExtendableClip (as its name implies) is a Class that should be extended by\n    any specific kind of Clip, such as Fragmented or SCGroup. This method must\n    be overitten by the new Classes. This definition here is just for reference / help\n    purposes\n    */\n\n  }, {\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      return {\n        attrs: this.attrs,\n        props: this.props\n      };\n    }\n    /**\n     * completely resizes the Clip without any checks\n     */\n\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      for (var key in this.instantiatedChannels) {\n        this.instantiatedChannels[key]._resize(durationFraction);\n      }\n\n      this.setNewDuration(this.duration * durationFraction);\n\n      for (var i = 0; i < this.durationSubs.length; i++) {\n        this.durationSubs[i](this.duration);\n      }\n    }\n    /*********************************************************\n    Editing commands input methods\n    *********************************************************/\n\n    /**\n     * This command comes form the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  incident: the Descriptive Incident to be added\n     *  millisecond: the millisecond to add it\n     *  parentGroupId: the id of the Group to which we want to the Incident to\n     * }\n     */\n\n  }, {\n    key: \"addIncident\",\n    value: function addIncident(payload) {\n      var _this2 = this;\n\n      var candidates = this.putMessageOnPipe('addIncident', {\n        incident: payload.incident,\n        millisecond: payload.millisecond,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context,\n          instantiatedCopiesContexts: this.instantiatedCopiesContexts\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      }); // concatenate candidates\n      // console.log(candidates);\n\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta + payload.millisecond);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      } // console.log(totalIncidentsByPlugin);\n\n\n      var res = this.checkAddition(totalIncidentsByPlugin);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute(); // up to that point the only context Incident that has been initialised on the\n          // ContextAwareIncidents of the candidates is the original context of the\n          // ExtendableClip.\n\n          for (var _i = 0; _i < candidates.length; _i++) {\n            candidates[_i].responder.addChild(candidates[_i].response, payload.millisecond); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            }); // we also need to add every existing (copied) context to the ContextAwareIncidents\n            // created on the candidates process\n\n\n            for (var contextKey in _this2.instantiatedCopiesContexts) {\n              candidates[_i].responder.putMessageOnPipe('addContext', {\n                clipId: contextKey,\n                context: _this2.instantiatedCopiesContexts[contextKey]\n              }, 'ContextAwareIncidents', {\n                selfExecute: false,\n                direction: _TREECONST._DIRECTIONS._DOWN\n              });\n            }\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    } // *******************************************************\n    // INCIDENTS MANAGEMENT METHODS\n    // POLYMORPHISM APPLIED. IF THE GROUP HAS NO PARENT IT ACTS AS A SCENE. IF THE GROUP HAS PARENT IT ACTS AS\n    // A \"TRANSPARENT GROUP\"\n\n    /**\n     * The method returns either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidentsById) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"all-or-nothing\";\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // if the clip had no channel instantiated for the specific key (plugin id) yet create it\n        if (!Object.prototype.hasOwnProperty.call(this.instantiatedChannels, key)) {\n          // intstantiate the channel of the plugin by using the reference to the class definition stored on\n          // the very first incident of the array\n          // console.log(incidentsById[key][0].incident.plugin_channel_class);\n          this.instantiatedChannels[key] = new incidentsById[key][0].incident.plugin_channel_class({\n            runTimeInfo: this.runTimeInfo,\n            context: this.context,\n            subscribe: this.props.subscribe // all channels can subscribe to state or current millisecond changes\n\n          });\n        } // perform the check\n\n\n        var pluginResult = this.instantiatedChannels[key].addIncidents(incidentsById[key], type);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var additionResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return additionResult;\n    }\n    /**\n     * This command comes form the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  incident: the Descriptive Incident to be repositioned\n     *  millisecond: the new millisecond to put it\n     *  parentGroupId: the id of the\n     * }\n     */\n\n  }, {\n    key: \"moveIncident\",\n    value: function moveIncident(payload) {\n      var candidates = this.putMessageOnPipe('moveIncident', {\n        incidentId: payload.id,\n        millisecond: payload.millisecond,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta + payload.millisecond);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug2;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug2 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug2, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var res = this.checkMove(totalIncidentsByPlugin, payload.positionDelta);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i2 = 0; _i2 < candidates.length; _i2++) {\n            candidates[_i2].responder.editPosition(candidates[_i2].response.id, payload.millisecond); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i2].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            });\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * The checkEdit method serves exactly what its name implies. To check if the edit of an Incident (edit of Incident's position given in milliseconds delta)\n     * is valid and accepted, according to the rules defined on the channels.\n     * The method boobles up until it reaches the Clip.\n     * @param {object} incident - the incident to edit\n     * @param {int} millisecondsDelta - the milliseconds delta of the Incident's start time\n     The method should return either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will edit the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkMove\",\n    value: function checkMove(incidentsById, millisecondsDelta) {\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var pluginResult = this.instantiatedChannels[key].editIncidents(incidentsById[key], millisecondsDelta);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var editResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return editResult;\n    }\n  }, {\n    key: \"removeIncident\",\n    value: function removeIncident(payload) {\n      var candidates = this.putMessageOnPipe('removeIncident', {\n        incidentId: payload.id,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel();\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug3;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug3 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug3, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var res = this.checkDelete(totalIncidentsByPlugin);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i3 = 0; _i3 < candidates.length; _i3++) {\n            candidates[_i3].responder.removeChild(candidates[_i3].response.id); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i3].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            });\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * The checkDelete method serves exactly what its name implies. To check if the deletion of an Incident\n     * is valid and accepted, according to the rules defined on the channels.\n     * The method boobles up until it reaches the Clip.\n     * @param {object} incident - the incident to edit\n      The result might be either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will remove the Incident on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentsById) {\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var pluginResult = this.instantiatedChannels[key].removeIncidents(incidentsById[key]);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var removeResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return removeResult;\n    }\n    /**\n     * This command is invoked by the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  id: the id of the Incident to resize\n     *  newSize: the milliseconds of the new duration\n     *  fraction: the division of the new duration to the current\n     * }\n     */\n\n  }, {\n    key: \"resizeIncident\",\n    value: function resizeIncident(payload) {\n      var candidates = this.putMessageOnPipe('resize', {\n        incidentId: payload.id,\n        newSize: payload.newSize,\n        fraction: payload.fraction,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.id, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug4;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug4 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug4, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var positionDelta = 0;\n\n      if (candidates.length > 0) {\n        positionDelta = candidates[0].positionDelta;\n      }\n\n      var res = this.checkResize(payload.fraction, totalIncidentsByPlugin, positionDelta);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i4 = 0; _i4 < candidates.length; _i4++) {\n            candidates[_i4].responder.setNewDuration(payload.newSize);\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * checks if a duration edit is feasible and doesn't cause conflicts\n     * @param {int} duration - the new duration\n     **/\n\n  }, {\n    key: \"checkResize\",\n    value: function checkResize(durationFraction, incidentsById) {\n      var adjustMillisecond = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var adjustedIncidents = helper.systoleDiastoleProjections(incidentsById[key], durationFraction, adjustMillisecond);\n        var pluginResult = this.instantiatedChannels[key].checkResizedIncidents(adjustedIncidents);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var editResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return editResult;\n    }\n  }, {\n    key: \"getIncidentsByChannel\",\n\n    /**\n     * Returns an object with keys the keys of all the plugins Incidents of which appear in the\n     * tree of the Group. All Incidents are projected to the Group's timeline.\n     * The array includes the Group's projection too\n     */\n    value: function getIncidentsByChannel() {\n      var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var incidentsByPlugin = {};\n      incidentsByPlugin[selfContainedIncidentsNpmName] = [{\n        millisecond: adjustMillisecond,\n        incident: this,\n        id: this.id\n      }];\n      return incidentsByPlugin;\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(newVal) {\n      this.volume = parseFloat(newVal); // this.putMessageOnPipe(pipeMessages._GAIN_CHANGE, { gain: newVal }, false, \"down\");\n    }\n    /**\n     * Eventhough Clips have their own context, still they might belong to another Clip's\n     * tree (CASI). In such a case this method gives the oportunity to set things up\n     * and do operations related with their parent's context (such as subscribing to audio effect nodes)\n     **/\n\n  }, {\n    key: \"_onGetContextOnce\",\n    value: function _onGetContextOnce(parentClipContext) {\n      return;\n    } // special recalcDuration handling so any potential clip copies update their trees\n\n  }, {\n    key: \"handleRecalcDuration\",\n    value: function handleRecalcDuration(target, payload) {\n      // eslint-disable-line no-unused-vars\n      if (this._calculateDuration()) {\n        for (var i = 0; i < this.durationSubs.length; i++) {\n          this.durationSubs[i](this.duration);\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Method called on progress of the timed incident.\n     * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n     * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n     * @param {string} contextId - defaults to the id of the realClip itself. Don't forget that a realClip\n     *      might belong to a selector Clip (so it's a Fragmented Clip), with many \"real\" ClipCopies. All ClipCopies hold\n     *      a reference to this Clip via their \"realClip\" property. Whenever any\n     *      of these ClipCopies progresses (via the onProgress method) calls\n     *      the \"onProgress\" of the realClip, passing their id so the ContextAwareIncidents\n     *      that will also progress via the Channels know which specific Incident to progress.\n     *      That's the result of keeping just one real tree, belonging always to the realClip\n     *      (either Fragmented or Hosted) ending to ContextAwareIncident leafs that\n     *      are the ones to hold the ClipCopies instances.\n     * @param {boolean} forceReset - set to true in cases we want full flash of the state\n     */\n\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (this.contextReady === false) {\n        this.setBlock();\n        return;\n      }\n\n      if (!contextId) {\n        contextId = this.id;\n      }\n\n      for (var key in this.instantiatedChannels) {\n        var channel = this.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, contextId, forceReset);\n      }\n\n      this.onAfterProgress(fraction, milliseconds);\n    }\n  }, {\n    key: \"onAfterProgress\",\n    value: function onAfterProgress(fraction, milliseconds) {}\n  }, {\n    key: \"flash\",\n    value: function flash() {\n      for (var key in this.instantiatedChannels) {\n        var channel = this.instantiatedChannels[key];\n        channel.moveTo(0, this.runTimeInfo.currentMillisecond, this.id, true);\n      }\n    } // duration changes pub/sub\n\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange(method) {\n      this.durationSubs.push(method);\n    }\n    /********************************************************/\n\n    /******** BLOCKING WAITINGS SET / REMOVE ***************/\n\n  }, {\n    key: \"handleSetBlockingWaiting\",\n    value: function handleSetBlockingWaiting(target, payload) {\n      console.log('handling set blocking waiting');\n      console.log(payload);\n    }\n  }, {\n    key: \"handleRemoveBlockingWaiting\",\n    value: function handleRemoveBlockingWaiting(target, payload) {\n      console.log('handling remove blocking waiting');\n      console.log(payload);\n    }\n  }, {\n    key: \"context\",\n    get: function get() {\n      return this.ownContext;\n    }\n  }]);\n\n  return ExtendableClip;\n}(Group);\n\nmodule.exports = ExtendableClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar HTMLFragmentContextHandler = __webpack_require__(/*! ./helpers/HTMLFragmentContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./ExtendableClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar FragmentedClip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(FragmentedClip, _ExtendableClip);\n\n  function FragmentedClip() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, FragmentedClip);\n\n    var attrsToPass, propsToUse;\n    /*\n    backwards compatibility. If the user doesn't pass a second argument on the constructor then this is\n    the new way of initialising a Group (only props).\n    */\n\n    if (oldProps === null) {\n      attrsToPass = {};\n      propsToUse = props;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = props;\n      propsToUse = oldProps;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FragmentedClip).call(this, attrsToPass, propsToUse));\n    var contextHanlder = new HTMLFragmentContextHandler(_objectSpread({}, propsToUse, {\n      html: Object.prototype.hasOwnProperty.call(propsToUse, \"html\") ? propsToUse.html : _this.html,\n      css: Object.prototype.hasOwnProperty.call(propsToUse, \"css\") ? propsToUse.css : _this.css,\n      fonts: Object.prototype.hasOwnProperty.call(propsToUse, \"fonts\") ? propsToUse.fonts : _this.fonts\n    }));\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: false\n    });\n    _this.iframe = contextHanlder.iframeElement;\n    _this.forceExportIncidents = true;\n\n    _this.onDOMCLipInitialise(); // as soon as a Fragmented Clip is been intialised that means the Descriptive\n    // Clip has a selector and not a host. Thus is not a hosted clip\n    // this.isHostedClip = false;\n\n\n    return _this;\n  }\n\n  _createClass(FragmentedClip, [{\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      // TODO also export CSS and fonts taking in account the potential existance\n      // of them on the get methods\n      // console.log(this.ownContext.rootElement.innerHTML);\n      return {\n        attrs: this.attrs,\n        props: _objectSpread({}, this.props, {\n          html: this.ownContext.rootElement.innerHTML\n        })\n      };\n    }\n  }, {\n    key: \"onDOMCLipInitialise\",\n    value: function onDOMCLipInitialise() {// implement here\n    }\n  }, {\n    key: \"rootElement\",\n    get: function get() {\n      return this.ownContext.clipContainer;\n    }\n  }]);\n\n  return FragmentedClip;\n}(ExtendableClip);\n\nmodule.exports = FragmentedClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NullClip =\n/*#__PURE__*/\nfunction () {\n  function NullClip() {\n    _classCallCheck(this, NullClip);\n  }\n\n  _createClass(NullClip, [{\n    key: \"addIncident\",\n    value: function addIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"moveIncident\",\n    value: function moveIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"removeIncident\",\n    value: function removeIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"resizeIncident\",\n    value: function resizeIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"getIncidentsByChannel\",\n    value: function getIncidentsByChannel() {\n      return {};\n    }\n  }, {\n    key: \"flash\",\n    value: function flash() {}\n  }, {\n    key: \"_resize\",\n    value: function _resize() {}\n  }, {\n    key: \"onProgress\",\n    value: function onProgress() {}\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return 0;\n    }\n  }]);\n\n  return NullClip;\n}();\n\nmodule.exports = NullClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvTnVsbENsaXAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvTnVsbENsaXAuanM/YmRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgTnVsbENsaXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOdWxsQ2xpcCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTnVsbENsaXApO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE51bGxDbGlwLCBbe1xuICAgIGtleTogXCJhZGRJbmNpZGVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRJbmNpZGVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogdHJ1ZSxcbiAgICAgICAgZXhlY3V0ZTogZnVuY3Rpb24gZXhlY3V0ZSgpIHt9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3ZlSW5jaWRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZUluY2lkZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge31cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZUluY2lkZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUluY2lkZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge31cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2l6ZUluY2lkZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZUluY2lkZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge31cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEluY2lkZW50c0J5Q2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbmNpZGVudHNCeUNoYW5uZWwoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZsYXNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZsYXNoKCkge31cbiAgfSwge1xuICAgIGtleTogXCJfcmVzaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNpemUoKSB7fVxuICB9LCB7XG4gICAga2V5OiBcIm9uUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcygpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwiZHVyYXRpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOdWxsQ2xpcDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdWxsQ2xpcDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar DescriptiveGroup = __webpack_require__(/*! ../DescriptiveIncidents/DescriptiveGroup */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Playable =\n/*#__PURE__*/\nfunction (_DescriptiveGroup) {\n  _inherits(Playable, _DescriptiveGroup);\n\n  function Playable(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, Playable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Playable).call(this, attrs, props));\n    _this.runTimeInfo = {\n      currentMillisecond: 0,\n      state: 'idle' // supported states: idle, playing, paused, blocked, armed\n\n    };\n    /**\n      @member {object} - listeners are functions to be executed on time change of the Clip.\n      It has the following format:\n     listeners: {\n        listener_id: {\n                 funct : the function to be executed\n                 threshold : the threshold of delta\n                 roundTo : round millisecond\n             },\n             listener_id: {\n                 funct : the function to be executed\n                 threshold : the threshold of delta\n                 roundTo : round millisecond\n             },\n             ...\n       }\n       */\n\n    _this.listeners = {}; // previousTimeStamp is a property holding the last timestamp that the\n    // requestAnimationFrame ran\n\n    _this.previousTimeStamp = -1;\n    _this.speed = 1;\n    return _this;\n  }\n  /*********************** execution methods  *********************\n   ****************************************************************/\n\n\n  _createClass(Playable, [{\n    key: \"_setState\",\n    value: function _setState(newState) {\n      if (newState != this.runTimeInfo.state) {\n        this.runTimeInfo.state = newState; // the only timer and the only responsible for Clip execution is the Clip\n        // All Incidents contained on a Clip are been executed by the Clip itself via its channels.\n        // Thus, the only Incidents that need to know about the state of the root Clip\n        // at any time are only the Clips\n\n        this.putMessageOnPipe('setState', newState, 'Clips', {\n          selfExecute: false,\n          direction: _TREECONST._DIRECTIONS._DOWN\n        });\n\n        for (var key in this.listeners) {\n          var listner = this.listeners[key];\n          listner.funct(this.runTimeInfo.currentMillisecond, newState);\n        }\n      }\n    }\n  }, {\n    key: \"handleSetState\",\n    value: function handleSetState(target, payload) {\n      this._setState(payload);\n    } // execution methods\n\n  }, {\n    key: \"play\",\n    value: function play() {\n      var _this2 = this;\n\n      var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.runTimeInfo.state === 'idle' || this.runTimeInfo.state === 'paused' || this.runTimeInfo.state === 'armed' || this.runTimeInfo.state === 'transitional' || this.runTimeInfo.state === \"blocked\") {\n        if (this.runTimeInfo.state === 'paused') {\n          var delta = new Date().getTime() - this.pauseMoment;\n          this.previousTimeStamp += delta;\n        }\n\n        this._setState('playing');\n\n        this.onPlay();\n\n        if (debug === false) {\n          window.requestAnimationFrame(function (timestamp) {\n            _this2.step(timestamp);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.runTimeInfo.state === 'playing') {\n        this._setState('paused');\n\n        this.pauseMoment = new Date().getTime();\n        this.onWait();\n      }\n    }\n    /* armed state means the Clip is on paused state after transition */\n\n  }, {\n    key: \"arm\",\n    value: function arm() {\n      if (this.runTimeInfo.state === 'transitional') {\n        this._setState('armed');\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this._setState('idle');\n\n      this.previousTimeStamp = -1;\n    }\n    /* in order to start a journey via the TimeCapsule the Playable needs first to stop */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._setState('transitional');\n\n      this.previousTimeStamp = -1;\n    }\n  }, {\n    key: \"block\",\n    value: function block() {\n      this._setState('blocked');\n\n      this.previousTimeStamp = -1;\n    }\n  }, {\n    key: \"onPlay\",\n    value: function onPlay() {}\n  }, {\n    key: \"onWait\",\n    value: function onWait() {}\n  }, {\n    key: \"playableProgress\",\n    value: function playableProgress(fraction, millisecond) {\n      if (this.isTheRootClip) {\n        for (var key in this.listeners) {\n          var listner = this.listeners[key]; // if the listener is only for state change continue\n\n          if (listner.onlyOnStateChange === true) {\n            continue;\n          } // console.log(`Math.abs(${milliseconds} + ${listner.cavaDelta} - ${this.runTimeInfo.currentMillisecond}) > ${listner.threshold}`);\n\n\n          if (Math.abs(millisecond + listner.cavaDelta - this.runTimeInfo.currentMillisecond) > listner.threshold) {\n            listner.funct(helper.roundNumberTo(millisecond, listner.roundTo), this.runTimeInfo.state);\n            listner.cavaDelta = 0;\n          } else {\n            listner.cavaDelta += Math.abs(millisecond - this.runTimeInfo.currentMillisecond);\n          }\n        }\n\n        this.onProgress(fraction, millisecond);\n        this.runTimeInfo.currentMillisecond = millisecond;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"step\",\n    // *******************************************************\n    // STEP FUNCTION\n    value: function step(timestamp) {\n      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.runTimeInfo.state !== 'playing') {\n        return;\n      }\n\n      var that = this;\n\n      if (this.previousTimeStamp === -1) {\n        this.previousTimeStamp = timestamp;\n      } // progressStep is the progress made from previousTimeStamp both in milliseconds and in fraction [0 to 1]\n\n\n      var progress = {\n        milliseconds: Math.round(this.runTimeInfo.currentMillisecond + (timestamp - this.previousTimeStamp) * this.speed),\n        fraction: (this.runTimeInfo.currentMillisecond + (timestamp - this.previousTimeStamp) * this.speed) / this.duration\n      };\n\n      if (progress.fraction >= 1) {\n        this.playableProgress(1, this.duration);\n        this.complete();\n        return;\n      } else if (progress.fraction < 0) {\n        this.playableProgress(0, 0);\n        this.complete(); // this.broadcastEvent('state-change', { oldState: \"playing\", newState: \"idle\" });\n\n        return;\n      }\n\n      this.playableProgress(progress.fraction, progress.milliseconds);\n      this.previousTimeStamp = timestamp;\n\n      if (debug === false) {\n        window.requestAnimationFrame(that.step.bind(that));\n      }\n    } // ************ PUB SUB ********************\n    // *****************************************\n\n    /**\n      By subscribing a module can get notified about changes on the Clip's time\n      subscribe method subscribes a function to the time change dispatcher. As Clip uses requestAnimationFrame for its timing\n      each cyrcle / step gets the current time and subtracts the previous time so it know how many milliseconds has elapsed\n      since last step. Subscribers can set to get informed about time changes only if the delta is greater than a given\n      number (e.g. greater than 300ms). That property is passed as the second argument \"threshold\".\n      Finally if any of the subscribers want the Scene to provide back a rounded number of the milliseconds. Options:\n        - 1 (round it on its actual units\n       - 10 (round it on tenths)\n       - 100 (round it on hundreds)\n       - 1000 (round it on thousands)\n      the first argument provides an id to the listener for future reference (deletion etc)\n      the second argument is a function that takes two arguments: millisecond, state (current millisecond of the Scene\n      and the state of it  */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(id, funct, threshold, roundTo) {\n      var onlyOnStateChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (!threshold) {\n        threshold = 0;\n      }\n\n      if (!roundTo) {\n        roundTo = 1; // round second to its units, meaning leave it as it is\n      }\n\n      this.listeners[id] = {\n        funct: funct,\n        threshold: threshold,\n        roundTo: roundTo,\n        cavaDelta: 0,\n        onlyOnStateChange: onlyOnStateChange\n      };\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      if (Object.prototype.hasOwnProperty.call(this.listeners, id)) {\n        delete this.listeners[id];\n      }\n    }\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange(funct) {\n      if (this.isTheRootClip) {\n        this.realClip.subscribeToDurationChange(funct);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"executionSpeed\",\n    set: function set(speed) {\n      if (!this.isTheRootClip) {\n        return false;\n      }\n\n      this.speed = parseFloat(speed);\n    }\n  }]);\n\n  return Playable;\n}(DescriptiveGroup);\n\nmodule.exports = Playable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/*\ndna: {\n    host\n    descriptiveIncident\n}\n*/\n\nvar ClipClone =\n/*#__PURE__*/\nfunction () {\n  function ClipClone(dna) {\n    _classCallCheck(this, ClipClone);\n\n    this.runTimeInfo = {\n      currentMillisecond: 0,\n      state: 'transitional'\n    };\n    this.id = helper.getAnId();\n    this.realClip = dna.descriptiveIncident.realClip; // In order to render itself on the given element first it needs the props (including html and css)\n    // from the real Clip it copies\n\n    var constructionArgs = dna.descriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip\n\n    var hostedProps = _objectSpread({}, constructionArgs.props, {\n      selector: undefined,\n      host: dna.host,\n      id: this.id\n    }); // we create a clip because Clips on creation render and thus have their own context\n\n\n    this.ownClip = new dna.descriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps); // flushes the realClip with its ownClip's context\n\n    dna.descriptiveIncident.realClip.addContext({\n      clipId: this.id,\n      context: this.ownClip.ownContext,\n      synchronize: dna.synchronize,\n      runTimeInfo: this.runTimeInfo\n    }, true);\n  }\n\n  _createClass(ClipClone, [{\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds) {\n      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      for (var key in this.realClip.instantiatedChannels) {\n        var channel = this.realClip.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, true);\n      }\n\n      this.runTimeInfo.currentMillisecond = milliseconds;\n    }\n  }]);\n\n  return ClipClone;\n}();\n\nmodule.exports = ClipClone;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvUm9vdENsaXBDbG9uZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9Sb290Q2xpcENsb25lLmpzPzIwNzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcbi8qXG5kbmE6IHtcbiAgICBob3N0XG4gICAgZGVzY3JpcHRpdmVJbmNpZGVudFxufVxuKi9cblxudmFyIENsaXBDbG9uZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENsaXBDbG9uZShkbmEpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2xpcENsb25lKTtcblxuICAgIHRoaXMucnVuVGltZUluZm8gPSB7XG4gICAgICBjdXJyZW50TWlsbGlzZWNvbmQ6IDAsXG4gICAgICBzdGF0ZTogJ3RyYW5zaXRpb25hbCdcbiAgICB9O1xuICAgIHRoaXMuaWQgPSBoZWxwZXIuZ2V0QW5JZCgpO1xuICAgIHRoaXMucmVhbENsaXAgPSBkbmEuZGVzY3JpcHRpdmVJbmNpZGVudC5yZWFsQ2xpcDsgLy8gSW4gb3JkZXIgdG8gcmVuZGVyIGl0c2VsZiBvbiB0aGUgZ2l2ZW4gZWxlbWVudCBmaXJzdCBpdCBuZWVkcyB0aGUgcHJvcHMgKGluY2x1ZGluZyBodG1sIGFuZCBjc3MpXG4gICAgLy8gZnJvbSB0aGUgcmVhbCBDbGlwIGl0IGNvcGllc1xuXG4gICAgdmFyIGNvbnN0cnVjdGlvbkFyZ3MgPSBkbmEuZGVzY3JpcHRpdmVJbmNpZGVudC5yZWFsQ2xpcC5leHBvcnRDb25zdHJ1Y3Rpb25Bcmd1bWVudHMoKTsgLy8gaXQgcHJvcGVybHkgc2V0cyBpdHMgb3duIGhvc3Qgb24gdGhlIHByb3BzIHRvIHVzZSB0byBpbml0aWFsaXNlIGl0cyBvd24gY2xpcFxuXG4gICAgdmFyIGhvc3RlZFByb3BzID0gX29iamVjdFNwcmVhZCh7fSwgY29uc3RydWN0aW9uQXJncy5wcm9wcywge1xuICAgICAgc2VsZWN0b3I6IHVuZGVmaW5lZCxcbiAgICAgIGhvc3Q6IGRuYS5ob3N0LFxuICAgICAgaWQ6IHRoaXMuaWRcbiAgICB9KTsgLy8gd2UgY3JlYXRlIGEgY2xpcCBiZWNhdXNlIENsaXBzIG9uIGNyZWF0aW9uIHJlbmRlciBhbmQgdGh1cyBoYXZlIHRoZWlyIG93biBjb250ZXh0XG5cblxuICAgIHRoaXMub3duQ2xpcCA9IG5ldyBkbmEuZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5JbmNpZGVudChjb25zdHJ1Y3Rpb25BcmdzLmF0dHJzLCBob3N0ZWRQcm9wcyk7IC8vIGZsdXNoZXMgdGhlIHJlYWxDbGlwIHdpdGggaXRzIG93bkNsaXAncyBjb250ZXh0XG5cbiAgICBkbmEuZGVzY3JpcHRpdmVJbmNpZGVudC5yZWFsQ2xpcC5hZGRDb250ZXh0KHtcbiAgICAgIGNsaXBJZDogdGhpcy5pZCxcbiAgICAgIGNvbnRleHQ6IHRoaXMub3duQ2xpcC5vd25Db250ZXh0LFxuICAgICAgc3luY2hyb25pemU6IGRuYS5zeW5jaHJvbml6ZSxcbiAgICAgIHJ1blRpbWVJbmZvOiB0aGlzLnJ1blRpbWVJbmZvXG4gICAgfSwgdHJ1ZSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2xpcENsb25lLCBbe1xuICAgIGtleTogXCJvblByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3MoZnJhY3Rpb24sIG1pbGxpc2Vjb25kcykge1xuICAgICAgdmFyIGZvcmNlUmVzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5yZWFsQ2xpcC5pbnN0YW50aWF0ZWRDaGFubmVscykge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMucmVhbENsaXAuaW5zdGFudGlhdGVkQ2hhbm5lbHNba2V5XTtcbiAgICAgICAgY2hhbm5lbC5tb3ZlVG8odGhpcy5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQsIG1pbGxpc2Vjb25kcywgdGhpcy5pZCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVuVGltZUluZm8uY3VycmVudE1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmRzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDbGlwQ2xvbmU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpcENsb25lOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar conf = __webpack_require__(/*! ../../_configuration/generalConf */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextHandler =\n/*#__PURE__*/\nfunction () {\n  function ContextHandler() {\n    _classCallCheck(this, ContextHandler);\n\n    this.customEntities = {};\n  }\n\n  _createClass(ContextHandler, [{\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {\n        return this.customEntities[mcid];\n      } else if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n        return this.elementsByMCID[mcid];\n      } else {\n        var element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));\n        this.elementsByMCID[mcid] = element;\n        return element;\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(selector) {\n      if (selector.charAt(0) === \"!\") {\n        selector = selector.substr(1);\n\n        if (selector.charAt(0) === \"#\") {\n          return [this.customEntities[selector.substr(1)]];\n        } else if (selector.charAt(0) === \".\") {\n          var toReturn = [];\n\n          for (var key in this.customEntities) {\n            var entity = this.customEntities[key];\n\n            if (entity.classes.indexOf(selector.substr(1)) > -1) {\n              toReturn.push(entity);\n            }\n          }\n\n          return toReturn;\n        }\n      }\n\n      return Array.from(this.context.rootElement.querySelectorAll(selector));\n    }\n  }, {\n    key: \"getMCID\",\n    value: function getMCID(element) {\n      if (element.customEntity === true) {\n        return element.id;\n      }\n\n      return element.getAttribute(conf.elements_data_attribute_name);\n    }\n  }, {\n    key: \"setMCID\",\n    value: function setMCID(element, mcid) {\n      element.setAttribute(conf.elements_data_attribute_name, mcid);\n    }\n  }, {\n    key: \"getElementSelectorByMCID\",\n    value: function getElementSelectorByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.customEntities, mcid)) {\n        return \"!#\".concat(mcid);\n      }\n\n      return '[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]';\n    }\n  }, {\n    key: \"setCustomEntity\",\n    value: function setCustomEntity(id, entity) {\n      var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n      if (Object.prototype.hasOwnProperty.call(this.customEntities, id)) {\n        helper.error(\"Clip \".concat(this.id, \" already has custom Entity with id: \").concat(id));\n        return false;\n      }\n\n      this.customEntities[id] = {\n        id: id,\n        entity: entity,\n        classes: classes,\n        customEntity: true\n      };\n      return true;\n    }\n  }]);\n\n  return ContextHandler;\n}();\n\nmodule.exports = ContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvaGVscGVycy9Db250ZXh0SGFuZGxlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9oZWxwZXJzL0NvbnRleHRIYW5kbGVyLmpzPzNkMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIGNvbmYgPSByZXF1aXJlKCcuLi8uLi9fY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZicpO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIENvbnRleHRIYW5kbGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29udGV4dEhhbmRsZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRleHRIYW5kbGVyKTtcblxuICAgIHRoaXMuY3VzdG9tRW50aXRpZXMgPSB7fTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb250ZXh0SGFuZGxlciwgW3tcbiAgICBrZXk6IFwiZ2V0RWxlbWVudEJ5TUNJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbGVtZW50QnlNQ0lEKG1jaWQpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jdXN0b21FbnRpdGllcywgbWNpZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tRW50aXRpZXNbbWNpZF07XG4gICAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmVsZW1lbnRzQnlNQ0lELCBtY2lkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c0J5TUNJRFttY2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5jb250ZXh0LnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5nZXRFbGVtZW50U2VsZWN0b3JCeU1DSUQobWNpZCkpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzQnlNQ0lEW21jaWRdID0gZWxlbWVudDtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IuY2hhckF0KDApID09PSBcIiFcIikge1xuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cigxKTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgICAgIHJldHVybiBbdGhpcy5jdXN0b21FbnRpdGllc1tzZWxlY3Rvci5zdWJzdHIoMSldXTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rvci5jaGFyQXQoMCkgPT09IFwiLlwiKSB7XG4gICAgICAgICAgdmFyIHRvUmV0dXJuID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jdXN0b21FbnRpdGllcykge1xuICAgICAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuY3VzdG9tRW50aXRpZXNba2V5XTtcblxuICAgICAgICAgICAgaWYgKGVudGl0eS5jbGFzc2VzLmluZGV4T2Yoc2VsZWN0b3Iuc3Vic3RyKDEpKSA+IC0xKSB7XG4gICAgICAgICAgICAgIHRvUmV0dXJuLnB1c2goZW50aXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdG9SZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jb250ZXh0LnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TUNJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNQ0lEKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50LmN1c3RvbUVudGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5pZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKGNvbmYuZWxlbWVudHNfZGF0YV9hdHRyaWJ1dGVfbmFtZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldE1DSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TUNJRChlbGVtZW50LCBtY2lkKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShjb25mLmVsZW1lbnRzX2RhdGFfYXR0cmlidXRlX25hbWUsIG1jaWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFbGVtZW50U2VsZWN0b3JCeU1DSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lEKG1jaWQpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jdXN0b21FbnRpdGllcywgbWNpZCkpIHtcbiAgICAgICAgcmV0dXJuIFwiISNcIi5jb25jYXQobWNpZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnWycgKyBjb25mLmVsZW1lbnRzX2RhdGFfYXR0cmlidXRlX25hbWUgKyAnPVwiJyArIG1jaWQgKyAnXCJdJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Q3VzdG9tRW50aXR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1c3RvbUVudGl0eShpZCwgZW50aXR5KSB7XG4gICAgICB2YXIgY2xhc3NlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG5cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jdXN0b21FbnRpdGllcywgaWQpKSB7XG4gICAgICAgIGhlbHBlci5lcnJvcihcIkNsaXAgXCIuY29uY2F0KHRoaXMuaWQsIFwiIGFscmVhZHkgaGFzIGN1c3RvbSBFbnRpdHkgd2l0aCBpZDogXCIpLmNvbmNhdChpZCkpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3VzdG9tRW50aXRpZXNbaWRdID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGVudGl0eTogZW50aXR5LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICBjdXN0b21FbnRpdHk6IHRydWVcbiAgICAgIH07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29udGV4dEhhbmRsZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGV4dEhhbmRsZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextHandler = __webpack_require__(/*! ./ContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js\");\n\nvar HTMLFragmentContextHandler =\n/*#__PURE__*/\nfunction (_ContextHandler) {\n  _inherits(HTMLFragmentContextHandler, _ContextHandler);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function HTMLFragmentContextHandler() {\n    var _this;\n\n    var originalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HTMLFragmentContextHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLFragmentContextHandler).call(this));\n    var props = Object.assign({}, originalProps);\n\n    if (!helper.isObject(props)) {\n      helper.error(\"HTMLFragmentContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"html\")) {\n      props.html = '';\n    }\n\n    _this.isDOM = true;\n    var fragment = document.createDocumentFragment();\n    var wrapper = document.createElement('div');\n\n    if (Object.prototype.hasOwnProperty.call(props, \"containerParams\")) {\n      if (Object.prototype.hasOwnProperty.call(props, \"width\")) {\n        wrapper.style.width = props.containerParams.width;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props, \"height\")) {\n        wrapper.style.height = props.containerParams.height;\n      }\n    }\n\n    wrapper.innerHTML = helper.renderTemplate(props.html, {\n      params: props.initParams\n    });\n    fragment.appendChild(wrapper);\n    wrapper.style.overflow = \"hidden\";\n    _this.rootElement = wrapper;\n    /* TODO make the context definition more generic so always the setCustomEntity gets set\n    along with the rest of the required methods, so it can be used on the afterRender method\n    of the DOMClip.\n    The Clip will expose a method \"setCustomEntity\" that will set custom entities.\n    TEST\n    */\n\n    _this.context = {\n      document: document,\n      window: window,\n      clipContainer: _this.rootElement,\n      rootElement: wrapper,\n      unmount: function unmount() {\n        props.host.removeChild(fragment);\n      },\n      getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n      getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n      setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n      getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n      getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n      setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this)),\n      fragment: true\n    };\n    _this.elementsByMCID = {};\n    return _this;\n  }\n\n  return HTMLFragmentContextHandler;\n}(ContextHandler);\n\nmodule.exports = HTMLFragmentContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NsaXAvaGVscGVycy9IVE1MRnJhZ21lbnRDb250ZXh0SGFuZGxlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9oZWxwZXJzL0hUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyLmpzPzAyZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL19jb3JlVXRpbHMvSGVscGVyJyk7XG5cbnZhciBoZWxwZXIgPSBuZXcgSGVscGVyKCk7XG5cbnZhciBDb250ZXh0SGFuZGxlciA9IHJlcXVpcmUoJy4vQ29udGV4dEhhbmRsZXInKTtcblxudmFyIEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29udGV4dEhhbmRsZXIpIHtcbiAgX2luaGVyaXRzKEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyLCBfQ29udGV4dEhhbmRsZXIpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBhbiBvYmplY3QgdGhhdCBzaG91bGQgY29udGFpbiBhbGwgb2YgdGhlIGZvbGxvd2luZyBrZXlzOlxuICAgKiAtIGh0bWwgKHRoZSBodG1sIHRlbXBsYXRlIHRvIHJlbmRlcilcbiAgICogLSBjc3MgKHRoZSBjc3MgdGVtcGxhdGUgb2YgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gaW5pdFBhcmFtcyAob3B0aW9uYWwgLyB0aGUgaW5pdGlhbGlzYXRpb24gcGFyYW1ldGVyZXMgdGhhdCB3aWxsIGJlIHBhc3NlZCBib3RoIG9uIHRoZSBjc3MgYW5kIHRoZSBodG1sIHRlbXBsYXRlcyBpbiBvcmRlciB0byByZW5kZXIpXG4gICAqIC0gaG9zdCAoYW4gRWxlbWVudCBvYmplY3QgdGhhdCB3aWxsIGhvc3QgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAqIC0gY29udGFpbmVyUGFyYW1zIChhbiBvYmplY3QgdGhhdCBob2xkcyBwYXJhbWV0ZXJzIHRvIGFmZmVjdCB0aGUgY29udGFpbmVyIG9mIHRoZSBpc29sYXRlZCB0cmVlLCBlLmcuIHdpZHRoLCBoZWlnaHQgZXRjKVxuICAgKi9cbiAgZnVuY3Rpb24gSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9yaWdpbmFsUHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyKS5jYWxsKHRoaXMpKTtcbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbFByb3BzKTtcblxuICAgIGlmICghaGVscGVyLmlzT2JqZWN0KHByb3BzKSkge1xuICAgICAgaGVscGVyLmVycm9yKFwiSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIgZXhwZWN0cyBhbiBvYmplY3Qgb24gaXRzIGNvbnN0cnVjdG9yLiBcIi5jb25jYXQoX3R5cGVvZihwcm9wcyksIFwiIHBhc3NlZFwiKSk7XG4gICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJodG1sXCIpKSB7XG4gICAgICBwcm9wcy5odG1sID0gJyc7XG4gICAgfVxuXG4gICAgX3RoaXMuaXNET00gPSB0cnVlO1xuICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJjb250YWluZXJQYXJhbXNcIikpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIFwid2lkdGhcIikpIHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS53aWR0aCA9IHByb3BzLmNvbnRhaW5lclBhcmFtcy53aWR0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJoZWlnaHRcIikpIHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5oZWlnaHQgPSBwcm9wcy5jb250YWluZXJQYXJhbXMuaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gaGVscGVyLnJlbmRlclRlbXBsYXRlKHByb3BzLmh0bWwsIHtcbiAgICAgIHBhcmFtczogcHJvcHMuaW5pdFBhcmFtc1xuICAgIH0pO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgIHdyYXBwZXIuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgIF90aGlzLnJvb3RFbGVtZW50ID0gd3JhcHBlcjtcbiAgICAvKiBUT0RPIG1ha2UgdGhlIGNvbnRleHQgZGVmaW5pdGlvbiBtb3JlIGdlbmVyaWMgc28gYWx3YXlzIHRoZSBzZXRDdXN0b21FbnRpdHkgZ2V0cyBzZXRcbiAgICBhbG9uZyB3aXRoIHRoZSByZXN0IG9mIHRoZSByZXF1aXJlZCBtZXRob2RzLCBzbyBpdCBjYW4gYmUgdXNlZCBvbiB0aGUgYWZ0ZXJSZW5kZXIgbWV0aG9kXG4gICAgb2YgdGhlIERPTUNsaXAuXG4gICAgVGhlIENsaXAgd2lsbCBleHBvc2UgYSBtZXRob2QgXCJzZXRDdXN0b21FbnRpdHlcIiB0aGF0IHdpbGwgc2V0IGN1c3RvbSBlbnRpdGllcy5cbiAgICBURVNUXG4gICAgKi9cblxuICAgIF90aGlzLmNvbnRleHQgPSB7XG4gICAgICBkb2N1bWVudDogZG9jdW1lbnQsXG4gICAgICB3aW5kb3c6IHdpbmRvdyxcbiAgICAgIGNsaXBDb250YWluZXI6IF90aGlzLnJvb3RFbGVtZW50LFxuICAgICAgcm9vdEVsZW1lbnQ6IHdyYXBwZXIsXG4gICAgICB1bm1vdW50OiBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgICBwcm9wcy5ob3N0LnJlbW92ZUNoaWxkKGZyYWdtZW50KTtcbiAgICAgIH0sXG4gICAgICBnZXRFbGVtZW50czogX3RoaXMuZ2V0RWxlbWVudHMuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksXG4gICAgICBnZXRNQ0lEOiBfdGhpcy5nZXRNQ0lELmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgc2V0TUNJRDogX3RoaXMuc2V0TUNJRC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSxcbiAgICAgIGdldEVsZW1lbnRTZWxlY3RvckJ5TUNJRDogX3RoaXMuZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lELmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgZ2V0RWxlbWVudEJ5TUNJRDogX3RoaXMuZ2V0RWxlbWVudEJ5TUNJRC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSxcbiAgICAgIHNldEN1c3RvbUVudGl0eTogX3RoaXMuc2V0Q3VzdG9tRW50aXR5LmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgZnJhZ21lbnQ6IHRydWVcbiAgICB9O1xuICAgIF90aGlzLmVsZW1lbnRzQnlNQ0lEID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyO1xufShDb250ZXh0SGFuZGxlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/*\niframe[seamless]{\n    background-color: transparent;\n    border: 0px none transparent;\n    padding: 0px;\n    overflow: hidden;\n}\n\nmight need more work for IE. See here: https://stackoverflow.com/a/29209248\n*/\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextHandler = __webpack_require__(/*! ./ContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js\");\n\nvar IframeContextHandler =\n/*#__PURE__*/\nfunction (_ContextHandler) {\n  _inherits(IframeContextHandler, _ContextHandler);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function IframeContextHandler() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, IframeContextHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IframeContextHandler).call(this));\n\n    if (!helper.isObject(props)) {\n      helper.error(\"ContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'html')) {\n      helper.error(\"ContextHandler expects the html key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'css')) {\n      helper.error(\"ContextHandler expects the css key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'initParams')) {\n      helper.info(\"ContextHandler got null initParams\");\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'host')) {\n      helper.error(\"ContextHandler expects the host key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    _this.isDOM = true;\n    var ownerDocument = props.host.ownerDocument;\n\n    if (!ownerDocument.getElementById(\"@kissmybutton/motorcortex/iframeContextHandler/css\")) {\n      var seamlessCSS = \"\\n            iframe[seamless]{\\n                background-color: transparent;\\n                border: 0px none transparent;\\n                padding: 0px;\\n                overflow: hidden;\\n            }\\n            \";\n      var iframesCSS = ownerDocument.createElement('style');\n      iframesCSS.id = \"@kissmybutton/motorcortex/iframeContextHandler/css\";\n      iframesCSS.type = 'text/css';\n      var Head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];\n\n      if (iframesCSS.styleSheet) {\n        iframesCSS.styleSheet.cssText = seamlessCSS;\n      } else {\n        iframesCSS.appendChild(ownerDocument.createTextNode(seamlessCSS));\n      }\n\n      Head.appendChild(iframesCSS);\n    } // Create an iframe:\n\n\n    var iframe = ownerDocument.createElement('iframe');\n    props.host.appendChild(iframe);\n    iframe.setAttribute(\"seamless\", \"seamless\");\n\n    if (Object.prototype.hasOwnProperty.call(props, 'containerParams')) {\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, 'width')) {\n        iframe.setAttribute('width', props.containerParams.width);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, 'height')) {\n        iframe.setAttribute('height', props.containerParams.height);\n      }\n    } // Initialise the iframe\n\n\n    iframe.src = ''; // Put it in the document (but hidden):\n\n    var iframeDocument = iframe.contentWindow || iframe.contentDocument;\n\n    if (iframeDocument.document) {\n      iframeDocument = iframeDocument.document;\n    }\n\n    iframeDocument.write(helper.renderTemplate(props.html, {\n      params: props.initParams\n    }));\n    var bodyFixCSS = \"\\n        body{\\n            padding:0;\\n            margin:0;\\n        }\\n        \";\n    var styleTag = iframeDocument.createElement('style');\n    styleTag.type = 'text/css';\n\n    if (styleTag.styleSheet) {\n      styleTag.styleSheet.cssText = helper.renderTemplate(props.css, {\n        params: props.initParams\n      }) + bodyFixCSS;\n    } else {\n      styleTag.appendChild(ownerDocument.createTextNode(props.css + bodyFixCSS));\n    }\n\n    var head = iframeDocument.head || iframeDocument.getElementsByTagName('head')[0];\n    head.appendChild(styleTag);\n\n    if (Object.prototype.hasOwnProperty.call(props, 'fonts')) {\n      for (var i = 0; i < props.fonts.length; i++) {\n        var theFont = props.fonts[i];\n\n        if (theFont.type === \"google-font\") {\n          var fontTag = iframeDocument.createElement('link');\n          fontTag.setAttribute('rel', 'stylesheet');\n          fontTag.setAttribute('href', theFont.src);\n          head.appendChild(fontTag);\n        }\n      }\n    }\n\n    _this.rootElement = iframe;\n    iframeDocument.close();\n    _this.context = {\n      document: iframeDocument,\n      window: iframe.contentWindow || iframe,\n      clipContainer: iframe,\n      rootElement: iframeDocument.body,\n      unmount: function unmount() {\n        props.host.removeChild(iframe);\n      },\n      getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n      getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n      setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n      getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n      getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n      setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this))\n    };\n    _this.elementsByMCID = {};\n    return _this;\n  }\n\n  return IframeContextHandler;\n}(ContextHandler);\n\nmodule.exports = IframeContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/*\niframe[seamless]{\n    background-color: transparent;\n    border: 0px none transparent;\n    padding: 0px;\n    overflow: hidden;\n}\n\nmight need more work for IE. See here: https://stackoverflow.com/a/29209248\n*/\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextHandler = __webpack_require__(/*! ./ContextHandler */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/ContextHandler.js\");\n\nvar WebComponentContextHandler =\n/*#__PURE__*/\nfunction (_ContextHandler) {\n  _inherits(WebComponentContextHandler, _ContextHandler);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function WebComponentContextHandler() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WebComponentContextHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebComponentContextHandler).call(this));\n\n    if (!helper.isObject(props)) {\n      helper.error(\"ContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"html\")) {\n      helper.error(\"ContextHandler expects the html key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"css\")) {\n      helper.error(\"ContextHandler expects the css key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"host\")) {\n      helper.error(\"ContextHandler expects the host key on its constructor properties which is missing\");\n      return _possibleConstructorReturn(_this, false);\n    }\n\n    _this.isDOM = true;\n    var shadow = props.host.attachShadow({\n      mode: 'closed'\n    });\n    var wrapper = document.createElement('div');\n\n    if (Object.prototype.hasOwnProperty.call(props, \"containerParams\")) {\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, \"width\")) {\n        wrapper.style.width = props.containerParams.width;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, \"height\")) {\n        wrapper.style.height = props.containerParams.height;\n      }\n    }\n\n    wrapper.innerHTML = helper.renderTemplate(props.html + '<slot></slot>', {\n      params: props.initParams\n    });\n    shadow.appendChild(wrapper);\n    var styleTag = document.createElement('style');\n    styleTag.type = 'text/css';\n\n    if (styleTag.styleSheet) {\n      styleTag.styleSheet.cssText = helper.renderTemplate(props.css, {\n        params: props.initParams\n      });\n    } else {\n      styleTag.appendChild(document.createTextNode(props.css));\n    }\n\n    shadow.appendChild(styleTag);\n    _this.fontTags = [];\n\n    if (Object.prototype.hasOwnProperty.call(props, \"fonts\")) {\n      for (var i = 0; i < props.fonts.length; i++) {\n        var theFont = props.fonts[i];\n\n        if (theFont.type === \"google-font\") {\n          var fontTag = document.createElement('link');\n          fontTag.setAttribute('rel', 'stylesheet');\n          fontTag.setAttribute('href', theFont.src);\n          document.getElementsByTagName('head')[0].appendChild(fontTag);\n\n          _this.fontTags.push(fontTag);\n        }\n      }\n    }\n\n    wrapper.style.overflow = \"hidden\";\n    _this.rootElement = wrapper;\n    _this.context = {\n      document: document,\n      window: window,\n      clipContainer: _this.rootElement,\n      rootElement: wrapper,\n      unmount: function unmount() {\n        try {\n          props.host.removeChild(shadow);\n\n          for (var _i = 0; _i < this.fontTags.length; _i++) {\n            document.getElementsByTagName('head')[0].removeChild(this.fontTags[_i]);\n          }\n        } catch (er) {\n          helper.warning('The element of the Clip to be removed seems not to exist any more');\n        }\n      },\n      getElements: _this.getElements.bind(_assertThisInitialized(_this)),\n      getMCID: _this.getMCID.bind(_assertThisInitialized(_this)),\n      setMCID: _this.setMCID.bind(_assertThisInitialized(_this)),\n      getElementSelectorByMCID: _this.getElementSelectorByMCID.bind(_assertThisInitialized(_this)),\n      getElementByMCID: _this.getElementByMCID.bind(_assertThisInitialized(_this)),\n      setCustomEntity: _this.setCustomEntity.bind(_assertThisInitialized(_this))\n    };\n    _this.elementsByMCID = {};\n    return _this;\n  }\n\n  return WebComponentContextHandler;\n}(ContextHandler);\n\nmodule.exports = WebComponentContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar DescriptiveClip = __webpack_require__(/*! ./DescriptiveClip */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\");\n\nvar DescriptiveAudioClip =\n/*#__PURE__*/\nfunction (_DescriptiveClip) {\n  _inherits(DescriptiveAudioClip, _DescriptiveClip);\n\n  function DescriptiveAudioClip(audioSources) {\n    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, DescriptiveAudioClip);\n\n    var propsToPass = {\n      audio: 'only',\n      audioSources: audioSources\n    };\n\n    if (id !== null) {\n      propsToPass.id = id;\n    }\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveAudioClip).call(this, propsToPass));\n  }\n\n  return DescriptiveAudioClip;\n}(DescriptiveClip);\n\nmodule.exports = DescriptiveAudioClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL0Rlc2NyaXB0aXZlQXVkaW9DbGlwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9EZXNjcmlwdGl2ZUF1ZGlvQ2xpcC5qcz9iY2VkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBEZXNjcmlwdGl2ZUNsaXAgPSByZXF1aXJlKCcuL0Rlc2NyaXB0aXZlQ2xpcCcpO1xuXG52YXIgRGVzY3JpcHRpdmVBdWRpb0NsaXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9EZXNjcmlwdGl2ZUNsaXApIHtcbiAgX2luaGVyaXRzKERlc2NyaXB0aXZlQXVkaW9DbGlwLCBfRGVzY3JpcHRpdmVDbGlwKTtcblxuICBmdW5jdGlvbiBEZXNjcmlwdGl2ZUF1ZGlvQ2xpcChhdWRpb1NvdXJjZXMpIHtcbiAgICB2YXIgaWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVzY3JpcHRpdmVBdWRpb0NsaXApO1xuXG4gICAgdmFyIHByb3BzVG9QYXNzID0ge1xuICAgICAgYXVkaW86ICdvbmx5JyxcbiAgICAgIGF1ZGlvU291cmNlczogYXVkaW9Tb3VyY2VzXG4gICAgfTtcblxuICAgIGlmIChpZCAhPT0gbnVsbCkge1xuICAgICAgcHJvcHNUb1Bhc3MuaWQgPSBpZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKERlc2NyaXB0aXZlQXVkaW9DbGlwKS5jYWxsKHRoaXMsIHByb3BzVG9QYXNzKSk7XG4gIH1cblxuICByZXR1cm4gRGVzY3JpcHRpdmVBdWRpb0NsaXA7XG59KERlc2NyaXB0aXZlQ2xpcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVzY3JpcHRpdmVBdWRpb0NsaXA7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Playable = __webpack_require__(/*! ../Clip/Playable */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar FragmentedClip = __webpack_require__(/*! ../Clip/FragmentedClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js\");\n\nvar Clip = __webpack_require__(/*! ../Clip/DOMClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Clip/ClipsChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar ClipClone = __webpack_require__(/*! ../Clip/RootClipClone */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js\");\n\nvar AudioClip = __webpack_require__(/*! ../Audio/AudioClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\");\n\nvar NullClip = __webpack_require__(/*! ../Clip/NullClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js\");\n\nvar rules = __webpack_require__(/*! ../_configuration/propsValidationRules */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/propsValidationRules.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/**\n * Along with the expected props for the Clip on the props support the audio key.\n * The audio can take one of the 3 following values:\n * - \"on\": The Clip has audio enabled\n * - \"off\": The Clip has audio disabled\n * - \"only\": The Clip is only audio\n *\n * Also, in the case audio is on or only the user should pass the \"audioSources\"\n * key containing all the audio sources they want to pass on the Audio Context\n * of their clip. Please check AudioClip for details on the expected format\n **/\n\nvar DescriptiveClip =\n/*#__PURE__*/\nfunction (_Playable) {\n  _inherits(DescriptiveClip, _Playable);\n\n  function DescriptiveClip(attrs) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, DescriptiveClip);\n\n    var attrsToPass, propsToUse;\n\n    if (props === null) {\n      attrsToPass = {};\n      propsToUse = attrs;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = attrs;\n      propsToUse = props;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveClip).call(this, attrsToPass, propsToUse));\n\n    var propsValidation = _this._validateProps();\n\n    if (propsValidation.result === false) {\n      return _possibleConstructorReturn(_this, propsValidation);\n    } // isTheRootClip defines whether the Clip is the root or not. It depends on\n    // the host or selector parameter passed on props (if host is present then\n    // the Clip is the root Clip while if the Clip gets initialised by a selector\n    // is not)\n\n\n    _this.isTheRootClip = false; // check if\n\n    var ingredients = {\n      id: _this.id,\n      attrs: attrsToPass,\n      props: _objectSpread({}, propsToUse, {\n        html: Object.prototype.hasOwnProperty.call(propsToUse, \"html\") ? propsToUse.html : _this.html,\n        css: Object.prototype.hasOwnProperty.call(propsToUse, \"css\") ? propsToUse.css : _this.css,\n        fonts: Object.prototype.hasOwnProperty.call(propsToUse, \"fonts\") ? propsToUse.fonts : _this.fonts,\n        runTimeInfo: _this.runTimeInfo,\n        subscribe: _this.subscribe.bind(_assertThisInitialized(_this))\n      }),\n      plugin_npm_name: _this.constructor.plugin_npm_name,\n      Channel: _this.constructor.Channel,\n      DescriptiveIncident: _assertThisInitialized(_this)\n    }; // Decide what kind of audio (or non-audio) Clip we are dealing with\n\n    _this.audio = \"on\";\n\n    if (Object.prototype.hasOwnProperty.call(_this.constructor, 'audio')) {\n      _this.audio = _this.constructor.audio;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(propsToUse, 'audio')) {\n      _this.audio = propsToUse.audio;\n    } // decide if this is the root clip\n\n\n    if (Object.prototype.hasOwnProperty.call(propsToUse, \"selector\") && propsToUse.selector !== undefined && _this.constructor.customClip !== true) {\n      ingredients.Incident = FragmentedClip; // TODO it doesn't take in account the get html and get css of the Descriptive Clip\n    } else if (Object.prototype.hasOwnProperty.call(propsToUse, \"selector\") && propsToUse.selector !== undefined && _this.constructor.customClip === true) {\n      delete ingredients.props.selector;\n      var FragmentWrapper = new FragmentedClip({\n        html: '<div id=\"clip-container\"></div>'\n      });\n      ingredients.props.host = FragmentWrapper.rootElement;\n      ingredients.Incident = _this.constructor.Incident;\n    } else if (_this.audio === \"only\" && _this.props.root !== true) {\n      // audioClips can never be the root\n      _this.isTheRootClip = false;\n    } else {\n      _this.isTheRootClip = true;\n      /*\n      blockingWaitings are been triggered by Incidents when there is the\n      need to halt the Clip's execution and wait. As an example a blocking\n      waiting can be set by an Audio Playback Incident when the audio has\n      not been loaded yet.\n      Each blocking waiting has an id and via the same id the waiting can be\n      unblocked.\n      The blockingWaitings property of the root Clip is a collection with\n      keys the blocking waitings ids and values the description of each waiting\n      which consists of:\n      {\n          id\n          description\n          incidentId\n      }\n      The blocking waitings are triggered by real Incidents living on the real\n      Clips of the Descriptive Clip (either the audioClip or the realClip).\n      The root that a waiting set or unset follows is from any real incident\n      up to its ContextAware Incident and from there\n      up to the real Clip and from thre to its DescriptiveTree and from there\n      all the way up to the root Descriptive Clip.\n      Blocking waitings must always be triggered on the \"onProgress\" or on\n      the \"play\" methods of Incidents. Setting a blocking waiting from anywhere\n      else is an error\n      */\n\n      _this.blockingWaitings = {};\n      ingredients.Incident = _this.constructor.Incident;\n    } // we initialise real and audio clips of the Clip by checking the static audio\n    // property\n    // the property this.audio helps incidentFromDescription identify if the Incident\n    // participates or not on the audioClip. By default is \"on\" but if the props.audio is set to off\n    // it turns to \"off\" so the DC gets totally ignored on the addition process on audio clip\n\n    /* The audio value is set in the following manner\n        - first we check if the Class has a static audio parameter and if yes we keep it\n        - then we check if this.props has the audio key and if yes we keep this one\n        - otherwise we use the default (\"on\")\n    */\n\n\n    if (_this.audio === 'on' || _this.audio === 'off') {\n      _this.realClip = incidentFromIngredients(ingredients);\n    } else {\n      _this.realClip = new NullClip();\n    }\n\n    if (_this.audio === 'on' || _this.audio === 'only') {\n      var audioIngredients = {\n        id: _this.id,\n        attrs: {},\n        props: {\n          audioSources: Object.prototype.hasOwnProperty.call(propsToUse, \"audioSources\") ? propsToUse.audioSources : _this.audioSources,\n          runTimeInfo: _this.runTimeInfo,\n          subscribe: _this.subscribe.bind(_assertThisInitialized(_this))\n        },\n        plugin_npm_name: _this.constructor.plugin_npm_name,\n        Channel: _this.constructor.Channel,\n        Incident: AudioClip,\n        DescriptiveIncident: _assertThisInitialized(_this)\n      };\n      _this.audioClip = incidentFromIngredients(audioIngredients);\n    } else {\n      _this.audio = \"off\";\n      _this.audioClip = new NullClip();\n    } // passiveAddition is a flag property indicating that any Incident to be\n    // added to the Clip will be passive. It initialises with value = false\n    // on DescriptiveGroup where it's originaly defined.\n    // Here we change its value just before the buildTree method execution\n    // so all Incidents added on it get the \"passive\" flag and don't get\n    // exported on the exportDefinition method. Once the buildTree method\n    // finishes we set it back to its original value (false)\n\n\n    _this.passiveAddition = true;\n\n    _this._buildTree();\n\n    _this.passiveAddition = false;\n    return _this;\n  }\n\n  _createClass(DescriptiveClip, [{\n    key: \"_validateProps\",\n    value: function _validateProps() {\n      return helper.validateProps({\n        props: this.props\n      }, rules.clipPropsRule, this.constructor);\n    }\n  }, {\n    key: \"_buildTree\",\n\n    /*\n    the _buildTree method acts as a proxy to the buildTree method defined by the\n    developers. The reason for this is that the actual buildTree method should\n    be executed in different order on Groups and on Clips (that extend Groups).\n    Calling the super on constructor fires the _buildTree execution on the\n    Group's constructor but this breaks on Clip as the realClip has not been\n    initialised yet.\n    */\n    value: function _buildTree() {\n      if (this.realClip === undefined) {\n        return;\n      }\n\n      this.buildTree();\n    }\n    /**\n     * When the resize command is given directly to a DescriptiveClip no checks\n     * need to be performed.\n     * DescriptiveClip directly invokes the _resize method of ExtendableClip which\n     * resizes the full clip\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(newSize) {\n      this.realClip._resize(newSize / this.duration);\n\n      this.audioClip._resize(newSize / this.duration);\n\n      this.duration = newSize;\n      this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n      this.putMessageOnPipe('flash', {}, 'RootClip', {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n      return {\n        result: true\n      };\n    }\n    /*************************** HANDLING METHODS *******************************/\n\n  }, {\n    key: \"handleCheckForClip\",\n    value: function handleCheckForClip(target, payload) {\n      // eslint-disable-line no-unused-vars\n      return true;\n    }\n  }, {\n    key: \"handleCheckAddition\",\n    value: function handleCheckAddition(target, payload) {\n      /* Is the responsibility of the DescriptiveClip to pass the addition request\n      to its real clip and expect for a response. */\n      var res = this.realClip.addIncident(payload);\n      var audioRes = this.audioClip.addIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckMove\",\n    value: function handleCheckMove(target, payload) {\n      var res = this.realClip.moveIncident(payload);\n      var audioRes = this.audioClip.moveIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckDeletion\",\n    value: function handleCheckDeletion(target, payload) {\n      var res = this.realClip.removeIncident(payload);\n      var audioRes = this.audioClip.removeIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckResize\",\n    value: function handleCheckResize(target, payload) {\n      var res = this.realClip.resizeIncident(payload);\n      var audioRes = this.audioClip.resizeIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleFlash\",\n    value: function handleFlash(target, payload) {\n      // eslint-disable-line no-unused-vars\n      if (this.isTheRootClip) {\n        this.flash();\n      } else {\n        return this.bypass();\n      }\n    }\n    /****************** BLOCKING WAITINGS HANDLING **************************/\n\n    /***********************************************************************/\n\n  }, {\n    key: \"handleSetBlock\",\n    value: function handleSetBlock(target, payload) {\n      // only accepts blocks if is the root clip and if it's playing\n      if (this.isTheRootClip) {\n        if (this.runTimeInfo.state === \"transitional\") {\n          return;\n        }\n\n        if (this.runTimeInfo.state !== 'blocked') {\n          this.statusBeforeBlock = this.runTimeInfo.state;\n        }\n\n        this.blockingWaitings[payload.id] = payload;\n        this.block();\n      } else {\n        return this.bypass();\n      }\n    }\n  }, {\n    key: \"handleUnBlock\",\n    value: function handleUnBlock(target, payload) {\n      if (this.isTheRootClip) {\n        if (Object.prototype.hasOwnProperty.call(this.blockingWaitings, payload.id)) {\n          delete this.blockingWaitings[payload.id];\n\n          if (Object.keys(this.blockingWaitings).length === 0) {\n            if (this.statusBeforeBlock === \"playing\") {\n              this.previousTimeStamp = -1;\n              this.play();\n            } else {\n              this.arm();\n            }\n          }\n        }\n      } else {\n        return this.bypass();\n      }\n    }\n    /* empty blocking waitings on transition start */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      _get(_getPrototypeOf(DescriptiveClip.prototype), \"stop\", this).call(this);\n\n      this.blockingWaitings = {};\n    }\n    /***********************************************************************/\n\n    /***********************************************************************/\n\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, millisecond) {\n      this.realClip.onProgress(fraction, millisecond);\n      this.audioClip.onProgress(fraction, millisecond);\n    }\n    /*************************************************************/\n\n  }, {\n    key: \"paste\",\n    value: function paste(host) {\n      if (this.isTheRootClip) {\n        var clipClone = new ClipClone({\n          host: host,\n          descriptiveIncident: this\n        });\n        return clipClone;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"flash\",\n    value: function flash() {\n      this.realClip.flash();\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(vol) {\n      if (vol < 0 || vol > 1) {\n        return {\n          result: false,\n          errors: [{\n            type: 'invalid volume number'\n          }]\n        };\n      } else if (this.audio === 'off') {\n        return {\n          result: false,\n          errors: [{\n            type: 'can not set volume of Clip with audio off'\n          }]\n        };\n      } else {\n        this.audioClip.setVolume(vol);\n        return {\n          result: true\n        };\n      }\n    }\n  }, {\n    key: \"selectorToPassToChildren\",\n    get: function get() {\n      return null; // the Clip (any Clip) resets the selection cascading\n    }\n  }, {\n    key: \"inheritedSelector\",\n    get: function get() {\n      return this._inheritedSelector;\n    },\n    set: function set(value) {\n      this._inheritedSelector = value;\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"css\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"fonts\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"audioSources\",\n    get: function get() {\n      return [];\n    }\n  }]);\n\n  return DescriptiveClip;\n}(Playable);\n\n_defineProperty(DescriptiveClip, \"isClip\", true);\n\n_defineProperty(DescriptiveClip, \"Incident\", Clip);\n\n_defineProperty(DescriptiveClip, \"plugin_npm_name\", \"@kissmybutton/self-contained-incidents\");\n\n_defineProperty(DescriptiveClip, \"Channel\", Channel);\n\n_defineProperty(DescriptiveClip, \"ClassName\", \"Clip\");\n\nmodule.exports = DescriptiveClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Node = __webpack_require__(/*! ../Tree/Node */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\");\n\nvar resize = __webpack_require__(/*! ./decorators/resize */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\");\n\nvar editAttributes = __webpack_require__(/*! ./decorators/editAttributes */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\");\n\nvar editProperties = __webpack_require__(/*! ./decorators/editProperties */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\");\n\nvar selectorGetter = __webpack_require__(/*! ./decorators/selector */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\");\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar rules = __webpack_require__(/*! ../_configuration/propsValidationRules */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/propsValidationRules.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar DescriptiveGroup = _decorate(null, function (_initialize, _Node) {\n  var DescriptiveGroup =\n  /*#__PURE__*/\n  function (_Node2) {\n    _inherits(DescriptiveGroup, _Node2);\n\n    function DescriptiveGroup() {\n      var _this;\n\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, DescriptiveGroup);\n\n      if (props === null) {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, attrs));\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.attrs = {};\n        _this.props = attrs;\n      } else {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, props));\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.attrs = attrs;\n        _this.props = props;\n      }\n\n      var propsValidation = helper.validateProps(_this.props, rules.groupPropsRule, _this.constructor);\n\n      if (propsValidation.result === false) {\n        return _possibleConstructorReturn(_this, propsValidation);\n      }\n\n      _this._inheritedSelector = null; // passiveAddition is a flag property indicating that any Incident to be\n      // added to the Clip will be passive. It initialises with value = false\n      // on DescriptiveGroup where it's originaly defined.\n      // Here we change its value just before the buildTree method execution\n      // so all Incidents added on it get the \"passive\" flag and don't get\n      // exported on the exportDefinition method. Once the buildTree method\n      // finishes we set it back to its original value (false)\n\n      _this.passiveAddition = true;\n\n      _this._buildTree();\n\n      _this.passiveAddition = false;\n      return _possibleConstructorReturn(_this);\n    }\n\n    return DescriptiveGroup;\n  }(_Node);\n\n  return {\n    F: DescriptiveGroup,\n    d: [{\n      kind: \"field\",\n      \"static\": true,\n      key: \"Incident\",\n      value: function value() {\n        return Group;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"plugin_npm_name\",\n      value: function value() {\n        return \"motor-cortex-js\";\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"Channel\",\n      value: function value() {\n        return Channel;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"ClassName\",\n      value: function value() {\n        return \"Group\";\n      }\n    }, {\n      kind: \"method\",\n      decorators: [editAttributes],\n      key: \"editAttributes\",\n      value: function editAttributes() {}\n    }, {\n      kind: \"method\",\n      decorators: [editProperties],\n      key: \"editProperties\",\n      value: function editProperties() {}\n    }, {\n      kind: \"method\",\n      decorators: [resize],\n      key: \"resize\",\n      value: function resize() {}\n    }, {\n      kind: \"method\",\n      decorators: [selectorGetter],\n      key: \"selector\",\n      value: function selector() {}\n    }, {\n      kind: \"method\",\n      key: \"_buildTree\",\n      value: function _buildTree() {\n        this.buildTree();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_rebuildTree\",\n      value: function _rebuildTree() {\n        // remove all direct passive incidents as they might be dependent on the edited attrs/props\n        for (var id in this.children) {\n          var theChild = this.children[id];\n\n          if (theChild.leaf.passive === true) {\n            this.removeIncident(theChild.id);\n          }\n        } // run buildTree again\n\n\n        this.passiveAddition = true;\n        this.buildTree();\n        this.passiveAddition = false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"buildTree\",\n      value: function buildTree() {}\n    }, {\n      kind: \"method\",\n      key: \"manageEditAttrProps\",\n      value: function manageEditAttrProps(newAttrs, type) {\n        // get a permanent reference to its parent node\n        var parentNode = this.parentNode; // get the position of the Incident within its parent\n\n        var position = parentNode.getLeafPosition(this.id); // keep a backup of the current attrs / props\n\n        var oldAttrs = JSON.parse(JSON.stringify(this[type]));\n        this[type] = newAttrs; // first detach the Incident from its parent\n\n        parentNode.removeIncident(this.id); // remove all direct passive incidents as they might be dependent on the edited attrs/props\n\n        this._rebuildTree(); // try to add the altered Group\n\n\n        var res = parentNode.addIncident(this, position);\n\n        if (res.result === false) {\n          this[type] = oldAttrs;\n\n          this._rebuildTree();\n\n          parentNode.addIncident(this, position);\n          return res;\n        }\n\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        _get(_getPrototypeOf(DescriptiveGroup.prototype), \"detachFromParent\", this).call(this);\n\n        this.inheritedSelector = null;\n      }\n    }, {\n      kind: \"get\",\n      key: \"inheritedSelector\",\n      value: function inheritedSelector() {\n        return this._inheritedSelector;\n      }\n    }, {\n      kind: \"set\",\n      key: \"inheritedSelector\",\n      value: function inheritedSelector(value) {\n        this._inheritedSelector = value;\n\n        for (var id in this.children) {\n          var theChild = this.children[id].leaf;\n          theChild.inheritedSelector = this.selector();\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"selectorToPassToChildren\",\n      value: function selectorToPassToChildren() {\n        return this.selector();\n      }\n      /**\n       * The purpose of this method is to export a portable definition that can be\n       * later used in order to rebuild the Inicdent at any time\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"exportDefinition\",\n      value: function exportDefinition() {\n        var toReturn = {\n          ClassName: this.constructor.ClassName,\n          plugin_npm_name: this.constructor.plugin_npm_name,\n          attrs: this.attrs,\n          props: this.props,\n          incidents: {}\n        };\n\n        for (var id in this.children) {\n          var theChild = this.children[id];\n\n          if (theChild.leaf.passive === true) {\n            continue;\n          }\n\n          toReturn.incidents[id] = {\n            id: theChild.id,\n            position: theChild.position,\n            leaf: theChild.leaf.exportDefinition()\n          };\n        }\n\n        return toReturn;\n      }\n    }, {\n      kind: \"method\",\n      key: \"addIncident\",\n      value: function addIncident(descriptiveIncident, position) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          check: true\n        };\n        descriptiveIncident.inheritedSelector = this.selectorToPassToChildren;\n\n        if (options.check === true) {\n          var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkAddition\", this).call(this, descriptiveIncident, position);\n\n          if (initialCheck.result === false) {\n            descriptiveIncident.inheritedSelector = null;\n            return initialCheck;\n          }\n          /* Check for null or relative selector Incidents with no inherited selector */\n\n\n          var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n            selfExecute: true,\n            direction: _TREECONST._DIRECTIONS._UP\n          });\n\n          if (checkIfBelongsToClip.response === true) {\n            // if the Group belongs on a Clip\n            var selectorsCheck = descriptiveIncident.putMessageOnPipe('checkForInvalidSelectors', {}, null, {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._DOWN\n            });\n\n            if (selectorsCheck.length > 0) {\n              var errors = [];\n\n              for (var i = 0; i < selectorsCheck.length; i++) {\n                errors.push(selectorsCheck[i].response);\n              }\n\n              return {\n                result: false,\n                errors: errors\n              };\n            }\n          } // sends the check request to its root, either a headless root or a Descriptive Clip\n\n\n          var mcCheck = this.putMessageOnPipe('checkAddition', {\n            incident: descriptiveIncident,\n            millisecond: position,\n            parentGroupId: this.id\n          }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n            selfExecute: true,\n            direction: _TREECONST._DIRECTIONS._UP\n          });\n\n          if (mcCheck.response.result === false) {\n            descriptiveIncident.inheritedSelector = null;\n            return mcCheck.response;\n          }\n        } // if the passiveAddition flag is true we set the passive flag of the Incident\n        // to true before adding it to our Group\n\n\n        if (this.passiveAddition === true) {\n          descriptiveIncident.passive = true;\n        }\n\n        var res = this.addChild(descriptiveIncident, position);\n\n        if (res.result === false) {\n          descriptiveIncident.inheritedSelector = null;\n        }\n\n        return res;\n      }\n      /**\n       * @param input - can either be object or id\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"moveIncident\",\n      value: function moveIncident(input, position) {\n        var id = input;\n\n        if (_typeof(input) === \"object\") {\n          id = input.id;\n        }\n\n        var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkEditPosition\", this).call(this, id, position);\n\n        if (initialCheck.result === false) {\n          return initialCheck;\n        }\n\n        var originalPosition = this.getLeafPosition(id);\n        var positionDelta = position - originalPosition;\n\n        if (positionDelta === 0) {\n          return {\n            result: true\n          };\n        }\n\n        var mcCheck = this.putMessageOnPipe('checkMove', {\n          id: id,\n          millisecond: position,\n          positionDelta: positionDelta,\n          parentGroupId: this.id\n        }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n\n        if (mcCheck.response.result === false) {\n          return mcCheck.response;\n        }\n\n        var res = this.editPosition(id, position);\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"removeIncident\",\n      value: function removeIncident(input) {\n        var id = input;\n\n        if (_typeof(input) === \"object\") {\n          id = input.id;\n        }\n\n        var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkRemoveChild\", this).call(this, id);\n\n        if (initialCheck.result === false) {\n          return initialCheck;\n        }\n\n        var mcCheck = this.putMessageOnPipe('checkDeletion', {\n          id: id,\n          parentGroupId: this.id\n        }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n\n        if (mcCheck.response.result === false) {\n          return mcCheck.response;\n        }\n\n        var res = this.removeChild(id);\n        return res;\n      }\n      /*************************** HANDLING METHODS *******************************/\n\n    }, {\n      kind: \"method\",\n      key: \"handleCheckForClip\",\n      value: function handleCheckForClip(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckAddition\",\n      value: function handleCheckAddition(target, payload) {\n        // eslint-disable-line no-unused-vars\n\n        /*\n        The DescriptiveGroup handles the checkAddition command which has the UP\n        direction. If the DG has a parent it forwards the command to it. If not\n        it just returns true, as it is a deadless tree\n        */\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckMove\",\n      value: function handleCheckMove(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckDeletion\",\n      value: function handleCheckDeletion(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckResize\",\n      value: function handleCheckResize(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }]\n  };\n}, Node);\n\nmodule.exports = DescriptiveGroup;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar resize = __webpack_require__(/*! ./decorators/resize */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\");\n\nvar editAttributes = __webpack_require__(/*! ./decorators/editAttributes */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\");\n\nvar editProperties = __webpack_require__(/*! ./decorators/editProperties */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\");\n\nvar selectorGetter = __webpack_require__(/*! ./decorators/selector */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\");\n\nvar MonoIncident = __webpack_require__(/*! ../BaseClasses/MonoIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar AttributeChannel = __webpack_require__(/*! ../Channels/Attribute/AttributeChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\");\n\nvar rules = __webpack_require__(/*! ../_configuration/propsValidationRules */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/propsValidationRules.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar DescriptiveIncident = _decorate(null, function (_initialize, _Leaf) {\n  var DescriptiveIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(DescriptiveIncident, _Leaf2);\n\n    function DescriptiveIncident(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, DescriptiveIncident);\n\n      if (props === undefined) {\n        props = attrs;\n        attrs = {};\n      }\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveIncident).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      var propsValidation = helper.validateProps({\n        props: props\n      }, rules.incidentPropsRule, _this.constructor);\n\n      if (propsValidation.result === false) {\n        return _possibleConstructorReturn(_this, propsValidation);\n      }\n\n      _this.inheritedSelector = null;\n      _this.attrs = attrs;\n\n      if (!Object.prototype.hasOwnProperty.call(props, \"duration\")) {\n        props.duration = 0;\n      }\n\n      _this.props = props; // the passive flag (when true) indicates that the Descriptive Group has been created\n      // and passively added to a Clip or a Combo via buildTree method.\n      // Defaults to false\n\n      _this.passive = false;\n      return _this;\n    }\n\n    return DescriptiveIncident;\n  }(_Leaf);\n\n  return {\n    F: DescriptiveIncident,\n    d: [{\n      kind: \"field\",\n      \"static\": true,\n      key: \"Incident\",\n      value: function value() {\n        return MonoIncident;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"plugin_npm_name\",\n      value: function value() {\n        return \"motor-cortex-js-attribute\";\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"Channel\",\n      value: function value() {\n        return AttributeChannel;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"ClassName\",\n      value: function value() {\n        return \"Incident\";\n      }\n    }, {\n      kind: \"method\",\n      decorators: [editAttributes],\n      key: \"editAttributes\",\n      value: function editAttributes() {}\n    }, {\n      kind: \"method\",\n      decorators: [editProperties],\n      key: \"editProperties\",\n      value: function editProperties() {}\n    }, {\n      kind: \"method\",\n      decorators: [resize],\n      key: \"resize\",\n      value: function resize() {}\n    }, {\n      kind: \"method\",\n      decorators: [selectorGetter],\n      key: \"selector\",\n      value: function selector() {}\n    }, {\n      kind: \"method\",\n      key: \"manageEditAttrProps\",\n      value: function manageEditAttrProps(newAttrs, type) {\n        // get a permanent reference to its parent node\n        var parentNode = this.parentNode; // get the position of the Incident within its parent\n\n        var position = parentNode.getLeafPosition(this.id); // first detach the Incident from its parent\n\n        parentNode.removeIncident(this.id); // keep a backup of the current attrs/props\n\n        var oldAttrs = JSON.parse(JSON.stringify(this[type]));\n        this[type] = newAttrs;\n        var res = parentNode.addIncident(this, position);\n\n        if (res.result === false) {\n          parentNode.removeIncident(this.id);\n          this[type] = oldAttrs;\n          parentNode.addIncident(this, position);\n          return res;\n        }\n\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        _get(_getPrototypeOf(DescriptiveIncident.prototype), \"detachFromParent\", this).call(this);\n\n        this.inheritedSelector = null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckForInvalidSelectors\",\n      value: function handleCheckForInvalidSelectors() {\n        var selector = this.selector();\n\n        if (selector === null) {\n          return {\n            id: this.id,\n            ClassName: this.constructor.ClassName,\n            plugin_npm_name: this.constructor.plugin_npm_name,\n            error: 'null selector'\n          };\n        } else if (selector.charAt(0) === \"&\") {\n          return {\n            id: this.id,\n            ClassName: this.constructor.ClassName,\n            plugin_npm_name: this.constructor.plugin_npm_name,\n            error: 'relative selector with no inherited selector',\n            selector: selector\n          };\n        } else return this.bypass();\n      }\n      /**\n       * The purpose of this method is to export a portable definition that can be\n       * later used in order to rebuild the Inicdent at any time\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"exportDefinition\",\n      value: function exportDefinition() {\n        return {\n          ClassName: this.constructor.ClassName,\n          plugin_npm_name: this.constructor.plugin_npm_name,\n          attrs: this.attrs,\n          props: this.props\n        };\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = DescriptiveIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _TARGETTYPES: {\n    _DECISIONAUTHORITY: \"mc.descriptive.decisionAuthority\"\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL19DT05TVC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvRGVzY3JpcHRpdmVJbmNpZGVudHMvX0NPTlNULmpzPzMwNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBfVEFSR0VUVFlQRVM6IHtcbiAgICBfREVDSVNJT05BVVRIT1JJVFk6IFwibWMuZGVzY3JpcHRpdmUuZGVjaXNpb25BdXRob3JpdHlcIlxuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction editAttributes(payload) {\n  payload.descriptor.value = function (newAttrs) {\n    var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n\n    if (checkIfBelongsToClip.response === true) {\n      // if the Group belongs on a Clip\n      return this.manageEditAttrProps(newAttrs, 'attrs');\n    } else {\n      this.attrs = newAttrs;\n      return {\n        result: true\n      };\n    }\n  };\n}\n\nmodule.exports = editAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvZWRpdEF0dHJpYnV0ZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvZWRpdEF0dHJpYnV0ZXMuanM/YTVhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9DT05TVCA9IHJlcXVpcmUoJy4uL19DT05TVCcpO1xuXG52YXIgX1RSRUVDT05TVCA9IHJlcXVpcmUoJy4uLy4uL1RyZWUvX0NPTlNUJyk7XG5cbmZ1bmN0aW9uIGVkaXRBdHRyaWJ1dGVzKHBheWxvYWQpIHtcbiAgcGF5bG9hZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKG5ld0F0dHJzKSB7XG4gICAgdmFyIGNoZWNrSWZCZWxvbmdzVG9DbGlwID0gdGhpcy5wdXRNZXNzYWdlT25QaXBlKCdjaGVja0ZvckNsaXAnLCB7fSwgX0NPTlNULl9UQVJHRVRUWVBFUy5fREVDSVNJT05BVVRIT1JJVFksIHtcbiAgICAgIHNlbGZFeGVjdXRlOiB0cnVlLFxuICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgIH0pO1xuXG4gICAgaWYgKGNoZWNrSWZCZWxvbmdzVG9DbGlwLnJlc3BvbnNlID09PSB0cnVlKSB7XG4gICAgICAvLyBpZiB0aGUgR3JvdXAgYmVsb25ncyBvbiBhIENsaXBcbiAgICAgIHJldHVybiB0aGlzLm1hbmFnZUVkaXRBdHRyUHJvcHMobmV3QXR0cnMsICdhdHRycycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmF0dHJzID0gbmV3QXR0cnM7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRBdHRyaWJ1dGVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction editProperties(payload) {\n  payload.descriptor.value = function (newProps) {\n    var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n\n    if (checkIfBelongsToClip.response === true) {\n      // if the Group belongs on a Clip\n      return this.manageEditAttrProps(newProps, 'props');\n    } else {\n      this.props = newProps;\n      return {\n        result: true\n      };\n    }\n  };\n}\n\nmodule.exports = editProperties;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvZWRpdFByb3BlcnRpZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvZWRpdFByb3BlcnRpZXMuanM/ZDgyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9DT05TVCA9IHJlcXVpcmUoJy4uL19DT05TVCcpO1xuXG52YXIgX1RSRUVDT05TVCA9IHJlcXVpcmUoJy4uLy4uL1RyZWUvX0NPTlNUJyk7XG5cbmZ1bmN0aW9uIGVkaXRQcm9wZXJ0aWVzKHBheWxvYWQpIHtcbiAgcGF5bG9hZC5kZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKG5ld1Byb3BzKSB7XG4gICAgdmFyIGNoZWNrSWZCZWxvbmdzVG9DbGlwID0gdGhpcy5wdXRNZXNzYWdlT25QaXBlKCdjaGVja0ZvckNsaXAnLCB7fSwgX0NPTlNULl9UQVJHRVRUWVBFUy5fREVDSVNJT05BVVRIT1JJVFksIHtcbiAgICAgIHNlbGZFeGVjdXRlOiB0cnVlLFxuICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgIH0pO1xuXG4gICAgaWYgKGNoZWNrSWZCZWxvbmdzVG9DbGlwLnJlc3BvbnNlID09PSB0cnVlKSB7XG4gICAgICAvLyBpZiB0aGUgR3JvdXAgYmVsb25ncyBvbiBhIENsaXBcbiAgICAgIHJldHVybiB0aGlzLm1hbmFnZUVkaXRBdHRyUHJvcHMobmV3UHJvcHMsICdwcm9wcycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3BzID0gbmV3UHJvcHM7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRQcm9wZXJ0aWVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n/**\n * resize method resizes the Incident by maintaining proportions between delay, duraiton and hiatus.\n * also, the new duration will be the full new duration of the Incident taking in considration\n * all delay, duration and hiatus along with\n **/\n\n\nfunction resize(payload) {\n  payload.descriptor.value = function (newSize) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      check: true\n    };\n\n    if (newSize === this.duration) {\n      return {\n        result: true,\n        meta: {\n          unprocessed: true\n        }\n      };\n    }\n\n    if (newSize <= 0) {\n      return {\n        result: false,\n        reason: 'Size must always be > 0'\n      };\n    }\n\n    if (options.check === true && this.hasParent) {\n      var mcCheck = this.putMessageOnPipe('checkResize', {\n        id: this.id,\n        newSize: newSize,\n        fraction: newSize / this.duration\n      }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n\n      if (mcCheck.response.result === false) {\n        return mcCheck.response;\n      }\n    }\n\n    this.setNewDuration(newSize);\n    return {\n      result: true\n    };\n  };\n}\n\nmodule.exports = resize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvcmVzaXplLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9kZWNvcmF0b3JzL3Jlc2l6ZS5qcz8yMDFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX0NPTlNUID0gcmVxdWlyZSgnLi4vX0NPTlNUJyk7XG5cbnZhciBfVFJFRUNPTlNUID0gcmVxdWlyZSgnLi4vLi4vVHJlZS9fQ09OU1QnKTtcbi8qKlxuICogcmVzaXplIG1ldGhvZCByZXNpemVzIHRoZSBJbmNpZGVudCBieSBtYWludGFpbmluZyBwcm9wb3J0aW9ucyBiZXR3ZWVuIGRlbGF5LCBkdXJhaXRvbiBhbmQgaGlhdHVzLlxuICogYWxzbywgdGhlIG5ldyBkdXJhdGlvbiB3aWxsIGJlIHRoZSBmdWxsIG5ldyBkdXJhdGlvbiBvZiB0aGUgSW5jaWRlbnQgdGFraW5nIGluIGNvbnNpZHJhdGlvblxuICogYWxsIGRlbGF5LCBkdXJhdGlvbiBhbmQgaGlhdHVzIGFsb25nIHdpdGhcbiAqKi9cblxuXG5mdW5jdGlvbiByZXNpemUocGF5bG9hZCkge1xuICBwYXlsb2FkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAobmV3U2l6ZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7XG4gICAgICBjaGVjazogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAobmV3U2l6ZSA9PT0gdGhpcy5kdXJhdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgdW5wcm9jZXNzZWQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobmV3U2l6ZSA8PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IGZhbHNlLFxuICAgICAgICByZWFzb246ICdTaXplIG11c3QgYWx3YXlzIGJlID4gMCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2hlY2sgPT09IHRydWUgJiYgdGhpcy5oYXNQYXJlbnQpIHtcbiAgICAgIHZhciBtY0NoZWNrID0gdGhpcy5wdXRNZXNzYWdlT25QaXBlKCdjaGVja1Jlc2l6ZScsIHtcbiAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgIG5ld1NpemU6IG5ld1NpemUsXG4gICAgICAgIGZyYWN0aW9uOiBuZXdTaXplIC8gdGhpcy5kdXJhdGlvblxuICAgICAgfSwgX0NPTlNULl9UQVJHRVRUWVBFUy5fREVDSVNJT05BVVRIT1JJVFksIHtcbiAgICAgICAgc2VsZkV4ZWN1dGU6IGZhbHNlLFxuICAgICAgICBkaXJlY3Rpb246IF9UUkVFQ09OU1QuX0RJUkVDVElPTlMuX1VQXG4gICAgICB9KTtcblxuICAgICAgaWYgKG1jQ2hlY2sucmVzcG9uc2UucmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbWNDaGVjay5yZXNwb25zZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldE5ld0R1cmF0aW9uKG5ld1NpemUpO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHQ6IHRydWVcbiAgICB9O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc2l6ZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction selector(payload) {\n  payload.descriptor.value = function () {\n    if (this.inheritedSelector === null) {\n      // if the Incident has no parent selector inherited\n      if (!Object.prototype.hasOwnProperty.call(this.props, \"selector\")) {\n        // and does not have a selector neither\n        return null; // then its selector is null\n      } else {\n        return this.props.selector; // else, if it has a selector that's its final selector\n      }\n    } else {\n      // else if there is an inherited selector\n      if (!Object.prototype.hasOwnProperty.call(this.props, \"selector\")) {\n        // and does not have a selector of its own\n        return this.inheritedSelector; // then its selector is equal to the inherited selector\n      } else {\n        // else, if it both has an inherited and an own selector\n        if (this.props.selector.charAt(0) === \"&\") {\n          return this.inheritedSelector + this.props.selector.substring(1);\n        } else {\n          return this.inheritedSelector + ' ' + this.props.selector;\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = selector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvc2VsZWN0b3IuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvc2VsZWN0b3IuanM/MzM1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gc2VsZWN0b3IocGF5bG9hZCkge1xuICBwYXlsb2FkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaW5oZXJpdGVkU2VsZWN0b3IgPT09IG51bGwpIHtcbiAgICAgIC8vIGlmIHRoZSBJbmNpZGVudCBoYXMgbm8gcGFyZW50IHNlbGVjdG9yIGluaGVyaXRlZFxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5wcm9wcywgXCJzZWxlY3RvclwiKSkge1xuICAgICAgICAvLyBhbmQgZG9lcyBub3QgaGF2ZSBhIHNlbGVjdG9yIG5laXRoZXJcbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHRoZW4gaXRzIHNlbGVjdG9yIGlzIG51bGxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnNlbGVjdG9yOyAvLyBlbHNlLCBpZiBpdCBoYXMgYSBzZWxlY3RvciB0aGF0J3MgaXRzIGZpbmFsIHNlbGVjdG9yXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVsc2UgaWYgdGhlcmUgaXMgYW4gaW5oZXJpdGVkIHNlbGVjdG9yXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnByb3BzLCBcInNlbGVjdG9yXCIpKSB7XG4gICAgICAgIC8vIGFuZCBkb2VzIG5vdCBoYXZlIGEgc2VsZWN0b3Igb2YgaXRzIG93blxuICAgICAgICByZXR1cm4gdGhpcy5pbmhlcml0ZWRTZWxlY3RvcjsgLy8gdGhlbiBpdHMgc2VsZWN0b3IgaXMgZXF1YWwgdG8gdGhlIGluaGVyaXRlZCBzZWxlY3RvclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZWxzZSwgaWYgaXQgYm90aCBoYXMgYW4gaW5oZXJpdGVkIGFuZCBhbiBvd24gc2VsZWN0b3JcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0b3IuY2hhckF0KDApID09PSBcIiZcIikge1xuICAgICAgICAgIHJldHVybiB0aGlzLmluaGVyaXRlZFNlbGVjdG9yICsgdGhpcy5wcm9wcy5zZWxlY3Rvci5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5oZXJpdGVkU2VsZWN0b3IgKyAnICcgKyB0aGlzLnByb3BzLnNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbGVjdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar ElementSplitter = __webpack_require__(/*! ../Splitters/ElementSplitter */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\");\n\nvar ElementClipSplitter = __webpack_require__(/*! ../Splitters/ElementClipSplitter */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ./incidentFromIngredients */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n/**\n * Creates a real Incident (with all of its real tree) out of the Descriptive Incident.\n * @param {object} descriptiveIncident - the Descriptive Incident that defines the Incident\n * @param {contextData} - the context data (object containing id and actual context) to be used for real\n *      Incidents init\n * @param {boolean} audio - defaults to false. It defines whether the method is been used\n *      by a real Clip or the Audio clip\n * @returns {object} - the real Incident\n **/\n\n\nfunction incidentFromDescription(descriptiveIncident, contextData) {\n  var audio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  /*\n  RULES:\n  - Clips can only have selectors (and not hosts) as they participate on a Desc. Tree\n      and thus they are Clips As Incidents. The DescriptiveClips are treated a bit\n      different compared to the rest of the Incidents as they copy all of the\n      Description channels and lanes\n  - Descriptive Incidents can either have or not have selectors\n  - Descriptive Compos always have selectors\n   All Incidents of the tree, no matter their type have the static properties:\n  - Incident (which is the Incident class they need to initialise)\n  - plugin_npm_name (the plugin name they bolong to)\n  - Channel (the Channel class to handle the instance)\n  */\n\n  /* check for the descriptive incident and audio compatibility. If audio is true then we're\n      working on the audioClip and we need incidents that are at least \"on\" while if the audio==false\n      and we are working on the real tree then we reject the cases that the incident is audio \"only\"\n  */\n  if (audio === true && descriptiveIncident.audio === \"off\" || audio === false && descriptiveIncident.audio === \"only\") {\n    return null;\n  }\n\n  var incidentToReturn;\n\n  if (Object.prototype.hasOwnProperty.call(descriptiveIncident.props, 'selector')) {\n    if (audio === false && descriptiveIncident.props.selector.charAt(0) === '~' || audio === true && descriptiveIncident.props.selector.charAt(0) !== '~' && descriptiveIncident.constructor.isClip === false) {\n      return null;\n    }\n  }\n\n  if (descriptiveIncident.constructor.isClip === true) {\n    if (Object.prototype.hasOwnProperty.call(descriptiveIncident.props, 'selector') && audio === false) {\n      incidentToReturn = new ElementClipSplitter(descriptiveIncident, contextData);\n      incidentToReturn.plugin_channel_class = Channel;\n    } else {\n      if (audio === true) {\n        return descriptiveIncident.audioClip;\n      } else {\n        return descriptiveIncident.realClip;\n      }\n    }\n  } else if (descriptiveIncident.constructor.Incident === Group) {\n    incidentToReturn = incidentFromIngredients({\n      id: descriptiveIncident.id,\n      attrs: descriptiveIncident.attrs,\n      props: descriptiveIncident.props,\n      Incident: descriptiveIncident.constructor.Incident,\n      plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n      Channel: descriptiveIncident.constructor.Channel,\n      DescriptiveIncident: descriptiveIncident\n    });\n\n    for (var incId in descriptiveIncident.children) {\n      var childIncident = incidentFromDescription(descriptiveIncident.children[incId].leaf, contextData);\n\n      if (childIncident === null) {\n        continue;\n      }\n\n      incidentToReturn.addChild(childIncident, descriptiveIncident.children[incId].position);\n    }\n  } else {\n    // if it is an Incident that extends the Incident (not a Group) then\n    // we should anaylse it to its element/attribute Incidents starting from\n    // the elements, that's why we create an ElementSplitter. It is our\n    // starting point to which the Incident will be analysed to its\n    // element/attributes children.\n    incidentToReturn = new ElementSplitter(descriptiveIncident, contextData);\n  }\n\n  return incidentToReturn;\n}\n\nmodule.exports = incidentFromDescription;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0luY2lkZW50RnJvbURlZmluaXRpb24vaW5jaWRlbnRGcm9tRGVzY3JpcHRpb24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0luY2lkZW50RnJvbURlZmluaXRpb24vaW5jaWRlbnRGcm9tRGVzY3JpcHRpb24uanM/YTAwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIEdyb3VwID0gcmVxdWlyZSgnLi4vQmFzZUNsYXNzZXMvR3JvdXAnKTtcblxudmFyIEVsZW1lbnRTcGxpdHRlciA9IHJlcXVpcmUoJy4uL1NwbGl0dGVycy9FbGVtZW50U3BsaXR0ZXInKTtcblxudmFyIEVsZW1lbnRDbGlwU3BsaXR0ZXIgPSByZXF1aXJlKCcuLi9TcGxpdHRlcnMvRWxlbWVudENsaXBTcGxpdHRlcicpO1xuXG52YXIgaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMgPSByZXF1aXJlKCcuL2luY2lkZW50RnJvbUluZ3JlZGllbnRzJyk7XG5cbnZhciBDaGFubmVsID0gcmVxdWlyZSgnLi4vQ2hhbm5lbHMvQ2hhbm5lbCcpO1xuLyoqXG4gKiBDcmVhdGVzIGEgcmVhbCBJbmNpZGVudCAod2l0aCBhbGwgb2YgaXRzIHJlYWwgdHJlZSkgb3V0IG9mIHRoZSBEZXNjcmlwdGl2ZSBJbmNpZGVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBkZXNjcmlwdGl2ZUluY2lkZW50IC0gdGhlIERlc2NyaXB0aXZlIEluY2lkZW50IHRoYXQgZGVmaW5lcyB0aGUgSW5jaWRlbnRcbiAqIEBwYXJhbSB7Y29udGV4dERhdGF9IC0gdGhlIGNvbnRleHQgZGF0YSAob2JqZWN0IGNvbnRhaW5pbmcgaWQgYW5kIGFjdHVhbCBjb250ZXh0KSB0byBiZSB1c2VkIGZvciByZWFsXG4gKiAgICAgIEluY2lkZW50cyBpbml0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGF1ZGlvIC0gZGVmYXVsdHMgdG8gZmFsc2UuIEl0IGRlZmluZXMgd2hldGhlciB0aGUgbWV0aG9kIGlzIGJlZW4gdXNlZFxuICogICAgICBieSBhIHJlYWwgQ2xpcCBvciB0aGUgQXVkaW8gY2xpcFxuICogQHJldHVybnMge29iamVjdH0gLSB0aGUgcmVhbCBJbmNpZGVudFxuICoqL1xuXG5cbmZ1bmN0aW9uIGluY2lkZW50RnJvbURlc2NyaXB0aW9uKGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhKSB7XG4gIHZhciBhdWRpbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgLypcbiAgUlVMRVM6XG4gIC0gQ2xpcHMgY2FuIG9ubHkgaGF2ZSBzZWxlY3RvcnMgKGFuZCBub3QgaG9zdHMpIGFzIHRoZXkgcGFydGljaXBhdGUgb24gYSBEZXNjLiBUcmVlXG4gICAgICBhbmQgdGh1cyB0aGV5IGFyZSBDbGlwcyBBcyBJbmNpZGVudHMuIFRoZSBEZXNjcmlwdGl2ZUNsaXBzIGFyZSB0cmVhdGVkIGEgYml0XG4gICAgICBkaWZmZXJlbnQgY29tcGFyZWQgdG8gdGhlIHJlc3Qgb2YgdGhlIEluY2lkZW50cyBhcyB0aGV5IGNvcHkgYWxsIG9mIHRoZVxuICAgICAgRGVzY3JpcHRpb24gY2hhbm5lbHMgYW5kIGxhbmVzXG4gIC0gRGVzY3JpcHRpdmUgSW5jaWRlbnRzIGNhbiBlaXRoZXIgaGF2ZSBvciBub3QgaGF2ZSBzZWxlY3RvcnNcbiAgLSBEZXNjcmlwdGl2ZSBDb21wb3MgYWx3YXlzIGhhdmUgc2VsZWN0b3JzXG4gICBBbGwgSW5jaWRlbnRzIG9mIHRoZSB0cmVlLCBubyBtYXR0ZXIgdGhlaXIgdHlwZSBoYXZlIHRoZSBzdGF0aWMgcHJvcGVydGllczpcbiAgLSBJbmNpZGVudCAod2hpY2ggaXMgdGhlIEluY2lkZW50IGNsYXNzIHRoZXkgbmVlZCB0byBpbml0aWFsaXNlKVxuICAtIHBsdWdpbl9ucG1fbmFtZSAodGhlIHBsdWdpbiBuYW1lIHRoZXkgYm9sb25nIHRvKVxuICAtIENoYW5uZWwgKHRoZSBDaGFubmVsIGNsYXNzIHRvIGhhbmRsZSB0aGUgaW5zdGFuY2UpXG4gICovXG5cbiAgLyogY2hlY2sgZm9yIHRoZSBkZXNjcmlwdGl2ZSBpbmNpZGVudCBhbmQgYXVkaW8gY29tcGF0aWJpbGl0eS4gSWYgYXVkaW8gaXMgdHJ1ZSB0aGVuIHdlJ3JlXG4gICAgICB3b3JraW5nIG9uIHRoZSBhdWRpb0NsaXAgYW5kIHdlIG5lZWQgaW5jaWRlbnRzIHRoYXQgYXJlIGF0IGxlYXN0IFwib25cIiB3aGlsZSBpZiB0aGUgYXVkaW89PWZhbHNlXG4gICAgICBhbmQgd2UgYXJlIHdvcmtpbmcgb24gdGhlIHJlYWwgdHJlZSB0aGVuIHdlIHJlamVjdCB0aGUgY2FzZXMgdGhhdCB0aGUgaW5jaWRlbnQgaXMgYXVkaW8gXCJvbmx5XCJcbiAgKi9cbiAgaWYgKGF1ZGlvID09PSB0cnVlICYmIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXVkaW8gPT09IFwib2ZmXCIgfHwgYXVkaW8gPT09IGZhbHNlICYmIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXVkaW8gPT09IFwib25seVwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaW5jaWRlbnRUb1JldHVybjtcblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMsICdzZWxlY3RvcicpKSB7XG4gICAgaWYgKGF1ZGlvID09PSBmYWxzZSAmJiBkZXNjcmlwdGl2ZUluY2lkZW50LnByb3BzLnNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gJ34nIHx8IGF1ZGlvID09PSB0cnVlICYmIGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMuc2VsZWN0b3IuY2hhckF0KDApICE9PSAnficgJiYgZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5pc0NsaXAgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBpZiAoZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5pc0NsaXAgPT09IHRydWUpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMsICdzZWxlY3RvcicpICYmIGF1ZGlvID09PSBmYWxzZSkge1xuICAgICAgaW5jaWRlbnRUb1JldHVybiA9IG5ldyBFbGVtZW50Q2xpcFNwbGl0dGVyKGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhKTtcbiAgICAgIGluY2lkZW50VG9SZXR1cm4ucGx1Z2luX2NoYW5uZWxfY2xhc3MgPSBDaGFubmVsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXVkaW8gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXVkaW9DbGlwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0aXZlSW5jaWRlbnQucmVhbENsaXA7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlc2NyaXB0aXZlSW5jaWRlbnQuY29uc3RydWN0b3IuSW5jaWRlbnQgPT09IEdyb3VwKSB7XG4gICAgaW5jaWRlbnRUb1JldHVybiA9IGluY2lkZW50RnJvbUluZ3JlZGllbnRzKHtcbiAgICAgIGlkOiBkZXNjcmlwdGl2ZUluY2lkZW50LmlkLFxuICAgICAgYXR0cnM6IGRlc2NyaXB0aXZlSW5jaWRlbnQuYXR0cnMsXG4gICAgICBwcm9wczogZGVzY3JpcHRpdmVJbmNpZGVudC5wcm9wcyxcbiAgICAgIEluY2lkZW50OiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLkluY2lkZW50LFxuICAgICAgcGx1Z2luX25wbV9uYW1lOiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLnBsdWdpbl9ucG1fbmFtZSxcbiAgICAgIENoYW5uZWw6IGRlc2NyaXB0aXZlSW5jaWRlbnQuY29uc3RydWN0b3IuQ2hhbm5lbCxcbiAgICAgIERlc2NyaXB0aXZlSW5jaWRlbnQ6IGRlc2NyaXB0aXZlSW5jaWRlbnRcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGluY0lkIGluIGRlc2NyaXB0aXZlSW5jaWRlbnQuY2hpbGRyZW4pIHtcbiAgICAgIHZhciBjaGlsZEluY2lkZW50ID0gaW5jaWRlbnRGcm9tRGVzY3JpcHRpb24oZGVzY3JpcHRpdmVJbmNpZGVudC5jaGlsZHJlbltpbmNJZF0ubGVhZiwgY29udGV4dERhdGEpO1xuXG4gICAgICBpZiAoY2hpbGRJbmNpZGVudCA9PT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaW5jaWRlbnRUb1JldHVybi5hZGRDaGlsZChjaGlsZEluY2lkZW50LCBkZXNjcmlwdGl2ZUluY2lkZW50LmNoaWxkcmVuW2luY0lkXS5wb3NpdGlvbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIGl0IGlzIGFuIEluY2lkZW50IHRoYXQgZXh0ZW5kcyB0aGUgSW5jaWRlbnQgKG5vdCBhIEdyb3VwKSB0aGVuXG4gICAgLy8gd2Ugc2hvdWxkIGFuYXlsc2UgaXQgdG8gaXRzIGVsZW1lbnQvYXR0cmlidXRlIEluY2lkZW50cyBzdGFydGluZyBmcm9tXG4gICAgLy8gdGhlIGVsZW1lbnRzLCB0aGF0J3Mgd2h5IHdlIGNyZWF0ZSBhbiBFbGVtZW50U3BsaXR0ZXIuIEl0IGlzIG91clxuICAgIC8vIHN0YXJ0aW5nIHBvaW50IHRvIHdoaWNoIHRoZSBJbmNpZGVudCB3aWxsIGJlIGFuYWx5c2VkIHRvIGl0c1xuICAgIC8vIGVsZW1lbnQvYXR0cmlidXRlcyBjaGlsZHJlbi5cbiAgICBpbmNpZGVudFRvUmV0dXJuID0gbmV3IEVsZW1lbnRTcGxpdHRlcihkZXNjcmlwdGl2ZUluY2lkZW50LCBjb250ZXh0RGF0YSk7XG4gIH1cblxuICByZXR1cm4gaW5jaWRlbnRUb1JldHVybjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbmNpZGVudEZyb21EZXNjcmlwdGlvbjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/**\n * @param {object} ingredients -\n * {\n *      id\n *      attrs\n *      props\n *      Incident\n *      plugin_npm_name\n *      Channel\n *      context (optional)\n *      mcid (optional)\n *      dnaExtras\n * }\n **/\n\nmodule.exports = function (ingredients) {\n  if (!Object.prototype.hasOwnProperty.call(ingredients, \"dnaExtras\")) {\n    ingredients.dnaExtras = {};\n  }\n\n  var incident = new ingredients.Incident(ingredients.attrs, _objectSpread({}, ingredients.props, {\n    id: ingredients.id || helper.getAnId()\n  }), _objectSpread({}, ingredients.dnaExtras, {\n    context: ingredients.context,\n    mcid: ingredients.mcid\n  }));\n  incident.mc_plugin_npm_name = ingredients.plugin_npm_name;\n  incident.plugin_channel_class = ingredients.Channel;\n  incident.DescriptiveIncident = ingredients.DescriptiveIncident;\n  return incident;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0luY2lkZW50RnJvbURlZmluaXRpb24vaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0luY2lkZW50RnJvbURlZmluaXRpb24vaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMuanM/NGI3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGluZ3JlZGllbnRzIC1cbiAqIHtcbiAqICAgICAgaWRcbiAqICAgICAgYXR0cnNcbiAqICAgICAgcHJvcHNcbiAqICAgICAgSW5jaWRlbnRcbiAqICAgICAgcGx1Z2luX25wbV9uYW1lXG4gKiAgICAgIENoYW5uZWxcbiAqICAgICAgY29udGV4dCAob3B0aW9uYWwpXG4gKiAgICAgIG1jaWQgKG9wdGlvbmFsKVxuICogICAgICBkbmFFeHRyYXNcbiAqIH1cbiAqKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5ncmVkaWVudHMpIHtcbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5ncmVkaWVudHMsIFwiZG5hRXh0cmFzXCIpKSB7XG4gICAgaW5ncmVkaWVudHMuZG5hRXh0cmFzID0ge307XG4gIH1cblxuICB2YXIgaW5jaWRlbnQgPSBuZXcgaW5ncmVkaWVudHMuSW5jaWRlbnQoaW5ncmVkaWVudHMuYXR0cnMsIF9vYmplY3RTcHJlYWQoe30sIGluZ3JlZGllbnRzLnByb3BzLCB7XG4gICAgaWQ6IGluZ3JlZGllbnRzLmlkIHx8IGhlbHBlci5nZXRBbklkKClcbiAgfSksIF9vYmplY3RTcHJlYWQoe30sIGluZ3JlZGllbnRzLmRuYUV4dHJhcywge1xuICAgIGNvbnRleHQ6IGluZ3JlZGllbnRzLmNvbnRleHQsXG4gICAgbWNpZDogaW5ncmVkaWVudHMubWNpZFxuICB9KSk7XG4gIGluY2lkZW50Lm1jX3BsdWdpbl9ucG1fbmFtZSA9IGluZ3JlZGllbnRzLnBsdWdpbl9ucG1fbmFtZTtcbiAgaW5jaWRlbnQucGx1Z2luX2NoYW5uZWxfY2xhc3MgPSBpbmdyZWRpZW50cy5DaGFubmVsO1xuICBpbmNpZGVudC5EZXNjcmlwdGl2ZUluY2lkZW50ID0gaW5ncmVkaWVudHMuRGVzY3JpcHRpdmVJbmNpZGVudDtcbiAgcmV0dXJuIGluY2lkZW50O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar ContextAwareIncident = __webpack_require__(/*! ./ContextAwareIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\");\n\nvar AnimatedAttributesSplitter =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(AnimatedAttributesSplitter, _Group);\n\n  function AnimatedAttributesSplitter(descriptiveIncident, contextData, mcid, selector) {\n    var _this;\n\n    _classCallCheck(this, AnimatedAttributesSplitter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedAttributesSplitter).call(this, {}, {\n      id: \"\".concat(descriptiveIncident.id, \"_\").concat(mcid)\n    }));\n    _this.mcid = mcid;\n    _this.selector = selector;\n\n    _this.setUp(descriptiveIncident, contextData);\n\n    return _this;\n  }\n\n  _createClass(AnimatedAttributesSplitter, [{\n    key: \"setUp\",\n    value: function setUp(descriptiveIncident, contextData) {\n      for (var attr in descriptiveIncident.attrs.animatedAttrs) {\n        var singleAnimatedAttrs = {};\n        singleAnimatedAttrs[attr] = descriptiveIncident.attrs.animatedAttrs[attr];\n\n        var attrsToPass = _objectSpread({}, descriptiveIncident.attrs, {\n          animatedAttrs: singleAnimatedAttrs\n        });\n\n        var propsToPass = _objectSpread({}, descriptiveIncident.props, {\n          selector: this.selector\n        });\n\n        var constructionIngredients = {\n          incidentId: descriptiveIncident.id,\n          attrs: attrsToPass,\n          props: propsToPass,\n          Incident: descriptiveIncident.constructor.Incident,\n          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n          Channel: descriptiveIncident.constructor.Channel,\n          DescriptiveIncident: descriptiveIncident\n        };\n        var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, this.mcid, attr);\n        this.addChild(contextAwareIncident, 0);\n      }\n    }\n  }]);\n\n  return AnimatedAttributesSplitter;\n}(Group);\n\nmodule.exports = AnimatedAttributesSplitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1NwbGl0dGVycy9BbmltYXRlZEF0dHJpYnV0ZVNwbGl0dGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9TcGxpdHRlcnMvQW5pbWF0ZWRBdHRyaWJ1dGVTcGxpdHRlci5qcz83ZDk3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgR3JvdXAgPSByZXF1aXJlKCcuLi9CYXNlQ2xhc3Nlcy9Hcm91cCcpO1xuXG52YXIgQ29udGV4dEF3YXJlSW5jaWRlbnQgPSByZXF1aXJlKCcuL0NvbnRleHRBd2FyZUluY2lkZW50Jyk7XG5cbnZhciBBbmltYXRlZEF0dHJpYnV0ZXNTcGxpdHRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0dyb3VwKSB7XG4gIF9pbmhlcml0cyhBbmltYXRlZEF0dHJpYnV0ZXNTcGxpdHRlciwgX0dyb3VwKTtcblxuICBmdW5jdGlvbiBBbmltYXRlZEF0dHJpYnV0ZXNTcGxpdHRlcihkZXNjcmlwdGl2ZUluY2lkZW50LCBjb250ZXh0RGF0YSwgbWNpZCwgc2VsZWN0b3IpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5pbWF0ZWRBdHRyaWJ1dGVzU3BsaXR0ZXIpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQW5pbWF0ZWRBdHRyaWJ1dGVzU3BsaXR0ZXIpLmNhbGwodGhpcywge30sIHtcbiAgICAgIGlkOiBcIlwiLmNvbmNhdChkZXNjcmlwdGl2ZUluY2lkZW50LmlkLCBcIl9cIikuY29uY2F0KG1jaWQpXG4gICAgfSkpO1xuICAgIF90aGlzLm1jaWQgPSBtY2lkO1xuICAgIF90aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICBfdGhpcy5zZXRVcChkZXNjcmlwdGl2ZUluY2lkZW50LCBjb250ZXh0RGF0YSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQW5pbWF0ZWRBdHRyaWJ1dGVzU3BsaXR0ZXIsIFt7XG4gICAga2V5OiBcInNldFVwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVwKGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhKSB7XG4gICAgICBmb3IgKHZhciBhdHRyIGluIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXR0cnMuYW5pbWF0ZWRBdHRycykge1xuICAgICAgICB2YXIgc2luZ2xlQW5pbWF0ZWRBdHRycyA9IHt9O1xuICAgICAgICBzaW5nbGVBbmltYXRlZEF0dHJzW2F0dHJdID0gZGVzY3JpcHRpdmVJbmNpZGVudC5hdHRycy5hbmltYXRlZEF0dHJzW2F0dHJdO1xuXG4gICAgICAgIHZhciBhdHRyc1RvUGFzcyA9IF9vYmplY3RTcHJlYWQoe30sIGRlc2NyaXB0aXZlSW5jaWRlbnQuYXR0cnMsIHtcbiAgICAgICAgICBhbmltYXRlZEF0dHJzOiBzaW5nbGVBbmltYXRlZEF0dHJzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBwcm9wc1RvUGFzcyA9IF9vYmplY3RTcHJlYWQoe30sIGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMsIHtcbiAgICAgICAgICBzZWxlY3RvcjogdGhpcy5zZWxlY3RvclxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY29uc3RydWN0aW9uSW5ncmVkaWVudHMgPSB7XG4gICAgICAgICAgaW5jaWRlbnRJZDogZGVzY3JpcHRpdmVJbmNpZGVudC5pZCxcbiAgICAgICAgICBhdHRyczogYXR0cnNUb1Bhc3MsXG4gICAgICAgICAgcHJvcHM6IHByb3BzVG9QYXNzLFxuICAgICAgICAgIEluY2lkZW50OiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLkluY2lkZW50LFxuICAgICAgICAgIHBsdWdpbl9ucG1fbmFtZTogZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5wbHVnaW5fbnBtX25hbWUsXG4gICAgICAgICAgQ2hhbm5lbDogZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5DaGFubmVsLFxuICAgICAgICAgIERlc2NyaXB0aXZlSW5jaWRlbnQ6IGRlc2NyaXB0aXZlSW5jaWRlbnRcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNvbnRleHRBd2FyZUluY2lkZW50ID0gbmV3IENvbnRleHRBd2FyZUluY2lkZW50KGNvbnN0cnVjdGlvbkluZ3JlZGllbnRzLCBjb250ZXh0RGF0YSwgdGhpcy5tY2lkLCBhdHRyKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChjb250ZXh0QXdhcmVJbmNpZGVudCwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFuaW1hdGVkQXR0cmlidXRlc1NwbGl0dGVyO1xufShHcm91cCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0ZWRBdHRyaWJ1dGVzU3BsaXR0ZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar ClipCopy = __webpack_require__(/*! ../Clip/ClipCopy */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar easings = __webpack_require__(/*! ../_coreUtils/easings */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/easings.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar bezeasing = __webpack_require__(/*! bezier-easing */ \"./node_modules/bezier-easing/src/index.js\");\n\nvar ContextAwareClipIncident = _decorate(null, function (_initialize, _Leaf) {\n  var ContextAwareClipIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(ContextAwareClipIncident, _Leaf2);\n\n    function ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident) {\n      var _this;\n\n      _classCallCheck(this, ContextAwareClipIncident);\n\n      // console.log(constructionIngredients.props);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextAwareClipIncident).call(this, {\n        id: \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid)\n      })); // a property to hold all of the contexts\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.contexts = {};\n      _this.constructionIngredients = constructionIngredients;\n      _this.mcid = mcid;\n      _this._duration = descriptiveIncident.realClip.duration;\n      _this.DescriptiveIncident = descriptiveIncident;\n      _this.mc_plugin_npm_name = constructionIngredients.plugin_npm_name;\n      _this.plugin_channel_class = constructionIngredients.Channel;\n\n      _this.addContext(contextData);\n\n      descriptiveIncident.realClip.subscribeToDurationChange(function (newDuration) {\n        _this._duration = newDuration;\n\n        _this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n      });\n      _this.easing = easings['linear'];\n\n      if (Object.prototype.hasOwnProperty.call(_this.props, 'easing')) {\n        if (helper.isArray(_this.props.easing)) {\n          _this.easing = bezeasing(_this.props.easing[0], _this.props.easing[1], _this.props.easing[2], _this.props.easing[3]);\n        } else {\n          _this.easing = easings[_this.props.easing];\n        }\n      }\n\n      return _this;\n    }\n\n    return ContextAwareClipIncident;\n  }(_Leaf);\n\n  return {\n    F: ContextAwareClipIncident,\n    d: [{\n      kind: \"get\",\n      key: \"originalContext\",\n      value: function originalContext() {\n        return this.contexts[this.originalContextKey];\n      }\n    }, {\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this._duration;\n      }\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds, contextId) {\n        var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        var eased_MI_fraction = this.easing(fraction) || 0;\n        var eased_MI_millisecond = eased_MI_fraction * this.duration; // console.log(fraction, eased_MI_fraction, milliseconds, eased_MI_millisecond);\n\n        this.contexts[contextId].onProgress(eased_MI_fraction, eased_MI_millisecond, forceReset);\n      }\n    }, {\n      kind: \"method\",\n      key: \"addContext\",\n      value: function addContext(contextData) {\n        var forceGetContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        // if it's the first context to be added then it's the original\n        if (Object.keys(this.contexts).length === 0) {\n          this.originalContextKey = contextData.clipId;\n        } // instantiates the Clip so it renders\n\n\n        var ingredientsToPass = _objectSpread({}, this.constructionIngredients, {\n          context: contextData.context,\n          mcid: this.mcid,\n          Incident: ClipCopy,\n          DescriptiveIncident: this.DescriptiveIncident\n        }); // and puts it on the corresponding context key\n\n\n        this.contexts[contextData.clipId] = incidentFromIngredients(ingredientsToPass);\n\n        if (forceGetContext === true) {\n          this.contexts[contextData.clipId]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddContext\",\n      value: function handleAddContext(target, payload) {\n        this.addContext(payload, true);\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {} // massive editing methods that apply the request massively to all of the\n      // Incidents of all of the contexts\n\n    }, {\n      kind: \"method\",\n      key: \"gotContext\",\n      value: function gotContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].gotContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        for (var context in this.contexts) {\n          this.contexts[context]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var context in this.contexts) {\n          this.contexts[context].lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].onGetContext();\n        }\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = ContextAwareClipIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction set(target, property, value, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }\n\nfunction _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"./node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar _CONST = __webpack_require__(/*! ../_configuration/_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js\");\n\nvar easings = __webpack_require__(/*! ../_coreUtils/easings */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/easings.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar bezeasing = __webpack_require__(/*! bezier-easing */ \"./node_modules/bezier-easing/src/index.js\");\n\nvar ContextAwareIncident = _decorate(null, function (_initialize, _Leaf) {\n  var ContextAwareIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(ContextAwareIncident, _Leaf2);\n\n    function ContextAwareIncident(constructionIngredients, contextData, mcid, attribute) {\n      var _this;\n\n      _classCallCheck(this, ContextAwareIncident);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextAwareIncident).call(this, _objectSpread({}, constructionIngredients.props, {\n        id: attribute !== null ? \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid, \"_\").concat(attribute) : \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid)\n      }))); // a property to hold all of the contexts\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.contexts = {};\n      _this.constructionIngredients = constructionIngredients;\n      _this.mcid = mcid;\n      _this.attribute = attribute; // this._duration = constructionIngredients.props.duration;\n\n      _this.mc_plugin_npm_name = constructionIngredients.plugin_npm_name;\n      _this.plugin_channel_class = constructionIngredients.Channel;\n      _this.DescriptiveIncident = constructionIngredients.DescriptiveIncident;\n\n      _this.addContext(contextData);\n\n      if (attribute !== null) {\n        if (_typeof(_this.constructionIngredients.attrs.animatedAttrs[_this.attribute]) === 'object') {\n          _this.originalAnimatedAttributeValue = Object.assign({}, _this.constructionIngredients.attrs.animatedAttrs[_this.attribute]);\n        } else {\n          _this.originalAnimatedAttributeValue = _this.constructionIngredients.attrs.animatedAttrs[_this.attribute];\n        }\n      }\n\n      _this.easing = easings['linear'];\n\n      if (Object.prototype.hasOwnProperty.call(_this.props, 'easing')) {\n        if (helper.isArray(_this.props.easing)) {\n          _this.easing = bezeasing(_this.props.easing[0], _this.props.easing[1], _this.props.easing[2], _this.props.easing[3]);\n        } else {\n          _this.easing = easings[_this.props.easing];\n        }\n      }\n\n      return _this;\n    }\n\n    return ContextAwareIncident;\n  }(_Leaf);\n\n  return {\n    F: ContextAwareIncident,\n    d: [{\n      kind: \"get\",\n      key: \"originalContext\",\n      value: function originalContext() {\n        return this.contexts[this.originalContextKey];\n      }\n    }, {\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return _get(_getPrototypeOf(ContextAwareIncident.prototype), \"duration\", this);\n      }\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(milliseconds) {\n        _set(_getPrototypeOf(ContextAwareIncident.prototype), \"duration\", milliseconds, this, true);\n\n        for (var context in this.contexts) {\n          this.contexts[context].duration = milliseconds;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"addContext\",\n      value: function addContext(contextData) {\n        var forceGetContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        // if it's the first context to be added then it's the original\n        var isTheOriginalContext = false;\n\n        if (Object.keys(this.contexts).length === 0) {\n          this.originalContextKey = contextData.clipId;\n          this.originalClipContext = contextData.context;\n          isTheOriginalContext = true;\n        }\n\n        var ingredientsToPass = _objectSpread({}, this.constructionIngredients, {\n          context: contextData.context,\n          mcid: this.mcid\n        });\n\n        var whatToAdd = incidentFromIngredients(ingredientsToPass);\n        this.contexts[contextData.clipId] = whatToAdd; // when we add a new context we must set the inital value of the newly added Incidents\n        // but only for Incidents with animatedAttrs\n\n        if (!isTheOriginalContext && this.attribute !== null) {\n          this.contexts[contextData.clipId].setInitialValue(this.getInitialValue());\n        }\n\n        if (forceGetContext === true) {\n          this.contexts[contextData.clipId]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddContext\",\n      value: function handleAddContext(target, payload) {\n        this.addContext(payload, true);\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds, contextId) {\n        /* MonoIncidents are totally agnostic about delay, hiatus and repeats.\n        CAI is not that's exactly the point where these properties management occurs.\n        Having alredy set the duration of the ContextAwareIncident according to\n        all of these props, here the CAI decides on the progress that its MonoIncidents\n        are to on at the given millisecond and according to the given props.\n        */\n        // step 1: find the full delay-duration-hiatus duration of one repeat\n        var repeatDuration = this.delay + this.props.duration + this.hiatus; // step 2.a: find the running repeat and millisecond of this repeat\n\n        var millisecondWithinRepeat = milliseconds % repeatDuration; // step 2.b: decide between 0 and 1\n\n        if (milliseconds !== 0 && millisecondWithinRepeat === 0) {\n          millisecondWithinRepeat = this.delay + this.props.duration;\n        } // step 3: find the millisecond of the MonoIncident\n\n\n        var MI_millisecond = millisecondWithinRepeat - this.delay;\n\n        if (MI_millisecond < 0) {\n          MI_millisecond = 0;\n        } else if (MI_millisecond > this.props.duration) {\n          // if it has stepped into hiatus\n          MI_millisecond = this.props.duration;\n        }\n\n        var MI_fraction = MI_millisecond / this.props.duration;\n        var eased_MI_fraction = this.easing(MI_fraction);\n        var eased_MI_millisecond = eased_MI_fraction * this.props.duration;\n\n        if (contextId === undefined) {\n          for (var context in this.contexts) {\n            this.contexts[context].onProgress(eased_MI_fraction, eased_MI_millisecond);\n          }\n\n          return;\n        }\n\n        this.contexts[contextId].onProgress(eased_MI_fraction, eased_MI_millisecond);\n      }\n      /** METHODS THAT ACT AS \"PROXY\" TO ALL OF THE INCIDENTS BELONGING TO\n       * THE INCIDENTS COLLECTION OF THE CONTEXT AWARE INCIDENT\n       **/\n\n    }, {\n      kind: \"get\",\n      key: \"animatedAttributeValue\",\n      value: function animatedAttributeValue() {\n        return this.constructionIngredients.attrs.animatedAttrs[this.attribute];\n      }\n    }, {\n      kind: \"set\",\n      key: \"animatedAttributeValue\",\n      value: function animatedAttributeValue(value) {\n        this.constructionIngredients.attrs.animatedAttrs[this.attribute] = value;\n      } // massive editing methods that apply the request massively to all of the\n      // Incidents of all of the contexts\n\n    }, {\n      kind: \"method\",\n      key: \"gotContext\",\n      value: function gotContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].gotContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        for (var context in this.contexts) {\n          this.contexts[context]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var context in this.contexts) {\n          this.contexts[context].lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].onGetContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"getInitialValue\",\n      value: function getInitialValue() {\n        var attribute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        if (attribute === null) {\n          attribute = this.attribute;\n        }\n\n        return this.originalContext.getInitialValue();\n      }\n    }, {\n      kind: \"get\",\n      key: \"initialValue\",\n      value: function initialValue() {\n        return this.getInitialValue();\n      }\n    }, {\n      kind: \"get\",\n      key: \"scratchValue\",\n      value: function scratchValue() {\n        return this.originalContext.scratchValue;\n      }\n    }, {\n      kind: \"get\",\n      key: \"pureInitialValues\",\n      value: function pureInitialValues() {\n        return this.originalContext.pureInitialValues;\n      }\n    }, {\n      kind: \"method\",\n      key: \"setInitialValue\",\n      value: function setInitialValue() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var store = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (value === null) {\n          value = this.getScratchValue();\n        }\n\n        for (var context in this.contexts) {\n          this.contexts[context].setInitialValue(JSON.parse(JSON.stringify(value)), store);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"getScratchValue\",\n      value: function getScratchValue() {\n        var contextId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        if (contextId === null) {\n          var contextsKeys = Object.keys(this.contexts);\n\n          if (Object.prototype.hasOwnProperty.call(this.originalClipContext, 'nonFragmentedContext')) {\n            var ingredientsToPass = _objectSpread({}, this.constructionIngredients, {\n              context: this.originalClipContext.nonFragmentedContext,\n              mcid: this.mcid\n            });\n\n            var tempIncident = incidentFromIngredients(ingredientsToPass);\n            return tempIncident.getScratchValue();\n          } else if (contextsKeys.length === 1) {\n            return this.originalContext.getScratchValue();\n          } else {\n            // prefer another (not the original) context to provide scratch values\n            return this.contexts[contextsKeys[1]].getScratchValue();\n          }\n        }\n\n        return this.contexts[contextId].getScratchValue();\n      }\n    }, {\n      kind: \"method\",\n      key: \"setCompoAttrKeyValue\",\n      value: function setCompoAttrKeyValue(key, value) {\n        for (var context in this.contexts) {\n          this.contexts[context].attrs.animatedAttrs[this.attribute][key] = value;\n          this.contexts[context].lastWish();\n          this.contexts[context].onGetContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"play\",\n      value: function play(fraction, ms, contextId) {\n        return this.contexts[contextId].play(ms);\n      }\n    }, {\n      kind: \"method\",\n      key: \"stop\",\n      value: function stop(contextId) {\n        this.contexts[contextId].stop();\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = ContextAwareIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar DWI = __webpack_require__(/*! ./ElementSplitter */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\");\n\nvar ContextAwareClipIncident = __webpack_require__(/*! ./ContextAwareClipIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Clip/ClipsChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n/**\n * This Class acts as the DOM Aware Incident for Clips. When constructed the Incident passed to\n * it is a Clip with FragmentHTML context handler.\n * On addition, edit or deletion of Incidents on the Fragmented Clip's tree, of the\n * Descriptive Clip this ElementClipSplitter implements, all updates on lanes\n * and everything that these clips need in order to run are made directly to the\n * ContextAwareIncidents of the DescriptiveClip's real Clip.\n */\n\n\nvar ElementClipSplitter =\n/*#__PURE__*/\nfunction (_DWI) {\n  _inherits(ElementClipSplitter, _DWI);\n\n  function ElementClipSplitter(descriptiveIncident, contextData) {\n    var _this;\n\n    _classCallCheck(this, ElementClipSplitter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementClipSplitter).call(this, descriptiveIncident, contextData));\n    _this.realClip = descriptiveIncident.realClip;\n    return _this;\n  }\n\n  _createClass(ElementClipSplitter, [{\n    key: \"_createElementIncident\",\n    value: function _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {\n      var constructionArguments = descriptiveIncident.realClip.exportConstructionArguments();\n      var constructionIngredients = {\n        incidentId: descriptiveIncident.id,\n        attrs: constructionArguments.attrs,\n        props: _objectSpread({}, constructionArguments.props, {\n          selector: contextData.context.getElementSelectorByMCID(mcid),\n          runTimeInfo: descriptiveIncident.runTimeInfo\n        }),\n        Incident: descriptiveIncident.constructor.Incident,\n        plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n        Channel: Channel,\n        DescriptiveIncident: descriptiveIncident\n      };\n      var contextAwareClipIncident = new ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident);\n      this.addChild(contextAwareClipIncident, 0);\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return _get(_getPrototypeOf(ElementClipSplitter.prototype), \"duration\", this);\n    }\n    /*\n    ElementClipSplitter split the DescriptiveClip to element ContextAwareIncidents\n    All of the element ContextAwareClipIncidents instantiated share the same\n    DescriptiveClip and thus the same realClip. So ElementClipSplitter are\n    the Node from where a realClip starts to get copies.\n    Resizing though means resizing the realClip. In order to avoid redunduncy we\n    manage the resize here and we don't pass further down to the ContextAwareClipIncidents\n    the resizing command.\n    */\n    ,\n    set: function set(milliseconds) {\n      this.realClip._resize(milliseconds / this.realClip.duration);\n\n      this._duration = milliseconds;\n    }\n  }]);\n\n  return ElementClipSplitter;\n}(DWI);\n\nmodule.exports = ElementClipSplitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar AnimatedAttributeSplitter = __webpack_require__(/*! ./AnimatedAttributeSplitter */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextAwareIncident = __webpack_require__(/*! ./ContextAwareIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\");\n\nvar ElementSplitter =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(ElementSplitter, _Group);\n\n  function ElementSplitter(descriptiveIncident, contextData) {\n    var _this;\n\n    _classCallCheck(this, ElementSplitter);\n\n    // we make sure the DOMAwareIncident takes the same id as the Descriptive Incident\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementSplitter).call(this, {}, {\n      id: descriptiveIncident.id\n    })); // a property to hold all of the contexts\n\n    _this.contexts = {};\n    _this.contexts[contextData.clipId] = contextData.context;\n    _this.originalContextKey = contextData.clipId;\n    _this.instantiatedCopiesContexts = contextData.instantiatedCopiesContexts;\n\n    _this.setUp(descriptiveIncident, contextData);\n\n    return _this;\n  }\n\n  _createClass(ElementSplitter, [{\n    key: \"setUp\",\n    value: function setUp(descriptiveIncident, contextData) {\n      // the elements of the original context\n      var elements = this.originalContext.getElements(descriptiveIncident.selector()); // the elements for each of the copied contexts\n      // const copiesElements = {};\n      // for (let contextKey in this.instantiatedCopiesContexts) {\n      //     copiesElements[contextKey] = Array.from(this.instantiatedCopiesContexts[contextKey].rootElement.querySelectorAll(descriptiveIncident.props.selector));\n      // }\n\n      var totalElements = elements.length;\n\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i]; // set the mcid of the element on index i of the original context\n\n        var mcid = this._getElementMCID(element); // set the same mcid for the elements of the same context in all of the instantiatedCopiesContexts\n\n\n        for (var contextKey in this.instantiatedCopiesContexts) {\n          // TODO perfrormance improvement via selecting once elements per context\n          this._setElementMCID(this.instantiatedCopiesContexts[contextKey], this.instantiatedCopiesContexts[contextKey].getElements(descriptiveIncident.selector())[i], mcid);\n        }\n\n        this._createElementIncident(element, descriptiveIncident, contextData, i, totalElements, mcid);\n      }\n    }\n  }, {\n    key: \"_getElementMCID\",\n    value: function _getElementMCID(element) {\n      var mcid = this.originalContext.getMCID(element);\n\n      if (!mcid) {\n        mcid = helper.getAnId(true);\n        this.originalContext.setMCID(element, mcid);\n      }\n\n      return mcid;\n    }\n  }, {\n    key: \"_setElementMCID\",\n    value: function _setElementMCID(context, element, mcid) {\n      var existingMCID = context.getMCID(element);\n\n      if (!existingMCID) {\n        context.setMCID(element, mcid);\n      }\n    }\n  }, {\n    key: \"_createElementIncident\",\n    value: function _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {\n      /* elements splitter might handle either attribute Incidents (that have animatedAttrs) or Incidents\n      that do not have animatedAttrs such as MediaPlayback Incidents.\n      In the case of an attributed Incident we proceed by creating one AttributeSplitter for each\n      while on the case of an non-attribured Incident we go ahead and\n      */\n      if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'animatedAttrs')) {\n        var animatedAttributeSplitter = new AnimatedAttributeSplitter(descriptiveIncident, contextData, mcid, contextData.context.getElementSelectorByMCID(mcid));\n        this.addChild(animatedAttributeSplitter, 0);\n      } else if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'keyframes')) {// TODO create a keyframes attribute splitter\n      } else {\n        var attrsToPass = descriptiveIncident.attrs;\n\n        var propsToPass = _objectSpread({}, descriptiveIncident.props, {\n          selector: this.selector\n        });\n\n        var constructionIngredients = {\n          incidentId: descriptiveIncident.id,\n          attrs: attrsToPass,\n          props: propsToPass,\n          Incident: descriptiveIncident.constructor.Incident,\n          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n          Channel: descriptiveIncident.constructor.Channel,\n          DescriptiveIncident: descriptiveIncident\n        };\n        var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, mcid, null);\n        this.addChild(contextAwareIncident, 0);\n      }\n    }\n  }, {\n    key: \"originalContext\",\n    get: function get() {\n      return this.contexts[this.originalContextKey];\n    }\n  }]);\n\n  return ElementSplitter;\n}(Group);\n\nmodule.exports = ElementSplitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar systoleDiastole = __webpack_require__(/*! ./decorators/systoleDiastole */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\");\n\nvar Leaf = _decorate(null, function (_initialize) {\n  var Leaf = function Leaf() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Leaf);\n\n    _initialize(this);\n\n    // parentNode is a reference to the parent Node the Leaf is attached to (if any)\n    this.parentNode = null;\n    this.isNode = false;\n\n    if (Object.prototype.hasOwnProperty.call(props, \"id\")) {\n      this.id = props.id;\n    } else {\n      this.id = helper.getAnId();\n    }\n\n    this.props = props;\n  };\n\n  return {\n    F: Leaf,\n    d: [{\n      kind: \"get\",\n      key: \"delay\",\n      value: function delay() {\n        if (Object.prototype.hasOwnProperty.call(this.props, \"delay\")) {\n          return this.props.delay;\n        }\n\n        return 0;\n      }\n    }, {\n      kind: \"set\",\n      key: \"delay\",\n      value: function delay(val) {\n        if (val != 0) {\n          this.props.delay = val;\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"hiatus\",\n      value: function hiatus() {\n        if (Object.prototype.hasOwnProperty.call(this.props, \"hiatus\")) {\n          return this.props.hiatus;\n        }\n\n        return 0;\n      }\n    }, {\n      kind: \"set\",\n      key: \"hiatus\",\n      value: function hiatus(val) {\n        if (val != 0) {\n          this.props.hiatus = val;\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"repeats\",\n      value: function repeats() {\n        if (Object.prototype.hasOwnProperty.call(this.props, \"repeats\")) {\n          return this.props.repeats;\n        }\n\n        return 1;\n      }\n    }, {\n      kind: \"set\",\n      key: \"repeats\",\n      value: function repeats(val) {\n        this.props.repeats = val;\n      }\n      /**\n       * the full duration of the Leaf taking in consideration all: delay, duration, hiatus and\n       * repeats factor\n       **/\n\n    }, {\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this.repeats * (this.delay + this.props.duration + this.hiatus);\n      }\n      /**\n       * the setter sets the overall duration of the Leaf by altering all\n       * delay, duration and hiatus properties of it\n       **/\n\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(milliseconds) {\n        var fraction = milliseconds / this.duration;\n        this.props.duration *= fraction;\n        this.hiatus *= fraction;\n        this.delay *= fraction;\n      }\n      /**\n       * setNewDuration method sets the new FULL duration as it derives from the\n       * delay, duration, hiatus and repeats factors\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"setNewDuration\",\n      value: function setNewDuration(newDuration) {\n        this.duration = newDuration;\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: false,\n          direction: _CONST._DIRECTIONS._UP\n        });\n      }\n    }, {\n      kind: \"method\",\n      decorators: [systoleDiastole],\n      key: \"systoleDiastole\",\n      value: function systoleDiastole() {}\n    }, {\n      kind: \"get\",\n      key: \"hasParent\",\n      value: function hasParent() {\n        if (this.parentNode === null) {\n          return false;\n        }\n\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"attachToNode\",\n      value: function attachToNode(node) {\n        this.parentNode = node;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        this.parentNode = null;\n      }\n      /**\n      @param {string} name - the name of the message\n      @param {object} payload - the payload of the message\n      @param {object} target - specifies the target of the message in a key-value pairs object\n      @param {object} options - in the form:\n      {\n          direction (either _UP or _DOWN)\n          selfExecute (either true which means the Leaf should try to handle the message itself or\n              false which means the Leaf should directly forward the message to its parent)\n      }\n      @returns The expected result of this method is on the form:\n      {\n          response: an object the structure of which depends on the name of the message\n              and maybe even on the payload\n          responder: a direct reference to the lead that actually responded\n          (only valid for direaction _DOWN) positionDelta: the position delta of the responder compared to the requester\n      }\n      **/\n\n    }, {\n      kind: \"method\",\n      key: \"putMessageOnPipe\",\n      value: function putMessageOnPipe(name, payload, target) {\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n        // default direction: _DOWN\n        if (!Object.prototype.hasOwnProperty.call(options, \"direction\")) {\n          options.direction = _CONST._DIRECTIONS._DOWN;\n        } // default positionDelta = 0\n\n\n        if (options.direction === _CONST._DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, \"positionDelta\")) {\n          options.positionDelta = 0;\n        }\n\n        if (options.selfExecute === true) {\n          // if the Leaf has a \"handle<name>\" method with the first letter of\n          // name in Capital it runs it\n          var handlingMethodName = \"handle\".concat(helper.jsUcfirst(name));\n          var capable = typeof this[handlingMethodName] === 'function';\n\n          if (capable) {\n            var response = this[handlingMethodName](target, payload);\n\n            if (response !== _CONST._BYPASS) {\n              var result = {\n                response: response,\n                responder: this\n              };\n\n              if (options.direction === _CONST._DIRECTIONS._UP) {\n                return result;\n              } else {\n                return [_objectSpread({}, result, {\n                  positionDelta: options.positionDelta\n                })];\n              }\n            }\n          }\n        }\n\n        if (options.direction === _CONST._DIRECTIONS._UP) {\n          if (this.hasParent) {\n            return this.parentNode.putMessageOnPipe(name, payload, target, {\n              selfExecute: true,\n              direction: _CONST._DIRECTIONS._UP\n            });\n          } else {\n            // if the message reaches the top of the tree without finding any liable target\n            return {\n              response: false,\n              responder: null\n            };\n          }\n        } else {\n          // _CONST._DIRECTIONS._DOWN\n          return [];\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"bypass\",\n      value: function bypass() {\n        return _CONST._BYPASS;\n      }\n    }]\n  };\n});\n\nmodule.exports = Leaf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Leaf = __webpack_require__(/*! ./Leaf */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar _COPY = __webpack_require__(/*! ./_copy */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js\");\n\nvar systoleDiastole = __webpack_require__(/*! ./decorators/systoleDiastole */ \"./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\");\n\nvar Node = _decorate(null, function (_initialize, _Leaf) {\n  var Node =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(Node, _Leaf2);\n\n    function Node() {\n      var _this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, Node);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.isNode = true;\n      /**\n        The object holds the Incidents of the Scene on the format:\n        {\n            <id>: {\n                  id // the id of the Incident object\n                  leaf // the incident object\n                  position // the position of the incident\n            },\n            ...\n        }\n         */\n\n      _this.children = {};\n      _this.calculatedDuration = 0;\n      return _this;\n    }\n\n    return Node;\n  }(_Leaf);\n\n  return {\n    F: Node,\n    d: [{\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this.calculatedDuration;\n      }\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(newDuration) {\n        var durationFraction = newDuration / this.duration;\n\n        if (this.props) {\n          if (Object.prototype.hasOwnProperty.call(this.props, \"duration\")) {\n            this.props.duration = newDuration;\n          }\n        }\n\n        this.calculatedDuration = newDuration;\n\n        for (var childKey in this.children) {\n          var child = this.children[childKey];\n          this.editPosition(child.id, child.position * durationFraction, true);\n          child.leaf.systoleDiastole(durationFraction);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"setNewDuration\",\n      value: function setNewDuration(newDuration) {\n        this.duration = newDuration;\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: false,\n          direction: _CONST._DIRECTIONS._UP\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_calculateDuration\",\n      value: function _calculateDuration() {\n        var duration = 0;\n\n        for (var childKey in this.children) {\n          var child = this.children[childKey];\n\n          if (child.position + child.leaf.duration > duration) {\n            duration = child.position + child.leaf.duration;\n          }\n        }\n\n        if (duration === this.calculatedDuration) {\n          return false;\n        }\n\n        if (this.props) {\n          if (Object.prototype.hasOwnProperty.call(this.props, \"duration\")) {\n            this.props.duration = duration;\n          }\n        }\n\n        this.calculatedDuration = duration;\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [systoleDiastole],\n      key: \"systoleDiastole\",\n      value: function systoleDiastole() {}\n    }, {\n      kind: \"method\",\n      key: \"handleRecalcDuration\",\n      value: function handleRecalcDuration(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this._calculateDuration()) {\n          return this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n            selfExecute: false,\n            direction: _CONST._DIRECTIONS._UP\n          });\n        }\n\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"getLeafById\",\n      value: function getLeafById(id) {\n        var onlyDirectChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return this.children[id].leaf;\n        } else if (onlyDirectChild === false) {\n          for (var child in this.children) {\n            var childLeaf = this.children[child].leaf;\n\n            if (childLeaf.isNode) {\n              var leaf = childLeaf.getLeafById(id);\n\n              if (leaf != null) {\n                return leaf;\n              }\n            }\n          }\n        } else {\n          return null;\n        }\n\n        return null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"getLeafPosition\",\n      value: function getLeafPosition(id) {\n        return this.children[id].position;\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkAddition\",\n      value: function checkAddition(leaf, position) {\n        if (leaf.hasParent) {\n          return {\n            result: false,\n            reason: _COPY._LEAFALREADYASSIGNED\n          };\n        }\n\n        if (position < 0) {\n          return {\n            result: false,\n            reason: _COPY._NEGATIVEPOSITIONNOTALLOWED\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"addChild\",\n      value: function addChild(leaf, position) {\n        // this hasParent check occurs here as an extra security check so it\n        // gets executed regardless if the user wants to perform checks or not\n        if (leaf.hasParent) {\n          return {\n            result: false,\n            reason: _COPY._LEAFALREADYASSIGNED\n          };\n        }\n\n        this.children[leaf.id] = {\n          id: leaf.id,\n          leaf: leaf,\n          position: position\n        };\n        leaf.attachToNode(this);\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _CONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkRemoveChild\",\n      value: function checkRemoveChild(id) {\n        if (!Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return {\n            result: false,\n            reason: _COPY._LEAFNOTFOUND\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"removeChild\",\n      value: function removeChild(id) {\n        this.children[id].leaf.detachFromParent();\n        delete this.children[id];\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _CONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkEditPosition\",\n      value: function checkEditPosition(id, position) {\n        if (position < 0) {\n          return {\n            result: false,\n            reason: _COPY._NEGATIVEPOSITIONNOTALLOWED\n          };\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return {\n            result: false,\n            reason: _COPY._LEAFNOTFOUND\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"editPosition\",\n      value: function editPosition(id, position) {\n        var bypassRecalcDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n          this.children[id].position = position;\n\n          if (bypassRecalcDuration === false) {\n            this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _CONST._DIRECTIONS._UP\n            });\n          }\n\n          return {\n            result: true\n          };\n        }\n      }\n      /**\n      The expected result of this method depends on the direction of the message\n      The direction might either be _UP or _DOWN.\n      In the case of _UP the expected result is identical as on Leaf:\n      {\n          response: an object the structure of which depends on the name of the message\n              and maybe even on the payload\n          responder: a direct reference to the lead that actually responded\n      }\n      In the case of _DOWN though, where multiple Leafs might be eligible in the tree\n      for handling the message the result is on the form:\n      [\n          {\n              response: an object the structure of which depends on the name of the message\n                  and maybe even on the payload\n              responder: a direct reference to the lead that actually responded\n              positionDelta: the position delta of the responder compared to the requester\n          }\n      ]\n      */\n\n    }, {\n      kind: \"method\",\n      key: \"putMessageOnPipe\",\n      value: function putMessageOnPipe(name, payload, target) {\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n        // default direction: _DOWN\n        if (!Object.prototype.hasOwnProperty.call(options, 'direction')) {\n          options.direction = _CONST._DIRECTIONS._DOWN;\n        } // default positionDelta = 0\n\n\n        if (options.direction === _CONST._DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, 'positionDelta')) {\n          options.positionDelta = 0;\n        }\n\n        if (options.direction === _CONST._DIRECTIONS._UP) {\n          // if the direction is up\n          return _get(_getPrototypeOf(Node.prototype), \"putMessageOnPipe\", this).call(this, name, payload, target, options); // act exactly as any other Leaf\n        } else {\n          var result = _get(_getPrototypeOf(Node.prototype), \"putMessageOnPipe\", this).call(this, name, payload, target, options);\n\n          if (result.length > 0) {\n            return result;\n          }\n\n          for (var child in this.children) {\n            var leaf = this.children[child].leaf;\n\n            var newOptions = _objectSpread({}, options, {\n              selfExecute: true,\n              positionDelta: options.positionDelta + this.children[child].position\n            });\n\n            result = result.concat(leaf.putMessageOnPipe(name, payload, target, newOptions));\n          }\n\n          return result;\n        }\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = Node;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _STATE: {\n    _ROOTOFTREE: \"root_of_descriptive_clip\",\n    // this Descriptive Incident is directly attached to a real Clip\n    _FREE: \"free\" // this DI is neither attached to a real Clip nor has a parent on the Descriptive Tree\n\n  },\n  _DIRECTIONS: {\n    _UP: \"up\",\n    _DOWN: \"down\"\n  },\n  _TARGETTYPES: {\n    _ROOTOFTREE: \"native.tree.rootoftree\"\n  },\n  _BYPASS: \"native.tree.bypass\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvX0NPTlNULmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9UcmVlL19DT05TVC5qcz84NjViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgX1NUQVRFOiB7XG4gICAgX1JPT1RPRlRSRUU6IFwicm9vdF9vZl9kZXNjcmlwdGl2ZV9jbGlwXCIsXG4gICAgLy8gdGhpcyBEZXNjcmlwdGl2ZSBJbmNpZGVudCBpcyBkaXJlY3RseSBhdHRhY2hlZCB0byBhIHJlYWwgQ2xpcFxuICAgIF9GUkVFOiBcImZyZWVcIiAvLyB0aGlzIERJIGlzIG5laXRoZXIgYXR0YWNoZWQgdG8gYSByZWFsIENsaXAgbm9yIGhhcyBhIHBhcmVudCBvbiB0aGUgRGVzY3JpcHRpdmUgVHJlZVxuXG4gIH0sXG4gIF9ESVJFQ1RJT05TOiB7XG4gICAgX1VQOiBcInVwXCIsXG4gICAgX0RPV046IFwiZG93blwiXG4gIH0sXG4gIF9UQVJHRVRUWVBFUzoge1xuICAgIF9ST09UT0ZUUkVFOiBcIm5hdGl2ZS50cmVlLnJvb3RvZnRyZWVcIlxuICB9LFxuICBfQllQQVNTOiBcIm5hdGl2ZS50cmVlLmJ5cGFzc1wiXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _LEAFALREADYASSIGNED: \"Leaf has already been attached to another Node\",\n  _NEGATIVEPOSITIONNOTALLOWED: \"Negative positioning of childs on nodes is not allowed\",\n  _LEAFNOTFOUND: \"The Leaf with the requested id couldn't be found on the Tree\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvX2NvcHkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvX2NvcHkuanM/MDczOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIF9MRUFGQUxSRUFEWUFTU0lHTkVEOiBcIkxlYWYgaGFzIGFscmVhZHkgYmVlbiBhdHRhY2hlZCB0byBhbm90aGVyIE5vZGVcIixcbiAgX05FR0FUSVZFUE9TSVRJT05OT1RBTExPV0VEOiBcIk5lZ2F0aXZlIHBvc2l0aW9uaW5nIG9mIGNoaWxkcyBvbiBub2RlcyBpcyBub3QgYWxsb3dlZFwiLFxuICBfTEVBRk5PVEZPVU5EOiBcIlRoZSBMZWFmIHdpdGggdGhlIHJlcXVlc3RlZCBpZCBjb3VsZG4ndCBiZSBmb3VuZCBvbiB0aGUgVHJlZVwiXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * this method acts as a proxy to duration setter by taking a fraction and not\n * an absolute number for the overall duration of the Leaf\n **/\nfunction systoleDiastole(payload) {\n  payload.descriptor.value = function (durationFraction) {\n    this.duration = this.duration * durationFraction;\n  };\n}\n\nmodule.exports = systoleDiastole;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvZGVjb3JhdG9ycy9zeXN0b2xlRGlhc3RvbGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvZGVjb3JhdG9ycy9zeXN0b2xlRGlhc3RvbGUuanM/OWZhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiB0aGlzIG1ldGhvZCBhY3RzIGFzIGEgcHJveHkgdG8gZHVyYXRpb24gc2V0dGVyIGJ5IHRha2luZyBhIGZyYWN0aW9uIGFuZCBub3RcbiAqIGFuIGFic29sdXRlIG51bWJlciBmb3IgdGhlIG92ZXJhbGwgZHVyYXRpb24gb2YgdGhlIExlYWZcbiAqKi9cbmZ1bmN0aW9uIHN5c3RvbGVEaWFzdG9sZShwYXlsb2FkKSB7XG4gIHBheWxvYWQuZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uIChkdXJhdGlvbkZyYWN0aW9uKSB7XG4gICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24gKiBkdXJhdGlvbkZyYWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN5c3RvbGVEaWFzdG9sZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  'atTheEndOfTheGroup': {\n    value: 'end',\n    purpose: \"It's used on Groups and more specifically on the addIncident (and thus also on addPassiveIncident) methods. It\\n            implies that the millisecond for the new incident to be added should be at the end of the Group\"\n  },\n  notCalculateableScratchValue: \"motorcortex2__notCalculateableScratchValue\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb25maWd1cmF0aW9uL19DT05TVC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvX2NvbmZpZ3VyYXRpb24vX0NPTlNULmpzPzM0MDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAnYXRUaGVFbmRPZlRoZUdyb3VwJzoge1xuICAgIHZhbHVlOiAnZW5kJyxcbiAgICBwdXJwb3NlOiBcIkl0J3MgdXNlZCBvbiBHcm91cHMgYW5kIG1vcmUgc3BlY2lmaWNhbGx5IG9uIHRoZSBhZGRJbmNpZGVudCAoYW5kIHRodXMgYWxzbyBvbiBhZGRQYXNzaXZlSW5jaWRlbnQpIG1ldGhvZHMuIEl0XFxuICAgICAgICAgICAgaW1wbGllcyB0aGF0IHRoZSBtaWxsaXNlY29uZCBmb3IgdGhlIG5ldyBpbmNpZGVudCB0byBiZSBhZGRlZCBzaG91bGQgYmUgYXQgdGhlIGVuZCBvZiB0aGUgR3JvdXBcIlxuICB9LFxuICBub3RDYWxjdWxhdGVhYmxlU2NyYXRjaFZhbHVlOiBcIm1vdG9yY29ydGV4Ml9fbm90Q2FsY3VsYXRlYWJsZVNjcmF0Y2hWYWx1ZVwiXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\nknown events:\n- state-change / meta: the name of the new state\n- attribute-rejection / meta: animationID, attributes\n- animation-rejection / meta: animationID\n- conflicts-on-edit\n*/\nvar conf = {\n  keyframe_sec_key: 'sec_',\n  elements_data_attribute_name: 'data-motorcortex2-id',\n  selfContainedContextHandler: 'closed',\n  logLevel: 1,\n  testMode: true,\n  logTypes: [{\n    key: 'info',\n    style: 'color: #666;',\n    level: 5\n  }, {\n    key: 'notice',\n    style: 'background: rgba(0, 0, 0, 0.8); color:white; padding:8px;',\n    level: 4\n  }, {\n    key: 'warning',\n    style: 'color: black; background: orange;',\n    level: 2\n  }, {\n    key: 'error',\n    style: 'color: black; background: red;',\n    level: 1\n  }]\n};\nmodule.exports = conf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb25maWd1cmF0aW9uL2dlbmVyYWxDb25mLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZi5qcz85YjY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxua25vd24gZXZlbnRzOlxuLSBzdGF0ZS1jaGFuZ2UgLyBtZXRhOiB0aGUgbmFtZSBvZiB0aGUgbmV3IHN0YXRlXG4tIGF0dHJpYnV0ZS1yZWplY3Rpb24gLyBtZXRhOiBhbmltYXRpb25JRCwgYXR0cmlidXRlc1xuLSBhbmltYXRpb24tcmVqZWN0aW9uIC8gbWV0YTogYW5pbWF0aW9uSURcbi0gY29uZmxpY3RzLW9uLWVkaXRcbiovXG52YXIgY29uZiA9IHtcbiAga2V5ZnJhbWVfc2VjX2tleTogJ3NlY18nLFxuICBlbGVtZW50c19kYXRhX2F0dHJpYnV0ZV9uYW1lOiAnZGF0YS1tb3RvcmNvcnRleDItaWQnLFxuICBzZWxmQ29udGFpbmVkQ29udGV4dEhhbmRsZXI6ICdjbG9zZWQnLFxuICBsb2dMZXZlbDogMSxcbiAgdGVzdE1vZGU6IHRydWUsXG4gIGxvZ1R5cGVzOiBbe1xuICAgIGtleTogJ2luZm8nLFxuICAgIHN0eWxlOiAnY29sb3I6ICM2NjY7JyxcbiAgICBsZXZlbDogNVxuICB9LCB7XG4gICAga2V5OiAnbm90aWNlJyxcbiAgICBzdHlsZTogJ2JhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC44KTsgY29sb3I6d2hpdGU7IHBhZGRpbmc6OHB4OycsXG4gICAgbGV2ZWw6IDRcbiAgfSwge1xuICAgIGtleTogJ3dhcm5pbmcnLFxuICAgIHN0eWxlOiAnY29sb3I6IGJsYWNrOyBiYWNrZ3JvdW5kOiBvcmFuZ2U7JyxcbiAgICBsZXZlbDogMlxuICB9LCB7XG4gICAga2V5OiAnZXJyb3InLFxuICAgIHN0eWxlOiAnY29sb3I6IGJsYWNrOyBiYWNrZ3JvdW5kOiByZWQ7JyxcbiAgICBsZXZlbDogMVxuICB9XVxufTtcbm1vZHVsZS5leHBvcnRzID0gY29uZjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_configuration/propsValidationRules.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_configuration/propsValidationRules.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar easingRule = [{\n  type: \"string\",\n  optional: true,\n  \"default\": 'linear',\n  \"enum\": ['linear', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', 'easeInCubic', 'easeOutCubic', 'easeInOutCubic', 'easeInQuart', 'easeOutQuart', 'easeInOutQuart', 'easeInQuint', 'easeOutQuint', 'easeInOutQuint', 'easeInSine', 'easeOutSine', 'easeInOutSine', 'easeInExpo', 'easeOutExpo', 'easeInOutExpo', 'easeInCirc', 'easeOutCirc', 'easeInOutCirc', 'easeInElastic', 'easeOutElastic', 'easeInOutElastic', 'easeInBack', 'easeOutBack', 'easeInOutBack', 'easeInBounce', 'easeOutBounce', 'easeInOutBounce']\n}, {\n  type: 'array',\n  optional: true,\n  length: 4,\n  items: {\n    type: 'number'\n  }\n}];\nvar idRule = {\n  type: 'string',\n  optional: true\n};\nvar selectorRule = {\n  type: 'string',\n  optional: false\n};\nvar hostRule = {\n  type: 'any',\n  optional: false\n};\nvar durationRule = {\n  type: 'number',\n  optional: false,\n  integer: true,\n  positive: true\n};\nvar optionalStringRule = {\n  type: 'string',\n  optional: true\n};\nvar fontsRule = {\n  type: 'array',\n  optional: true,\n  itams: {\n    type: 'object',\n    props: {\n      type: 'string',\n      url: 'string'\n    }\n  }\n};\nvar audioSourcesRule = {\n  type: 'array',\n  items: {\n    type: 'object',\n    strict: true,\n    props: {\n      src: 'string',\n      id: 'string',\n      mcid: {\n        type: 'string',\n        optional: true\n      },\n      classes: {\n        type: 'array',\n        optional: true,\n        items: 'string'\n      },\n      base64: {\n        type: 'boolean',\n        optional: true\n      }\n    }\n  },\n  optional: true\n};\nvar incidentPropsRule = {\n  props: {\n    type: 'object',\n    props: {\n      id: idRule,\n      selector: _objectSpread({}, selectorRule, {\n        optional: true\n      }),\n      // can have no selector as it might inherit it from Group\n      easing: easingRule,\n      duration: durationRule,\n      startFrom: {\n        type: 'number',\n        integer: true,\n        positive: true,\n        optional: true\n      },\n      repeats: {\n        type: 'number',\n        integer: true,\n        positive: true,\n        optional: true\n      },\n      hiatus: {\n        type: 'number',\n        integer: true,\n        positive: true,\n        optional: true\n      },\n      delay: {\n        type: 'number',\n        integer: true,\n        positive: true,\n        optional: true\n      }\n    }\n  }\n};\nvar containerParamsRule = {\n  type: 'object',\n  optional: true,\n  props: {\n    width: {\n      type: 'string',\n      optional: true\n    },\n    height: {\n      type: 'string',\n      optional: true\n    }\n  }\n};\nvar audioOnClipsRule = {\n  type: 'string',\n  \"enum\": ['on', 'off'],\n  optional: true\n};\nvar clipPropsRule = {\n  props: [{\n    type: 'object',\n    strict: true,\n    props: {\n      id: idRule,\n      selector: _objectSpread({}, selectorRule, {\n        optional: true\n      }),\n      easing: easingRule,\n      html: optionalStringRule,\n      css: optionalStringRule,\n      audioSources: audioSourcesRule,\n      audio: audioOnClipsRule,\n      containerParams: containerParamsRule,\n      fonts: fontsRule\n    }\n  }, {\n    type: 'object',\n    strict: true,\n    props: {\n      id: idRule,\n      host: hostRule,\n      html: optionalStringRule,\n      css: optionalStringRule,\n      audioSources: audioSourcesRule,\n      audio: audioOnClipsRule,\n      containerParams: containerParamsRule,\n      fonts: fontsRule\n    }\n  }, {\n    type: 'object',\n    strict: true,\n    props: {\n      root: {\n        type: 'boolean',\n        optional: true\n      },\n      id: idRule,\n      audioSources: audioSourcesRule,\n      audio: _objectSpread({}, audioOnClipsRule, {\n        \"enum\": ['on']\n      })\n    }\n  }]\n};\nvar groupPropsRule = {\n  selector: _objectSpread({}, selectorRule, {\n    optional: true\n  })\n};\nvar mediaPlaybackPropsRule = {\n  type: 'object',\n  props: {\n    selector: selectorRule,\n    duration: durationRule\n  }\n};\nmodule.exports = {\n  incidentPropsRule: incidentPropsRule,\n  groupPropsRule: groupPropsRule,\n  mediaPlaybackPropsRule: mediaPlaybackPropsRule,\n  clipPropsRule: clipPropsRule\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_configuration/propsValidationRules.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Validator = __webpack_require__(/*! fastest-validator */ \"./node_modules/fastest-validator/dist/index.min.js\");\n/** @classdesc Helper maintains a number of helpful functions in a single point  */\n\n\nvar conf = __webpack_require__(/*! ../_configuration/generalConf */ \"./node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\"); // audio context initialisation\n\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\nvar audioContext = new window.AudioContext();\n\nvar Helper =\n/*#__PURE__*/\nfunction () {\n  function Helper(configuration) {\n    _classCallCheck(this, Helper);\n\n    var logLevel = conf.logLevel;\n\n    if (configuration) {\n      if (Object.prototype.hasOwnProperty.call(configuration, \"logLevel\")) {\n        logLevel = configuration.logLevel;\n      }\n    }\n\n    this.lanesMCIDattrsSeperator = '___';\n\n    for (var i = 0; i < conf.logTypes.length; i++) {\n      var logType = conf.logTypes[i];\n\n      if (logLevel >= logType.level) {\n        if (conf.testMode === true) {\n          this[logType.key] = window.console.log.bind(window.console, \"MotorCortex - \".concat(logType.key, \": \"));\n        } else {\n          this[logType.key] = window.console.log.bind(window.console, \"MotorCortex - %c%s\", logType.style);\n        }\n      } else this[logType.key] = function () {};\n    }\n\n    if (logLevel >= 3) {\n      this.log = window.console.log.bind(window.console, \"MotorCortex - \");\n    } else this.log = function () {};\n  }\n\n  _createClass(Helper, [{\n    key: \"getAudioContext\",\n    value: function getAudioContext() {\n      return audioContext;\n    }\n  }, {\n    key: \"renderTemplate\",\n    value: function renderTemplate(templateString, templateVars) {\n      return new Function(\"return `\" + templateString + \"`;\").call(templateVars);\n    }\n  }, {\n    key: \"validateProps\",\n    value: function validateProps(props, rules, constructor) {\n      var v = new Validator();\n      var validationResult = v.validate(props, rules);\n\n      if (validationResult.length > 0) {\n        var errorMessage = \"Error on plugin's \\\"\".concat(constructor.plugin_npm_name, \"\\\" \\\"\").concat(constructor.ClassName, \"\\\" instantiation. Errors (op props):\");\n\n        for (var i = 0; i < validationResult.length; i++) {\n          errorMessage += \"\\n - \".concat(validationResult[i].message, \". \").concat(validationResult[i].actual, \" provided\");\n        }\n\n        console.error(errorMessage);\n        return {\n          result: false,\n          errors: validationResult\n        };\n      }\n\n      return {\n        result: true\n      };\n    }\n    /**\n     * @returns {string} in the form \"1bc45f78-ab23-jl59\"\n     */\n\n  }, {\n    key: \"getAnId\",\n    value: function getAnId() {\n      var underscore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var specialChar = '-';\n\n      if (underscore) {\n        specialChar = '_';\n      }\n\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n\n      return s4() + s4() + specialChar + s4() + specialChar + s4();\n    }\n  }, {\n    key: \"getLaneKey\",\n    value: function getLaneKey(mcid, attribute) {\n      return mcid + this.lanesMCIDattrsSeperator + attribute;\n    }\n  }, {\n    key: \"getLaneDataFromLaneKey\",\n    value: function getLaneDataFromLaneKey(laneKey) {\n      var ar = laneKey.split(this.lanesMCIDattrsSeperator);\n      return {\n        mcid: ar[0],\n        attribute: ar[1]\n      };\n    }\n  }, {\n    key: \"getMCIDandAttrOutOfLaneKey\",\n    value: function getMCIDandAttrOutOfLaneKey(laneKey) {\n      var laneArray = laneKey.split(this.lanesMCIDattrsSeperator);\n      return {\n        mcid: laneArray[0],\n        attribute: laneArray[1]\n      };\n    }\n  }, {\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(context, mcid) {\n      return context.rootElement.querySelectorAll('[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]')[0];\n    }\n    /**\n    subdivision might be rounding the number to its:\n    - units (subdivision = 1)\n    - tenths (subdivision = 10)\n    - hundreds (subdivision = 100)\n    - thousands (subdivision = 1000)\n     @param {string} int\n     @param {subdivision} int\n     @returns {int} the rounded number\n    */\n\n  }, {\n    key: \"roundNumberTo\",\n    value: function roundNumberTo(number, subdivision) {\n      return Math.round(number / subdivision) * subdivision;\n    }\n  }, {\n    key: \"isInteger\",\n    value: function isInteger(number) {\n      if (number === parseInt(number, 10)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"isString\",\n    value: function isString(test) {\n      if (typeof test === 'string' || test instanceof String) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"isObject\",\n    value: function isObject(test) {\n      return _typeof(test) === \"object\";\n    }\n  }, {\n    key: \"isArray\",\n    value: function isArray(test) {\n      return Array.isArray(test);\n    }\n  }, {\n    key: \"isFunction\",\n    value: function isFunction(functionToCheck) {\n      return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n    }\n    /**\n     * systole / diastole of the projections\n     * @returns {array} - collection of objects with keys: {id, start, end, startDelta}\n     **/\n\n  }, {\n    key: \"systoleDiastoleProjections\",\n    value: function systoleDiastoleProjections(projections, durationFraction, anchorPoint) {\n      var alteredProjections = [];\n\n      for (var i = 0; i < projections.length; i++) {\n        var projectedIncident = projections[i];\n        var msInResizedPortion = projectedIncident.parentMillisecond - anchorPoint;\n\n        if (durationFraction != 1) {\n          alteredProjections.push({\n            id: projectedIncident.incident.id,\n            start: msInResizedPortion * durationFraction + anchorPoint,\n            end: msInResizedPortion * durationFraction + anchorPoint + projectedIncident.incident.duration * durationFraction,\n            startDelta: msInResizedPortion * durationFraction + anchorPoint - projectedIncident.millisecond\n          });\n        }\n      }\n\n      return alteredProjections;\n    }\n  }, {\n    key: \"jsUcfirst\",\n    value: function jsUcfirst(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n  }]);\n\n  return Helper;\n}();\n\nmodule.exports = Helper;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Journey =\n/*#__PURE__*/\nfunction () {\n  function Journey(props) {\n    _classCallCheck(this, Journey);\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"incident\")) {\n      helper.error('Journey constructor expects an Incident on its properties on the key \"incident\"');\n      return false;\n    }\n\n    this.memory = props.calpuleMemory;\n    this.stations = [];\n    this.incident = props.incident;\n    this.startMillisecond = this.incident.runTimeInfo.currentMillisecond * 1;\n    this.startState = this.incident.runTimeInfo.state + \"\";\n    this.incident.stop();\n  }\n\n  _createClass(Journey, [{\n    key: \"station\",\n    value: function station(millisecond) {\n      var props = {};\n\n      if (this.stations.length > 0) {\n        props.previousStop = this.stations[this.stations.length - 1];\n      }\n\n      this.stations.push(millisecond); // helper.log(`CAPSULE passes as previousStop: ${props.previousStop}`);\n      // helper.log(this.stations);\n\n      this.incident.playableProgress(millisecond / this.incident.duration, millisecond);\n    }\n  }, {\n    key: \"destination\",\n    value: function destination() {\n      var millisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (millisecond != null) {\n        this.station(millisecond);\n      } else {\n        millisecond = this.stations[this.stations.length - 1];\n      }\n\n      this.incident.playableProgress(millisecond / this.incident.duration, millisecond); // if the clip was playing start it again\n\n      if (this.startState === 'playing' || this.startState === \"blocked\" && this.incident.statusBeforeBlock === \"playing\") {\n        this.incident.play();\n      } else {\n        if (millisecond >= this.incident.duration) {\n          this.incident.complete();\n        } else {\n          this.incident.arm();\n        }\n      }\n\n      this.memory.push(this.exportJourneyLog);\n    }\n  }, {\n    key: \"exportJourneyLog\",\n    value: function exportJourneyLog() {\n      return {\n        startMillisecond: this.startMillisecond,\n        startState: this.startState,\n        stations: this.stations\n      };\n    }\n  }]);\n\n  return Journey;\n}();\n\nvar TimeCapsule =\n/*#__PURE__*/\nfunction () {\n  function TimeCapsule() {\n    _classCallCheck(this, TimeCapsule);\n\n    this.memory = [];\n  }\n\n  _createClass(TimeCapsule, [{\n    key: \"startJourney\",\n    value: function startJourney(incident) {\n      if (!incident) {\n        helper.error('startJourney expects an Incident as an argument');\n        return false;\n      }\n\n      return new Journey({\n        incident: incident,\n        calpuleMemory: this.memory\n      });\n    }\n  }]);\n\n  return TimeCapsule;\n}();\n\nmodule.exports = TimeCapsule;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb3JlVXRpbHMvVGltZUNhcHN1bGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb3JlVXRpbHMvVGltZUNhcHN1bGUuanM/YmIyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIEpvdXJuZXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKb3VybmV5KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpvdXJuZXkpO1xuXG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIFwiaW5jaWRlbnRcIikpIHtcbiAgICAgIGhlbHBlci5lcnJvcignSm91cm5leSBjb25zdHJ1Y3RvciBleHBlY3RzIGFuIEluY2lkZW50IG9uIGl0cyBwcm9wZXJ0aWVzIG9uIHRoZSBrZXkgXCJpbmNpZGVudFwiJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5tZW1vcnkgPSBwcm9wcy5jYWxwdWxlTWVtb3J5O1xuICAgIHRoaXMuc3RhdGlvbnMgPSBbXTtcbiAgICB0aGlzLmluY2lkZW50ID0gcHJvcHMuaW5jaWRlbnQ7XG4gICAgdGhpcy5zdGFydE1pbGxpc2Vjb25kID0gdGhpcy5pbmNpZGVudC5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQgKiAxO1xuICAgIHRoaXMuc3RhcnRTdGF0ZSA9IHRoaXMuaW5jaWRlbnQucnVuVGltZUluZm8uc3RhdGUgKyBcIlwiO1xuICAgIHRoaXMuaW5jaWRlbnQuc3RvcCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEpvdXJuZXksIFt7XG4gICAga2V5OiBcInN0YXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhdGlvbihtaWxsaXNlY29uZCkge1xuICAgICAgdmFyIHByb3BzID0ge307XG5cbiAgICAgIGlmICh0aGlzLnN0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcHJvcHMucHJldmlvdXNTdG9wID0gdGhpcy5zdGF0aW9uc1t0aGlzLnN0YXRpb25zLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXRpb25zLnB1c2gobWlsbGlzZWNvbmQpOyAvLyBoZWxwZXIubG9nKGBDQVBTVUxFIHBhc3NlcyBhcyBwcmV2aW91c1N0b3A6ICR7cHJvcHMucHJldmlvdXNTdG9wfWApO1xuICAgICAgLy8gaGVscGVyLmxvZyh0aGlzLnN0YXRpb25zKTtcblxuICAgICAgdGhpcy5pbmNpZGVudC5wbGF5YWJsZVByb2dyZXNzKG1pbGxpc2Vjb25kIC8gdGhpcy5pbmNpZGVudC5kdXJhdGlvbiwgbWlsbGlzZWNvbmQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZXN0aW5hdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0aW5hdGlvbigpIHtcbiAgICAgIHZhciBtaWxsaXNlY29uZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblxuICAgICAgaWYgKG1pbGxpc2Vjb25kICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdGF0aW9uKG1pbGxpc2Vjb25kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1pbGxpc2Vjb25kID0gdGhpcy5zdGF0aW9uc1t0aGlzLnN0YXRpb25zLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluY2lkZW50LnBsYXlhYmxlUHJvZ3Jlc3MobWlsbGlzZWNvbmQgLyB0aGlzLmluY2lkZW50LmR1cmF0aW9uLCBtaWxsaXNlY29uZCk7IC8vIGlmIHRoZSBjbGlwIHdhcyBwbGF5aW5nIHN0YXJ0IGl0IGFnYWluXG5cbiAgICAgIGlmICh0aGlzLnN0YXJ0U3RhdGUgPT09ICdwbGF5aW5nJyB8fCB0aGlzLnN0YXJ0U3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIHRoaXMuaW5jaWRlbnQuc3RhdHVzQmVmb3JlQmxvY2sgPT09IFwicGxheWluZ1wiKSB7XG4gICAgICAgIHRoaXMuaW5jaWRlbnQucGxheSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kID49IHRoaXMuaW5jaWRlbnQuZHVyYXRpb24pIHtcbiAgICAgICAgICB0aGlzLmluY2lkZW50LmNvbXBsZXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbmNpZGVudC5hcm0oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm1lbW9yeS5wdXNoKHRoaXMuZXhwb3J0Sm91cm5leUxvZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4cG9ydEpvdXJuZXlMb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhwb3J0Sm91cm5leUxvZygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0TWlsbGlzZWNvbmQ6IHRoaXMuc3RhcnRNaWxsaXNlY29uZCxcbiAgICAgICAgc3RhcnRTdGF0ZTogdGhpcy5zdGFydFN0YXRlLFxuICAgICAgICBzdGF0aW9uczogdGhpcy5zdGF0aW9uc1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSm91cm5leTtcbn0oKTtcblxudmFyIFRpbWVDYXBzdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGltZUNhcHN1bGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWVDYXBzdWxlKTtcblxuICAgIHRoaXMubWVtb3J5ID0gW107XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGltZUNhcHN1bGUsIFt7XG4gICAga2V5OiBcInN0YXJ0Sm91cm5leVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydEpvdXJuZXkoaW5jaWRlbnQpIHtcbiAgICAgIGlmICghaW5jaWRlbnQpIHtcbiAgICAgICAgaGVscGVyLmVycm9yKCdzdGFydEpvdXJuZXkgZXhwZWN0cyBhbiBJbmNpZGVudCBhcyBhbiBhcmd1bWVudCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSm91cm5leSh7XG4gICAgICAgIGluY2lkZW50OiBpbmNpZGVudCxcbiAgICAgICAgY2FscHVsZU1lbW9yeTogdGhpcy5tZW1vcnlcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUaW1lQ2Fwc3VsZTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUaW1lQ2Fwc3VsZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/easings.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/easings.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar easing = {\n  linear: function linear(fraction) {\n    return fraction;\n  },\n  easeInQuad: function easeInQuad(fraction) {\n    return fraction * fraction;\n  },\n  easeOutQuad: function easeOutQuad(fraction) {\n    return fraction * (2 - fraction);\n  },\n  easeInOutQuad: function easeInOutQuad(fraction) {\n    return fraction < .5 ? 2 * fraction * fraction : -1 + (4 - 2 * fraction) * fraction;\n  },\n  easeInCubic: function easeInCubic(fraction) {\n    return fraction * fraction * fraction;\n  },\n  easeOutCubic: function easeOutCubic(fraction) {\n    return --fraction * fraction * fraction + 1;\n  },\n  easeInOutCubic: function easeInOutCubic(fraction) {\n    return fraction < .5 ? 4 * fraction * fraction * fraction : (fraction - 1) * (2 * fraction - 2) * (2 * fraction - 2) + 1;\n  },\n  easeInQuart: function easeInQuart(fraction) {\n    return fraction * fraction * fraction * fraction;\n  },\n  easeOutQuart: function easeOutQuart(fraction) {\n    return 1 - --fraction * fraction * fraction * fraction;\n  },\n  easeInOutQuart: function easeInOutQuart(fraction) {\n    return fraction < .5 ? 8 * fraction * fraction * fraction * fraction : 1 - 8 * --fraction * fraction * fraction * fraction;\n  },\n  easeInQuint: function easeInQuint(fraction) {\n    return fraction * fraction * fraction * fraction * fraction;\n  },\n  easeOutQuint: function easeOutQuint(fraction) {\n    return 1 + --fraction * fraction * fraction * fraction * fraction;\n  },\n  easeInOutQuint: function easeInOutQuint(fraction) {\n    return fraction < .5 ? 16 * fraction * fraction * fraction * fraction * fraction : 1 + 16 * --fraction * fraction * fraction * fraction * fraction;\n  },\n  easeInSine: function easeInSine(fraction) {\n    return -1 * Math.cos(fraction / 1 * (Math.PI / 2)) + 1;\n  },\n  easeOutSine: function easeOutSine(fraction) {\n    return 1 * Math.sin(fraction / 1 * (Math.PI / 2));\n  },\n  easeInOutSine: function easeInOutSine(fraction) {\n    return -1 / 2 * (Math.cos(Math.PI * fraction / 1) - 1);\n  },\n  easeInExpo: function easeInExpo(fraction) {\n    return fraction == 0 ? 1 : 1 * Math.pow(2, 10 * (fraction / 1 - 1));\n  },\n  easeOutExpo: function easeOutExpo(fraction) {\n    return fraction == 1 ? 1 : 1 * (-Math.pow(2, -10 * fraction / 1) + 1);\n  },\n  easeInOutExpo: function easeInOutExpo(fraction) {\n    if (fraction == 0) return 0;\n    if (fraction == 1) return 1;\n    if ((fraction /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (fraction - 1));\n    return 1 / 2 * (-Math.pow(2, -10 * --fraction) + 2);\n  },\n  easeInCirc: function easeInCirc(fraction) {\n    if (fraction >= 1) return fraction;\n    return -1 * (Math.sqrt(1 - (fraction /= 1) * fraction) - 1);\n  },\n  easeOutCirc: function easeOutCirc(fraction) {\n    return 1 * Math.sqrt(1 - (fraction = fraction / 1 - 1) * fraction);\n  },\n  easeInOutCirc: function easeInOutCirc(fraction) {\n    if ((fraction /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - fraction * fraction) - 1);\n    return 1 / 2 * (Math.sqrt(1 - (fraction -= 2) * fraction) + 1);\n  },\n  easeInElastic: function easeInElastic(fraction) {\n    var s = 1.70158;\n    var p = 0;\n    var a = 1;\n    if (fraction == 0) return 0;\n    if ((fraction /= 1) == 1) return 1;\n    if (!p) p = 1 * .3;\n\n    if (a < Math.abs(1)) {\n      a = 1;\n      var s = p / 4;\n    } else var s = p / (2 * Math.PI) * Math.asin(1 / a);\n\n    return -(a * Math.pow(2, 10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p));\n  },\n  easeOutElastic: function easeOutElastic(fraction) {\n    var s = 1.70158;\n    var p = 0;\n    var a = 1;\n    if (fraction == 0) return 0;\n    if ((fraction /= 1) == 1) return 1;\n    if (!p) p = 1 * .3;\n\n    if (a < Math.abs(1)) {\n      a = 1;\n      var s = p / 4;\n    } else var s = p / (2 * Math.PI) * Math.asin(1 / a);\n\n    return a * Math.pow(2, -10 * fraction) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p) + 1;\n  },\n  easeInOutElastic: function easeInOutElastic(fraction) {\n    var s = 1.70158;\n    var p = 0;\n    var a = 1;\n    if (fraction == 0) return 0;\n    if ((fraction /= 1 / 2) == 2) return 1;\n    if (!p) p = 1 * (.3 * 1.5);\n\n    if (a < Math.abs(1)) {\n      a = 1;\n      var s = p / 4;\n    } else var s = p / (2 * Math.PI) * Math.asin(1 / a);\n\n    if (fraction < 1) return -.5 * (a * Math.pow(2, 10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p));\n    return a * Math.pow(2, -10 * (fraction -= 1)) * Math.sin((fraction * 1 - s) * (2 * Math.PI) / p) * .5 + 1;\n  },\n  easeInBack: function easeInBack(fraction) {\n    var s = 1.70158;\n    return 1 * (fraction /= 1) * fraction * ((s + 1) * fraction - s);\n  },\n  easeOutBack: function easeOutBack(fraction) {\n    var s = 1.70158;\n    return 1 * ((fraction = fraction / 1 - 1) * fraction * ((s + 1) * fraction + s) + 1);\n  },\n  easeInOutBack: function easeInOutBack(fraction) {\n    var s = 1.70158;\n    if ((fraction /= 1 / 2) < 1) return 1 / 2 * (fraction * fraction * (((s *= 1.525) + 1) * fraction - s));\n    return 1 / 2 * ((fraction -= 2) * fraction * (((s *= 1.525) + 1) * fraction + s) + 2);\n  },\n  easeInBounce: function easeInBounce(fraction) {\n    return 1 - easing.easeOutBounce(1 - fraction);\n  },\n  easeOutBounce: function easeOutBounce(fraction) {\n    if ((fraction /= 1) < 1 / 2.75) {\n      return 1 * (7.5625 * fraction * fraction);\n    } else if (fraction < 2 / 2.75) {\n      return 1 * (7.5625 * (fraction -= 1.5 / 2.75) * fraction + .75);\n    } else if (fraction < 2.5 / 2.75) {\n      return 1 * (7.5625 * (fraction -= 2.25 / 2.75) * fraction + .9375);\n    } else {\n      return 1 * (7.5625 * (fraction -= 2.625 / 2.75) * fraction + .984375);\n    }\n  },\n  easeInOutBounce: function easeInOutBounce(fraction) {\n    if (fraction < 1 / 2) return easing.easeInBounce(fraction * 2) * .5;\n    return easing.easeOutBounce(fraction * 2 - 1) * .5 + 1 * .5;\n  }\n};\nmodule.exports = easing;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/easings.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction getIncidentsByChannel(pld) {\n  pld.descriptor.value = function () {\n    var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var parentMillisecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var incidentsByPlugin = {};\n    incidentsByPlugin[this.mc_plugin_npm_name] = [{\n      millisecond: adjustMillisecond,\n      parentMillisecond: parentMillisecond,\n      incident: this,\n      id: this.id\n    }];\n    return incidentsByPlugin;\n  };\n}\n\nmodule.exports = getIncidentsByChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19kZWNvcmF0b3JzL2dldEluY2lkZW50c0J5Q2hhbm5lbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvX2RlY29yYXRvcnMvZ2V0SW5jaWRlbnRzQnlDaGFubmVsLmpzPzkwZjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGdldEluY2lkZW50c0J5Q2hhbm5lbChwbGQpIHtcbiAgcGxkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFkanVzdE1pbGxpc2Vjb25kID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgIHZhciBwYXJlbnRNaWxsaXNlY29uZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICB2YXIgaW5jaWRlbnRzQnlQbHVnaW4gPSB7fTtcbiAgICBpbmNpZGVudHNCeVBsdWdpblt0aGlzLm1jX3BsdWdpbl9ucG1fbmFtZV0gPSBbe1xuICAgICAgbWlsbGlzZWNvbmQ6IGFkanVzdE1pbGxpc2Vjb25kLFxuICAgICAgcGFyZW50TWlsbGlzZWNvbmQ6IHBhcmVudE1pbGxpc2Vjb25kLFxuICAgICAgaW5jaWRlbnQ6IHRoaXMsXG4gICAgICBpZDogdGhpcy5pZFxuICAgIH1dO1xuICAgIHJldHVybiBpbmNpZGVudHNCeVBsdWdpbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJbmNpZGVudHNCeUNoYW5uZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/dist/main.js":
/*!*************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/dist/main.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar Validator = __webpack_require__(/*! fastest-validator */ \"./node_modules/fastest-validator/dist/index.min.js\");\n\nvar DescriptiveIncident = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js\");\n\nvar DescriptiveGroup = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveGroup */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\");\n\nvar DescriptiveClip = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveClip */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\");\n\nvar DescriptiveAudioClip = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveAudioClip */ \"./node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js\");\n\nvar MonoIncident = __webpack_require__(/*! ./BaseClasses/MonoIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar MediaPlayback = __webpack_require__(/*! ./BaseClasses/MediaPlayIncident */ \"./node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\");\n\nvar AudioPlaybackChannel = __webpack_require__(/*! ./Channels/Media/AudioPlaybackChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./Clip/ExtendableClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar DOMClip = __webpack_require__(/*! ./Clip/DOMClip */ \"./node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js\");\n\nvar easings = __webpack_require__(/*! ./_coreUtils/easings */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/easings.js\");\n\nvar AttributeChannel = __webpack_require__(/*! ./Channels/Attribute/AttributeChannel */ \"./node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\");\n\nvar TimeCapsule = __webpack_require__(/*! ./_coreUtils/TimeCapsule */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\");\n\nvar Helper = __webpack_require__(/*! ./_coreUtils/Helper */ \"./node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper({\n  logLevel: 0\n});\n\nvar checkPlugin = function checkPlugin(main) {\n  if (Object.prototype.hasOwnProperty.call(main, \"default\")) {\n    main = main[\"default\"];\n  }\n\n  var plugin_name = main.npm_name;\n  var check = true;\n\n  if (!Object.prototype.hasOwnProperty.call(main, \"name\")) {\n    helper.error(\"Warning on plugin \".concat(plugin_name, \". A plugin is always good to have its name on\\n        its main.js file, under the key \\\"name\\\". It's missing from this plugin\"));\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(main, \"incidents\") && !Object.prototype.hasOwnProperty.call(main, \"Clip\")) {\n    helper.error(\"Error on plugin \".concat(plugin_name, \". A plugin must expose at least one Incident or a Clip.\\n        Exposed plugin Incidents should be defined on the \\\"incidents\\\" key of the main.js file while Clips on the \\\"Clip\\\".\"));\n    check = false;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(main, \"incidents\") && !helper.isArray(main.incidents)) {\n    helper.error(\"Error on plugin \".concat(plugin_name, \". thePlugin exposed Incidents are defined on the \\\"incidents\\\" key of the main.js file in array format.\\n        Please refer to the documentation\"));\n    check = false;\n  } else if (Object.prototype.hasOwnProperty.call(main, \"incidents\")) {\n    for (var i = 0; i < main.incidents.length; i++) {\n      var exposedIncidentDefinition = main.incidents[i];\n\n      if (_typeof(exposedIncidentDefinition.exportable) === \"object\") {\n        if (Object.prototype.hasOwnProperty.call(exposedIncidentDefinition.exportable, \"default\")) {\n          exposedIncidentDefinition.exportable = exposedIncidentDefinition.exportable[\"default\"];\n        }\n      }\n\n      if (!(exposedIncidentDefinition.exportable.prototype instanceof DescriptiveGroup) && !(exposedIncidentDefinition.exportable.prototype instanceof DescriptiveClip) && !(exposedIncidentDefinition.exportable.prototype instanceof MonoIncident) && !(exposedIncidentDefinition.exportable.prototype instanceof MediaPlayback)) {\n        helper.error(\"Error on plugin \".concat(plugin_name, \". Exportable Incidents by any plugin must extend one of the base classes provided by MotorCortex.\\n                \").concat(exposedIncidentDefinition.exportable.constructor.name, \" doesn't.\\n                Please refer to documentation\"));\n        check = false;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(exposedIncidentDefinition, \"name\")) {\n        helper.error(\"Error on plugin \".concat(plugin_name, \". Exportable Incidents by any plugin must have the \\\"name\\\" key which defines the name of the exported Incident.\\n                Please refer to documentation\"));\n        check = false;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(exposedIncidentDefinition, \"propTypes\")) {\n        helper.log(\"Warning on plugin \".concat(plugin_name, \".\\n                It's always good for plugins to define the supported propTypes of their exposed Incidents' supported properties.\\n                \").concat(exposedIncidentDefinition.exportable.constructor.name, \" doesn't.\\n                Please refer to documentation\"), 'warning');\n      }\n    }\n  }\n\n  return check;\n}; // plugin_name is the unique name of the plugin\n\n\nfunction loadPlugin(plugin) {\n  if (Object.prototype.hasOwnProperty.call(plugin, \"default\")) {\n    plugin = plugin[\"default\"];\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(plugin, \"npm_name\")) {\n    plugin.npm_name = \"plugin_\".concat(new Date().getTime());\n  }\n\n  if (!checkPlugin(plugin)) {\n    return false;\n  } else {\n    // thePlugin is the plugin object which will hold on its keys\n    // the names of the exposed Incidents of its. The keys of this object\n    // are going to be identical with the names of the classes exposed\n    var thePlugin = {};\n\n    if (Object.prototype.hasOwnProperty.call(plugin, \"Clip\")) {\n      var _class, _temp;\n\n      var DynamicDescriptiveClip = (_temp = _class =\n      /*#__PURE__*/\n      function (_DescriptiveClip) {\n        _inherits(DynamicDescriptiveClip, _DescriptiveClip);\n\n        function DynamicDescriptiveClip() {\n          _classCallCheck(this, DynamicDescriptiveClip);\n\n          return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveClip).apply(this, arguments));\n        }\n\n        return DynamicDescriptiveClip;\n      }(DescriptiveClip), _defineProperty(_class, \"Incident\", plugin.Clip), _defineProperty(_class, \"audio\", plugin.audio ? plugin.audio : \"off\"), _defineProperty(_class, \"customClip\", true), _temp);\n      thePlugin.Clip = DynamicDescriptiveClip;\n    } // if the plugin definition has compositeAttributes then we dynamically\n    // create a new Channel class extending AttributeChannel setting the\n    // composite Attributes on the fly. We can then use this Channel class\n    // for all Incidents exposed by the plugin\n\n\n    var AttributeChannelToUse = AttributeChannel;\n\n    if (Object.prototype.hasOwnProperty.call(plugin, \"compositeAttributes\")) {\n      AttributeChannelToUse =\n      /*#__PURE__*/\n      function (_AttributeChannel) {\n        _inherits(AttributeChannelToUse, _AttributeChannel);\n\n        function AttributeChannelToUse(props) {\n          _classCallCheck(this, AttributeChannelToUse);\n\n          props.comboAttributes = plugin.compositeAttributes;\n          return _possibleConstructorReturn(this, _getPrototypeOf(AttributeChannelToUse).call(this, props));\n        }\n\n        return AttributeChannelToUse;\n      }(AttributeChannel);\n    } // for each of the exposed Incidents\n\n\n    if (Object.prototype.hasOwnProperty.call(plugin, \"incidents\")) {\n      var _loop = function _loop(i) {\n        var incidentClass = plugin.incidents[i].exportable;\n        var DynamicDescriptiveIncident = void 0; // the exportable Incident can be either a Clip, a Compo or an Incident\n        // if it is an Incident\n\n        if (incidentClass.prototype instanceof MonoIncident) {\n          var _class2, _temp2;\n\n          DynamicDescriptiveIncident = (_temp2 = _class2 =\n          /*#__PURE__*/\n          function (_DescriptiveIncident) {\n            _inherits(DynamicDescriptiveIncident, _DescriptiveIncident);\n\n            function DynamicDescriptiveIncident() {\n              _classCallCheck(this, DynamicDescriptiveIncident);\n\n              return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n            }\n\n            return DynamicDescriptiveIncident;\n          }(DescriptiveIncident), _defineProperty(_class2, \"Incident\", incidentClass), _defineProperty(_class2, \"plugin_npm_name\", plugin.npm_name), _defineProperty(_class2, \"plugin\", plugin.name), _defineProperty(_class2, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class2, \"Channel\", AttributeChannelToUse), _defineProperty(_class2, \"audio\", plugin.audio ? plugin.audio : \"off\"), _temp2);\n        } // if it is an Incident\n        else if (incidentClass.prototype instanceof MediaPlayback) {\n            var _class3, _temp3;\n\n            DynamicDescriptiveIncident = (_temp3 = _class3 =\n            /*#__PURE__*/\n            function (_DescriptiveIncident2) {\n              _inherits(DynamicDescriptiveIncident, _DescriptiveIncident2);\n\n              function DynamicDescriptiveIncident() {\n                _classCallCheck(this, DynamicDescriptiveIncident);\n\n                return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n              }\n\n              return DynamicDescriptiveIncident;\n            }(DescriptiveIncident), _defineProperty(_class3, \"Incident\", incidentClass), _defineProperty(_class3, \"plugin_npm_name\", '@kissmybutton/media-playback'), _defineProperty(_class3, \"plugin\", plugin.name), _defineProperty(_class3, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class3, \"Channel\", AudioPlaybackChannel), _defineProperty(_class3, \"audio\", plugin.audio ? plugin.audio : \"off\"), _temp3);\n          } // else if it is a Clip\n          else if (incidentClass.prototype instanceof DescriptiveClip) {\n              var _class4, _temp4;\n\n              DynamicDescriptiveIncident = (_temp4 = _class4 =\n              /*#__PURE__*/\n              function (_incidentClass) {\n                _inherits(DynamicDescriptiveIncident, _incidentClass);\n\n                function DynamicDescriptiveIncident() {\n                  _classCallCheck(this, DynamicDescriptiveIncident);\n\n                  return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n                }\n\n                return DynamicDescriptiveIncident;\n              }(incidentClass), _defineProperty(_class4, \"plugin\", plugin.name), _defineProperty(_class4, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class4, \"audio\", plugin.audio ? plugin.audio : \"on\"), _temp4);\n            } else if (incidentClass.prototype instanceof DescriptiveGroup) {\n              var _class5, _temp5;\n\n              DynamicDescriptiveIncident = (_temp5 = _class5 =\n              /*#__PURE__*/\n              function (_incidentClass2) {\n                _inherits(DynamicDescriptiveIncident, _incidentClass2);\n\n                function DynamicDescriptiveIncident() {\n                  _classCallCheck(this, DynamicDescriptiveIncident);\n\n                  return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n                }\n\n                return DynamicDescriptiveIncident;\n              }(incidentClass), _defineProperty(_class5, \"plugin\", plugin.name), _defineProperty(_class5, \"ClassName\", plugin.incidents[i].name), _temp5);\n            }\n\n        Object.defineProperty(thePlugin, plugin.incidents[i].name, {\n          get: function get() {\n            // the getter will construct a wrapper class which on the constructor will instantiate an object of the\n            // exposed class, set to it the plugin name and channel class parameters and return\n            // it from the constructor\n            var WrapperClass = function WrapperClass(attrs, props) {\n              _classCallCheck(this, WrapperClass);\n\n              var instantiatedIncident = new DynamicDescriptiveIncident(attrs, props);\n\n              if (Object.prototype.hasOwnProperty.call(plugin.incidents[i], \"attributesValidationRules\")) {\n                var v = new Validator();\n                var validationResult = v.validate(attrs, plugin.incidents[i].attributesValidationRules);\n\n                if (validationResult.length > 0) {\n                  var errorMessage = \"Error on plugin's \\\"\".concat(plugin.npm_name, \"\\\" \\\"\").concat(plugin.incidents[i].name, \"\\\" instantiation. Errors:\");\n\n                  for (var _i = 0; _i < validationResult.length; _i++) {\n                    errorMessage += \"\\n - \".concat(validationResult[_i].message, \". \").concat(validationResult[_i].actual, \" provided\");\n                  }\n\n                  console.error(errorMessage);\n                  return {\n                    result: false,\n                    errors: validationResult\n                  };\n                }\n              } else {\n                helper.warning(\"It's always good to provide attributesValidationRules to the exported incidents. \".concat(plugin.npm_name, \".\").concat(instantiatedIncident.constructor.name, \" doesn't provide it\"));\n              }\n\n              return instantiatedIncident;\n            };\n\n            return WrapperClass;\n          }\n        });\n      };\n\n      for (var i = 0; i < plugin.incidents.length; i++) {\n        _loop(i);\n      }\n    }\n\n    return thePlugin;\n  }\n}\n\nvar audioPluginMain = __webpack_require__(/*! ./Audio/main */ \"./node_modules/@kissmybutton/motorcortex/dist/Audio/main.js\");\n\nvar AudioPlugin = loadPlugin(audioPluginMain);\nmodule.exports = {\n  API: {\n    MonoIncident: MonoIncident,\n    Group: DescriptiveGroup,\n    Clip: DescriptiveClip,\n    AudioClip: DescriptiveAudioClip,\n    MediaPlayback: MediaPlayback,\n    ExtendableClip: ExtendableClip,\n    DOMClip: DOMClip,\n    easings: easings\n  },\n  Group: DescriptiveGroup,\n  Clip: DescriptiveClip,\n  loadPlugin: loadPlugin,\n  AudioClip: AudioPlugin.Clip,\n  AudioPlayback: AudioPlugin.AudioPlayback,\n  AudioEffect: AudioPlugin.AudioEffect,\n  TimeCapsule: TimeCapsule\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/dist/main.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = filter;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = findIndex;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js\n");

/***/ }),

/***/ "./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = sortBy;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\n");

/***/ }),

/***/ "./node_modules/bezier-easing/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/bezier-easing/src/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX / currentSlope;\n }\n return aGuessT;\n}\n\nfunction LinearEasing (x) {\n  return x;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmV6aWVyLWVhc2luZy9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmV6aWVyLWVhc2luZy9zcmMvaW5kZXguanM/ZDEzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZ1xuICogQmV6aWVyRWFzaW5nIC0gdXNlIGJlemllciBjdXJ2ZSBmb3IgdHJhbnNpdGlvbiBlYXNpbmcgZnVuY3Rpb25cbiAqIGJ5IEdhw6t0YW4gUmVuYXVkZWF1IDIwMTQgLSAyMDE1IOKAkyBNSVQgTGljZW5zZVxuICovXG5cbi8vIFRoZXNlIHZhbHVlcyBhcmUgZXN0YWJsaXNoZWQgYnkgZW1waXJpY2lzbSB3aXRoIHRlc3RzICh0cmFkZW9mZjogcGVyZm9ybWFuY2UgVlMgcHJlY2lzaW9uKVxudmFyIE5FV1RPTl9JVEVSQVRJT05TID0gNDtcbnZhciBORVdUT05fTUlOX1NMT1BFID0gMC4wMDE7XG52YXIgU1VCRElWSVNJT05fUFJFQ0lTSU9OID0gMC4wMDAwMDAxO1xudmFyIFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TID0gMTA7XG5cbnZhciBrU3BsaW5lVGFibGVTaXplID0gMTE7XG52YXIga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuXG52YXIgZmxvYXQzMkFycmF5U3VwcG9ydGVkID0gdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ2Z1bmN0aW9uJztcblxuZnVuY3Rpb24gQSAoYUExLCBhQTIpIHsgcmV0dXJuIDEuMCAtIDMuMCAqIGFBMiArIDMuMCAqIGFBMTsgfVxuZnVuY3Rpb24gQiAoYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIGFBMiAtIDYuMCAqIGFBMTsgfVxuZnVuY3Rpb24gQyAoYUExKSAgICAgIHsgcmV0dXJuIDMuMCAqIGFBMTsgfVxuXG4vLyBSZXR1cm5zIHgodCkgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgeSh0KSBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuZnVuY3Rpb24gY2FsY0JlemllciAoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAoKEEoYUExLCBhQTIpICogYVQgKyBCKGFBMSwgYUEyKSkgKiBhVCArIEMoYUExKSkgKiBhVDsgfVxuXG4vLyBSZXR1cm5zIGR4L2R0IGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIGR5L2R0IGdpdmVuIHQsIHkxLCBhbmQgeTIuXG5mdW5jdGlvbiBnZXRTbG9wZSAoYVQsIGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpOyB9XG5cbmZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZSAoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgdmFyIGN1cnJlbnRYLCBjdXJyZW50VCwgaSA9IDA7XG4gIGRvIHtcbiAgICBjdXJyZW50VCA9IGFBICsgKGFCIC0gYUEpIC8gMi4wO1xuICAgIGN1cnJlbnRYID0gY2FsY0JlemllcihjdXJyZW50VCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XG4gICAgICBhQiA9IGN1cnJlbnRUO1xuICAgIH0gZWxzZSB7XG4gICAgICBhQSA9IGN1cnJlbnRUO1xuICAgIH1cbiAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gU1VCRElWSVNJT05fUFJFQ0lTSU9OICYmICsraSA8IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TKTtcbiAgcmV0dXJuIGN1cnJlbnRUO1xufVxuXG5mdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZSAoYVgsIGFHdWVzc1QsIG1YMSwgbVgyKSB7XG4gZm9yICh2YXIgaSA9IDA7IGkgPCBORVdUT05fSVRFUkFUSU9OUzsgKytpKSB7XG4gICB2YXIgY3VycmVudFNsb3BlID0gZ2V0U2xvcGUoYUd1ZXNzVCwgbVgxLCBtWDIpO1xuICAgaWYgKGN1cnJlbnRTbG9wZSA9PT0gMC4wKSB7XG4gICAgIHJldHVybiBhR3Vlc3NUO1xuICAgfVxuICAgdmFyIGN1cnJlbnRYID0gY2FsY0JlemllcihhR3Vlc3NULCBtWDEsIG1YMikgLSBhWDtcbiAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gfVxuIHJldHVybiBhR3Vlc3NUO1xufVxuXG5mdW5jdGlvbiBMaW5lYXJFYXNpbmcgKHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmV6aWVyIChtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcbiAgaWYgKCEoMCA8PSBtWDEgJiYgbVgxIDw9IDEgJiYgMCA8PSBtWDIgJiYgbVgyIDw9IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiZXppZXIgeCB2YWx1ZXMgbXVzdCBiZSBpbiBbMCwgMV0gcmFuZ2UnKTtcbiAgfVxuXG4gIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikge1xuICAgIHJldHVybiBMaW5lYXJFYXNpbmc7XG4gIH1cblxuICAvLyBQcmVjb21wdXRlIHNhbXBsZXMgdGFibGVcbiAgdmFyIHNhbXBsZVZhbHVlcyA9IGZsb2F0MzJBcnJheVN1cHBvcnRlZCA/IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSkgOiBuZXcgQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7XG4gICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRURm9yWCAoYVgpIHtcbiAgICB2YXIgaW50ZXJ2YWxTdGFydCA9IDAuMDtcbiAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgdmFyIGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcblxuICAgIGZvciAoOyBjdXJyZW50U2FtcGxlICE9PSBsYXN0U2FtcGxlICYmIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSA8PSBhWDsgKytjdXJyZW50U2FtcGxlKSB7XG4gICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICB9XG4gICAgLS1jdXJyZW50U2FtcGxlO1xuXG4gICAgLy8gSW50ZXJwb2xhdGUgdG8gcHJvdmlkZSBhbiBpbml0aWFsIGd1ZXNzIGZvciB0XG4gICAgdmFyIGRpc3QgPSAoYVggLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pIC8gKHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgIHZhciBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcblxuICAgIHZhciBpbml0aWFsU2xvcGUgPSBnZXRTbG9wZShndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICBpZiAoaW5pdGlhbFNsb3BlID49IE5FV1RPTl9NSU5fU0xPUEUpIHtcbiAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgfSBlbHNlIGlmIChpbml0aWFsU2xvcGUgPT09IDAuMCkge1xuICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCwgaW50ZXJ2YWxTdGFydCwgaW50ZXJ2YWxTdGFydCArIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBCZXppZXJFYXNpbmcgKHgpIHtcbiAgICAvLyBCZWNhdXNlIEphdmFTY3JpcHQgbnVtYmVyIGFyZSBpbXByZWNpc2UsIHdlIHNob3VsZCBndWFyYW50ZWUgdGhlIGV4dHJlbWVzIGFyZSByaWdodC5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh4ID09PSAxKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGNCZXppZXIoZ2V0VEZvclgoeCksIG1ZMSwgbVkyKTtcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/bezier-easing/src/index.js\n");

/***/ }),

/***/ "./node_modules/fastest-validator/dist/index.min.js":
/*!**********************************************************!*\
  !*** ./node_modules/fastest-validator/dist/index.min.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {function t(){function e(e){return\"number\"!=typeof e&&\"string\"!=typeof e?this.makeError(\"string\"):(\"string\"!=typeof e&&(e=String(e)),e=e.replace(/\\D+/g,\"\"),function(e){return function(t){for(var r=t?t.length:0,n=1,i=0;r--;)i+=(n^=1)?e[t[r]]:parseInt(t[r],10);return 0==i%10&&0<i}}([0,2,4,6,8,1,3,5,7,9])(e)||this.makeError(\"luhn\"))}function t(e){return\"string\"!=typeof e?this.makeError(\"string\"):(e=e.toLowerCase(),!!w.test(e)||this.makeError(\"mac\"))}function r(e,t){if(\"string\"!=typeof e)return this.makeError(\"string\");if(e=e.toLowerCase(),!M.test(e))return this.makeError(\"uuid\");var r=0|e.charAt(14);if(t.version&&t.version!==r)return this.makeError(\"uuidVersion\",t.version,r);switch(r){case 1:case 2:return!0;case 3:case 4:case 5:return-1!==[\"8\",\"9\",\"a\",\"b\"].indexOf(e.charAt(19))||this.makeError(\"uuid\")}}function n(e){return\"string\"!=typeof e?this.makeError(\"string\"):!!j.test(e)||this.makeError(\"url\")}function i(e,t){if(\"string\"!=typeof e)return this.makeError(\"string\");var r=e.length;return!1===t.empty&&0===r?this.makeError(\"stringEmpty\"):null!=t.min&&r<t.min?this.makeError(\"stringMin\",t.min,r):null!=t.max&&r>t.max?this.makeError(\"stringMax\",t.max,r):null!=t.length&&r!==t.length?this.makeError(\"stringLength\",t.length,r):null==t.pattern||(r=\"string\"==typeof t.pattern?new RegExp(t.pattern,t.patternFlags):t.pattern).test(e)?null!=t.contains&&-1===e.indexOf(t.contains)?this.makeError(\"stringContains\",t.contains,e):null!=t.enum&&-1===t.enum.indexOf(e)?this.makeError(\"stringEnum\",t.enum,e):!0!==t.numeric||O.test(e)?!0!==t.alpha||_.test(e)?!0!==t.alphanum||A.test(e)?!(!0===t.alphadash&&!T.test(e))||this.makeError(\"stringAlphadash\",\"An alphadash string\",e):this.makeError(\"stringAlphanum\",\"An alphanumeric string\",e):this.makeError(\"stringAlpha\",\"An alphabetic string\",e):this.makeError(\"stringNumeric\",\"A numeric string\",e):this.makeError(\"stringPattern\",r,e)}function a(e,t){if(\"object\"!=typeof e||null===e||Array.isArray(e))return this.makeError(\"object\");if(!0===t.strict&&t.props){t=Object.keys(t.props);var r=[];e=Object.keys(e);for(var n=0;n<e.length;n++)-1===t.indexOf(e[n])&&r.push(e[n]);if(0!==r.length)return this.makeError(\"objectStrict\",void 0,r.join(\", \"))}return!0}function o(e,t){return!0===t.convert&&\"number\"!=typeof e&&(e=Number(e)),\"number\"!=typeof e||isNaN(e)||!isFinite(e)?this.makeError(\"number\"):null!=t.min&&e<t.min?this.makeError(\"numberMin\",t.min,e):null!=t.max&&e>t.max?this.makeError(\"numberMax\",t.max,e):null!=t.equal&&e!==t.equal?this.makeError(\"numberEqual\",t.equal,e):null!=t.notEqual&&e===t.notEqual?this.makeError(\"numberNotEqual\",t.notEqual):!0===t.integer&&0!=e%1?this.makeError(\"numberInteger\",e):!0===t.positive&&0>=e?this.makeError(\"numberPositive\",e):!(!0===t.negative&&0<=e)||this.makeError(\"numberNegative\",e)}function s(e){return\"function\"==typeof e||this.makeError(\"function\")}function u(e){return null===e||void 0===e||this.makeError(\"forbidden\")}function l(e,t){return null==t.values||-1!==t.values.indexOf(e)||this.makeError(\"enumValue\",t.values,e)}function f(e,t){return\"string\"!=typeof e?this.makeError(\"string\"):!!(\"precise\"==t.mode?S:x).test(e)||this.makeError(\"email\")}function c(e,t){return!0!==t.convert||e instanceof Date||(e=new Date(e)),e instanceof Date&&!isNaN(e.getTime())||this.makeError(\"date\")}function h(e,t){return t.check.call(this,e,t)}function p(e,t){return!0===t.convert&&\"boolean\"!=typeof e&&(1===e||0===e||\"true\"===e||\"false\"===e||\"1\"===e||\"0\"===e||\"on\"===e||\"off\"===e)||(\"boolean\"==typeof e||this.makeError(\"boolean\"))}function m(e,t){if(!Array.isArray(e))return this.makeError(\"array\");var r=e.length;if(!1===t.empty&&0===r)return this.makeError(\"arrayEmpty\");if(null!=t.min&&r<t.min)return this.makeError(\"arrayMin\",t.min,r);if(null!=t.max&&r>t.max)return this.makeError(\"arrayMax\",t.max,r);if(null!=t.length&&r!==t.length)return this.makeError(\"arrayLength\",t.length,r);if(null!=t.contains&&-1===e.indexOf(t.contains))return this.makeError(\"arrayContains\",t.contains);if(null!=t.enum)for(r=0;r<e.length;r++)if(-1===t.enum.indexOf(e[r]))return this.makeError(\"arrayEnum\",e[r],t.enum);return!0}function d(){return!0}function y(e,t){t=t||[];for(var r=0;r<e.length;++r)Array.isArray(e[r])?y(e[r],t):t.push(e[r]);return t}function g(e,t){for(var r in t)\"object\"==typeof t[r]&&null!==t[r]?(e[r]=e[r]||{},g(e[r],t[r])):e[r]=t[r];return e}function b(e){return e.replace(R,function(e){switch(e){case'\"':case\"'\":case\"\\\\\":return\"\\\\\"+e;case\"\\n\":return\"\\\\n\";case\"\\r\":return\"\\\\r\";case\"\\u2028\":return\"\\\\u2028\";case\"\\u2029\":return\"\\\\u2029\"}})}function v(y){this.opts={messages:E({},k)},y&&E(this.opts,y),this.messages=this.opts.messages,this.messageKeys=Object.keys(this.messages),this.rules={any:d,array:m,boolean:p,custom:h,date:c,email:f,enum:l,forbidden:u,function:s,number:o,object:a,string:i,url:n,uuid:r,mac:t,luhn:e},this.cache=new Map}var E=g,k={required:\"The '{field}' field is required!\",string:\"The '{field}' field must be a string!\",stringEmpty:\"The '{field}' field must not be empty!\",stringMin:\"The '{field}' field length must be greater than or equal to {expected} characters long!\",stringMax:\"The '{field}' field length must be less than or equal to {expected} characters long!\",stringLength:\"The '{field}' field length must be {expected} characters long!\",stringPattern:\"The '{field}' field fails to match the required pattern!\",stringContains:\"The '{field}' field must contain the '{expected}' text!\",stringEnum:\"The '{field}' field does not match any of the allowed values!\",stringNumeric:\"The '{field}' field must be a numeric string\",stringAlpha:\"The '{field}' field must be an alphabetic string\",stringAlphanum:\"The '{field}' field must be an alphanumeric string\",stringAlphadash:\"The '{field}' field must be an alphadash string\",number:\"The '{field}' field must be a number!\",numberMin:\"The '{field}' field must be greater than or equal to {expected}!\",numberMax:\"The '{field}' field must be less than or equal to {expected}!\",numberEqual:\"The '{field}' field must be equal with {expected}!\",numberNotEqual:\"The '{field}' field can't be equal with {expected}!\",numberInteger:\"The '{field}' field must be an integer!\",numberPositive:\"The '{field}' field must be a positive number!\",numberNegative:\"The '{field}' field must be a negative number!\",array:\"The '{field}' field must be an array!\",arrayEmpty:\"The '{field}' field must not be an empty array!\",arrayMin:\"The '{field}' field must contain at least {expected} items!\",arrayMax:\"The '{field}' field must contain less than or equal to {expected} items!\",arrayLength:\"The '{field}' field must contain {expected} items!\",arrayContains:\"The '{field}' field must contain the '{expected}' item!\",arrayEnum:\"The '{field} field value '{expected}' does not match any of the allowed values!\",boolean:\"The '{field}' field must be a boolean!\",function:\"The '{field}' field must be a function!\",date:\"The '{field}' field must be a Date!\",dateMin:\"The '{field}' field must be greater than or equal to {expected}!\",dateMax:\"The '{field}' field must be less than or equal to {expected}!\",forbidden:\"The '{field}' field is forbidden!\",email:\"The '{field}' field must be a valid e-mail!\",url:\"The '{field}' field must be a valid URL!\",enumValue:\"The '{field} field value '{expected}' does not match any of the allowed values!\",object:\"The '{field}' must be an Object!\",objectStrict:\"The object '{field}' contains invalid keys: '{actual}'!\",uuid:\"The {field} field must be a valid UUID\",uuidVersion:\"The {field} field must be a valid version provided\",mac:\"The {field} field must be a valid MAC address\",luhn:\"The {field} field must be a valid checksum luhn\"},S=/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,x=/^\\S+@\\S+\\.\\S+$/,O=/^-?[0-9]\\d*(\\.\\d+)?$/,_=/^[a-zA-Z]+$/,A=/^[a-zA-Z0-9]+$/,T=/^[a-zA-Z0-9_-]+$/,j=/^https?:\\/\\/\\S+/,M=/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i,w=/^((([a-f0-9][a-f0-9]+[-]){5}|([a-f0-9][a-f0-9]+[:]){5})([a-f0-9][a-f0-9])$)|(^([a-f0-9][a-f0-9][a-f0-9][a-f0-9]+[.]){2}([a-f0-9][a-f0-9][a-f0-9][a-f0-9]))$/i,P=/^[_$a-zA-Z][_$a-zA-Z0-9]*$/,R=/[\"'\\\\\\n\\r\\u2028\\u2029]/g;return v.prototype.validate=function(e,t){return this.compile(t)(e)},v.prototype.compile=function(e){var t=this;if(Array.isArray(e)){if(0==e.length)throw Error(\"If the schema is an Array, must contain at least one element!\");var r=this.compileSchemaType(e);return this.cache.clear(),function(e,n,i){return t.checkSchemaType(e,r,n,i||null)}}var n=this.compileSchemaObject(e);return this.cache.clear(),function(e,r,i){return t.checkSchemaObject(e,n,r,i||null)}},v.prototype.compileSchemaObject=function(e){var t=this;if(null===e||\"object\"!=typeof e||Array.isArray(e))throw Error(\"Invalid schema!\");var r=this.cache.get(e);if(r)return r.cycle=!0,r;r={cycle:!1,properties:null,compiledObjectFunction:null,objectStack:[]},this.cache.set(e,r),r.properties=Object.keys(e).filter(function(e){return\"$$strict\"!==e}).map(function(r){return{name:r,compiledType:t.compileSchemaType(e[r])}});var n=[];n.push(\"let res;\"),n.push(\"let propertyPath;\"),n.push(\"const errors = [];\"),!0===e.$$strict&&n.push(\"const givenProps = new Map(Object.keys(value).map(key => [key, true]));\");for(var i=0;i<r.properties.length;i++){var a=r.properties[i],o=b(a.name),s=P.test(o)?\"value.\"+o:'value[\"'+o+'\"]';n.push('propertyPath = (path !== undefined ? path + \".'+o+'\" : \"'+o+'\");'),Array.isArray(a.compiledType)?n.push(\"res = this.checkSchemaType(\"+s+\", properties[\"+i+\"].compiledType, propertyPath, value);\"):n.push(\"res = this.checkSchemaRule(\"+s+\", properties[\"+i+\"].compiledType, propertyPath, value);\"),n.push(\"if (res !== true) {\"),n.push(\"\\tthis.handleResult(errors, propertyPath, res, properties[\"+i+\"].compiledType.messages);\"),n.push(\"}\"),!0===e.$$strict&&n.push('givenProps.delete(\"'+o+'\");')}return!0===e.$$strict&&(n.push(\"if (givenProps.size !== 0) {\"),n.push(\"\\tthis.handleResult(errors, path || 'rootObject', this.makeError('objectStrict', undefined, [...givenProps.keys()].join(', ')), this.messages);\"),n.push(\"}\")),n.push(\"return errors.length === 0 ? true : errors;\"),r.compiledObjectFunction=new Function(\"value\",\"properties\",\"path\",\"parent\",n.join(\"\\n\")),r},v.prototype.compileSchemaType=function(e){var t=this;return Array.isArray(e)?(e=y(e.map(function(e){return t.compileSchemaType(e)})),1==e.length?e[0]:e):this.compileSchemaRule(e)},v.prototype.compileMessages=function(e){return e.messages?Object.assign({},this.messages,e.messages):this.messages},v.prototype.compileSchemaRule=function(e){\"string\"==typeof e&&(e={type:e});var t=this.rules[e.type];if(!t)throw Error(\"Invalid '\"+e.type+\"' type in validator schema!\");var r=this.compileMessages(e),n=null,i=null;return\"object\"===e.type&&e.props?(n=this.compileSchemaObject(e.props),i=this.checkSchemaObject):\"array\"===e.type&&e.items&&(n=this.compileSchemaType(e.items),i=this.checkSchemaArray),{messages:r,schemaRule:e,ruleFunction:t,dataFunction:i,dataParameter:n}},v.prototype.checkSchemaObject=function(e,t,r,n){return t.cycle?-1!==t.objectStack.indexOf(e)||(t.objectStack.push(e),e=this.checkSchemaObjectInner(e,t,r,n),t.objectStack.pop(),e):this.checkSchemaObjectInner(e,t,r,n)},v.prototype.checkSchemaObjectInner=function(e,t,r,n){return t.compiledObjectFunction.call(this,e,t.properties,r,n)},v.prototype.checkSchemaType=function(e,t,r,n){if(Array.isArray(t)){for(var i=[],a=t.length,o=0;o<a;o++){var s=this.checkSchemaRule(e,t[o],r,n);if(!0===s)return!0;this.handleResult(i,r,s,t.messages)}return i}return this.checkSchemaRule(e,t,r,n)},v.prototype.checkSchemaArray=function(e,t,r,n){for(var i=[],a=e.length,o=0;o<a;o++){var s=(void 0!==r?r:\"\")+\"[\"+o+\"]\",u=this.checkSchemaType(e[o],t,s,e,n);!0!==u&&this.handleResult(i,s,u,t.messages)}return 0===i.length||i},v.prototype.checkSchemaRule=function(e,t,r,n){var i=t.schemaRule;return void 0===e||null===e?\"forbidden\"===i.type||!0===i.optional||(e=[],this.handleResult(e,r,this.makeError(\"required\"),t.messages),e):(i=t.ruleFunction.call(this,e,i,r,n),!0!==i?(e=[],this.handleResult(e,r,i,t.messages),e):null===t.dataFunction||t.dataFunction.call(this,e,t.dataParameter,r,n))},v.prototype.handleResult=function(e,t,r,n){var i=this;(Array.isArray(r)?r:[r]).forEach(function(r){r.field||(r.field=t),r.message||(r.message=i.resolveMessage(r,n[r.type])),e.push(r)})},v.prototype.makeError=function(e,t,r){return{type:e,expected:t,actual:r}},v.prototype.resolveMessage=function(e,t){if(void 0===t&&(t=null),null!=t){var r=null!=e.expected?e.expected:\"\",n=null!=e.actual?e.actual:\"\";return t.replace(/\\{field\\}/g,e.field).replace(/\\{expected\\}/g,r).replace(/\\{actual\\}/g,n)}},v.prototype.add=function(e,t){this.rules[e]=t},v}var f=f||{};f.scope={},f.ASSUME_ES5=!1,f.ASSUME_NO_NATIVE_MAP=!1,f.ASSUME_NO_NATIVE_SET=!1,f.defineProperty=f.ASSUME_ES5||\"function\"==typeof Object.defineProperties?Object.defineProperty:function(e,t,r){e!=Array.prototype&&e!=Object.prototype&&(e[t]=r.value)},f.getGlobal=function(e){return\"undefined\"!=typeof window&&window===e?e:\"undefined\"!=typeof global&&null!=global?global:e},f.global=f.getGlobal(this),f.SYMBOL_PREFIX=\"jscomp_symbol_\",f.initSymbol=function(){f.initSymbol=function(){},f.global.Symbol||(f.global.Symbol=f.Symbol)},f.Symbol=function(){var e=0;return function(t){return f.SYMBOL_PREFIX+(t||\"\")+e++}}(),f.initSymbolIterator=function(){f.initSymbol();var e=f.global.Symbol.iterator;e||(e=f.global.Symbol.iterator=f.global.Symbol(\"iterator\")),\"function\"!=typeof Array.prototype[e]&&f.defineProperty(Array.prototype,e,{configurable:!0,writable:!0,value:function(){return f.arrayIterator(this)}}),f.initSymbolIterator=function(){}},f.arrayIterator=function(e){var t=0;return f.iteratorPrototype(function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}})},f.iteratorPrototype=function(e){return f.initSymbolIterator(),e={next:e},e[f.global.Symbol.iterator]=function(){return this},e},f.iteratorFromArray=function(e,t){f.initSymbolIterator(),e instanceof String&&(e+=\"\");var r=0,n={next:function(){if(r<e.length){var i=r++;return{value:t(i,e[i]),done:!1}}return n.next=function(){return{done:!0,value:void 0}},n.next()}};return n[Symbol.iterator]=function(){return n},n},f.polyfill=function(e,t){if(t){var r=f.global;e=e.split(\".\");for(var n=0;n<e.length-1;n++){var i=e[n];i in r||(r[i]={}),r=r[i]}(t=t(n=r[e=e[e.length-1]]))!=n&&null!=t&&f.defineProperty(r,e,{configurable:!0,writable:!0,value:t})}},f.polyfill(\"Array.prototype.keys\",function(e){return e||function(){return f.iteratorFromArray(this,function(e){return e})}},\"es6\",\"es3\"),f.checkEs6ConformanceViaProxy=function(){try{var e={},t=Object.create(new f.global.Proxy(e,{get:function(r,n,i){return r==e&&\"q\"==n&&i==t}}));return!0===t.q}catch(e){return!1}},f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS=!1,f.ES6_CONFORMANCE=f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS&&f.checkEs6ConformanceViaProxy(),f.makeIterator=function(e){f.initSymbolIterator();var t=e[Symbol.iterator];return t?t.call(e):f.arrayIterator(e)},f.owns=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},f.polyfill(\"WeakMap\",function(e){function t(e){if(this.id_=(a+=Math.random()+1).toString(),e){f.initSymbol(),f.initSymbolIterator(),e=f.makeIterator(e);for(var t;!(t=e.next()).done;)t=t.value,this.set(t[0],t[1])}}function r(e){f.owns(e,i)||f.defineProperty(e,i,{value:{}})}function n(e){var t=Object[e];t&&(Object[e]=function(e){return r(e),t(e)})}if(f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(e&&f.ES6_CONFORMANCE)return e}else if(function(){if(!e||!Object.seal)return!1;try{var t=Object.seal({}),r=Object.seal({}),n=new e([[t,2],[r,3]]);return 2==n.get(t)&&3==n.get(r)&&(n.delete(t),n.set(r,4),!n.has(t)&&4==n.get(r))}catch(e){return!1}}())return e;var i=\"$jscomp_hidden_\"+Math.random();n(\"freeze\"),n(\"preventExtensions\"),n(\"seal\");var a=0;return t.prototype.set=function(e,t){if(r(e),!f.owns(e,i))throw Error(\"WeakMap key fail: \"+e);return e[i][this.id_]=t,this},t.prototype.get=function(e){return f.owns(e,i)?e[i][this.id_]:void 0},t.prototype.has=function(e){return f.owns(e,i)&&f.owns(e[i],this.id_)},t.prototype.delete=function(e){return!(!f.owns(e,i)||!f.owns(e[i],this.id_))&&delete e[i][this.id_]},t},\"es6\",\"es3\"),f.MapEntry=function(){},f.polyfill(\"Map\",function(e){function t(){var e={};return e.previous=e.next=e.head=e}function r(e,t){var r=e.head_;return f.iteratorPrototype(function(){if(r){for(;r.head!=e.head_;)r=r.previous;for(;r.next!=r.head;)return r=r.next,{done:!1,value:t(r)};r=null}return{done:!0,value:void 0}})}function n(e,t){var r=t&&typeof t;\"object\"==r||\"function\"==r?a.has(t)?r=a.get(t):(r=\"\"+ ++o,a.set(t,r)):r=\"p_\"+t;var n=e.data_[r];if(n&&f.owns(e.data_,r))for(e=0;e<n.length;e++){var i=n[e];if(t!==t&&i.key!==i.key||t===i.key)return{id:r,list:n,index:e,entry:i}}return{id:r,list:n,index:-1,entry:void 0}}function i(e){if(this.data_={},this.head_=t(),this.size=0,e){e=f.makeIterator(e);for(var r;!(r=e.next()).done;)r=r.value,this.set(r[0],r[1])}}if(f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(e&&f.ES6_CONFORMANCE)return e}else if(function(){if(f.ASSUME_NO_NATIVE_MAP||!e||\"function\"!=typeof e||!e.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var t=Object.seal({x:4}),r=new e(f.makeIterator([[t,\"s\"]]));if(\"s\"!=r.get(t)||1!=r.size||r.get({x:4})||r.set({x:4},\"t\")!=r||2!=r.size)return!1;var n=r.entries(),i=n.next();return!i.done&&i.value[0]==t&&\"s\"==i.value[1]&&!((i=n.next()).done||4!=i.value[0].x||\"t\"!=i.value[1]||!n.next().done)}catch(e){return!1}}())return e;f.initSymbol(),f.initSymbolIterator();var a=new WeakMap;i.prototype.set=function(e,t){var r=n(this,e);return r.list||(r.list=this.data_[r.id]=[]),r.entry?r.entry.value=t:(r.entry={next:this.head_,previous:this.head_.previous,head:this.head_,key:e,value:t},r.list.push(r.entry),this.head_.previous.next=r.entry,this.head_.previous=r.entry,this.size++),this},i.prototype.delete=function(e){return!(!(e=n(this,e)).entry||!e.list)&&(e.list.splice(e.index,1),e.list.length||delete this.data_[e.id],e.entry.previous.next=e.entry.next,e.entry.next.previous=e.entry.previous,e.entry.head=null,this.size--,!0)},i.prototype.clear=function(){this.data_={},this.head_=this.head_.previous=t(),this.size=0},i.prototype.has=function(e){return!!n(this,e).entry},i.prototype.get=function(e){return(e=n(this,e).entry)&&e.value},i.prototype.entries=function(){return r(this,function(e){return[e.key,e.value]})},i.prototype.keys=function(){return r(this,function(e){return e.key})},i.prototype.values=function(){return r(this,function(e){return e.value})},i.prototype.forEach=function(e,t){for(var r,n=this.entries();!(r=n.next()).done;)r=r.value,e.call(t,r[1],r[0],this)},i.prototype[Symbol.iterator]=i.prototype.entries;var o=0;return i},\"es6\",\"es3\"),f.assign=\"function\"==typeof Object.assign?Object.assign:function(e,t){for(var r=1;r<arguments.length;r++){var n=arguments[r];if(n)for(var i in n)f.owns(n,i)&&(e[i]=n[i])}return e},f.polyfill(\"Object.assign\",function(e){return e||f.assign},\"es6\",\"es3\");var r=this; true?module.exports=t():undefined;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fastest-validator/dist/index.min.js\n");

/***/ }),

/***/ "./node_modules/flubber/build/flubber.min.js":
/*!***************************************************!*\
  !*** ./node_modules/flubber/build/flubber.min.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(t,n){ true?n(exports):undefined}(this,function(t){\"use strict\";function n(t){return 10===t||13===t||8232===t||8233===t||32===t||9===t||11===t||12===t||160===t||t>=5760&&an.indexOf(t)>=0}function e(t){switch(32|t){case 109:case 122:case 108:case 104:case 118:case 99:case 115:case 113:case 116:case 97:case 114:return!0}return!1}function r(t){return t>=48&&t<=57}function i(t){return t>=48&&t<=57||43===t||45===t||46===t}function a(t){this.index=0,this.path=t,this.max=t.length,this.result=[],this.param=0,this.err=\"\",this.segmentStart=0,this.data=[]}function o(t){for(;t.index<t.max&&n(t.path.charCodeAt(t.index));)t.index++}function s(t){var n,e=t.index,i=e,a=t.max,o=!1,s=!1,h=!1,u=!1;if(i>=a)return void(t.err=\"SvgPath: missed param (at pos \"+i+\")\");if(n=t.path.charCodeAt(i),43!==n&&45!==n||(i++,n=i<a?t.path.charCodeAt(i):0),!r(n)&&46!==n)return void(t.err=\"SvgPath: param should start with 0..9 or `.` (at pos \"+i+\")\");if(46!==n){if(o=48===n,i++,n=i<a?t.path.charCodeAt(i):0,o&&i<a&&n&&r(n))return void(t.err=\"SvgPath: numbers started with `0` such as `09` are ilegal (at pos \"+e+\")\");for(;i<a&&r(t.path.charCodeAt(i));)i++,s=!0;n=i<a?t.path.charCodeAt(i):0}if(46===n){for(u=!0,i++;r(t.path.charCodeAt(i));)i++,h=!0;n=i<a?t.path.charCodeAt(i):0}if(101===n||69===n){if(u&&!s&&!h)return void(t.err=\"SvgPath: invalid float exponent (at pos \"+i+\")\");if(i++,n=i<a?t.path.charCodeAt(i):0,43!==n&&45!==n||i++,!(i<a&&r(t.path.charCodeAt(i))))return void(t.err=\"SvgPath: invalid float exponent (at pos \"+i+\")\");for(;i<a&&r(t.path.charCodeAt(i));)i++}t.index=i,t.param=parseFloat(t.path.slice(e,i))+0}function h(t){var n,e;n=t.path[t.segmentStart],e=n.toLowerCase();var r=t.data;if(\"m\"===e&&r.length>2&&(t.result.push([n,r[0],r[1]]),r=r.slice(2),e=\"l\",n=\"m\"===n?\"l\":\"L\"),\"r\"===e)t.result.push([n].concat(r));else for(;r.length>=rn[e]&&(t.result.push([n].concat(r.splice(0,rn[e]))),rn[e]););}function u(t){var n,r,a,u,c=t.max;if(t.segmentStart=t.index,n=t.path.charCodeAt(t.index),!e(n))return void(t.err=\"SvgPath: bad command \"+t.path[t.index]+\" (at pos \"+t.index+\")\");if(a=rn[t.path[t.index].toLowerCase()],t.index++,o(t),t.data=[],!a)return void h(t);for(r=!1;;){for(u=a;u>0;u--){if(s(t),t.err.length)return;t.data.push(t.param),o(t),r=!1,t.index<c&&44===t.path.charCodeAt(t.index)&&(t.index++,o(t),r=!0)}if(!r){if(t.index>=t.max)break;if(!i(t.path.charCodeAt(t.index)))break}}h(t)}function c(t,n){return[t[0]*n[0]+t[2]*n[1],t[1]*n[0]+t[3]*n[1],t[0]*n[2]+t[2]*n[3],t[1]*n[2]+t[3]*n[3],t[0]*n[4]+t[2]*n[5]+t[4],t[1]*n[4]+t[3]*n[5]+t[5]]}function f(){if(!(this instanceof f))return new f;this.queue=[],this.cache=null}function l(t,n,e,r){var i=t*r-n*e<0?-1:1,a=Math.sqrt(t*t+n*n),o=Math.sqrt(t*t+n*n),s=t*e+n*r,h=s/(a*o);return h>1&&(h=1),h<-1&&(h=-1),i*Math.acos(h)}function p(t,n,e,r,i,a,o,s,h,u){var c=u*(t-e)/2+h*(n-r)/2,f=-h*(t-e)/2+u*(n-r)/2,p=o*o,g=s*s,v=c*c,x=f*f,y=p*g-p*x-g*v;y<0&&(y=0),y/=p*x+g*v,y=Math.sqrt(y)*(i===a?-1:1);var d=y*o/s*f,m=y*-s/o*c,M=u*d-h*m+(t+e)/2,w=h*d+u*m+(n+r)/2,b=(c-d)/o,L=(f-m)/s,A=(-c-d)/o,q=(-f-m)/s,k=l(1,0,b,L),P=l(b,L,A,q);return 0===a&&P>0&&(P-=ln),1===a&&P<0&&(P+=ln),[M,w,k,P]}function g(t,n){var e=4/3*Math.tan(n/4),r=Math.cos(t),i=Math.sin(t),a=Math.cos(t+n),o=Math.sin(t+n);return[r,i,r-i*e,i+r*e,a+o*e,o-a*e,a,o]}function v(t,n,e){if(!(this instanceof v))return new v(t,n,e);this.rx=t,this.ry=n,this.ax=e}function x(t){if(!(this instanceof x))return new x(t);var n=on(t);this.segments=n.segments,this.err=n.err,this.__stack=[]}function y(t){var n=t.match(wn);return n?n.map(Number):[]}function d(t,n,e,r,i,a,o,s){this.a={x:t,y:n},this.b={x:e,y:r},this.c={x:i,y:a},this.d={x:o,y:s},null!==o&&void 0!==o&&null!==s&&void 0!==s?(this.getArcLength=_,this.getPoint=L,this.getDerivative=M):(this.getArcLength=A,this.getPoint=b,this.getDerivative=m),this.init()}function m(t,n,e){return{x:2*(1-e)*(t[1]-t[0])+2*e*(t[2]-t[1]),y:2*(1-e)*(n[1]-n[0])+2*e*(n[2]-n[1])}}function M(t,n,e){return b([3*(t[1]-t[0]),3*(t[2]-t[1]),3*(t[3]-t[2])],[3*(n[1]-n[0]),3*(n[2]-n[1]),3*(n[3]-n[2])],e)}function w(t,n,e,r,i){for(var a=1,o=t/n,s=(t-e(r,i,o))/n;a>.001;){var h=e(r,i,o+s),u=e(r,i,o-s),c=Math.abs(t-h)/n,f=Math.abs(t-u)/n;c<a?(a=c,o+=s):f<a?(a=f,o-=s):s/=2}return o}function b(t,n,e){return{x:(1-e)*(1-e)*t[0]+2*(1-e)*e*t[1]+e*e*t[2],y:(1-e)*(1-e)*n[0]+2*(1-e)*e*n[1]+e*e*n[2]}}function L(t,n,e){return{x:(1-e)*(1-e)*(1-e)*t[0]+3*(1-e)*(1-e)*e*t[1]+3*(1-e)*e*e*t[2]+e*e*e*t[3],y:(1-e)*(1-e)*(1-e)*n[0]+3*(1-e)*(1-e)*e*n[1]+3*(1-e)*e*e*n[2]+e*e*e*n[3]}}function A(t,n,e){void 0===e&&(e=1);var r=t[0]-2*t[1]+t[2],i=n[0]-2*n[1]+n[2],a=2*t[1]-2*t[0],o=2*n[1]-2*n[0],s=4*(r*r+i*i),h=4*(r*a+i*o),u=a*a+o*o;if(0===s)return e*Math.sqrt(Math.pow(t[2]-t[0],2)+Math.pow(n[2]-n[0],2));var c=h/(2*s),f=u/s,l=e+c,p=f-c*c;return Math.sqrt(s)/2*(l*Math.sqrt(l*l+p)-c*Math.sqrt(c*c+p)+p*Math.log(Math.abs((l+Math.sqrt(l*l+p))/(c+Math.sqrt(c*c+p)))))}function q(t,n){return qn[t][n]}function k(t,n,e){var r,i,a,o=e.length-1;if(0===o)return 0;if(0===t){for(i=0,a=0;a<=o;a++)i+=q(o,a)*Math.pow(1-n,o-a)*Math.pow(n,a)*e[a];return i}for(r=new Array(o),a=0;a<o;a++)r[a]=o*(e[a+1]-e[a]);return k(t-1,n,r)}function P(t,n,e){var r=k(1,e,t),i=k(1,e,n),a=r*r+i*i;return Math.sqrt(a)}function _(t,n,e){var r,i,a,o;void 0===e&&(e=1);for(r=e/2,i=0,a=0;a<20;a++)o=r*Ln[20][a]+r,i+=An[20][a]*P(t,n,o);return r*i}function E(t,n,e,r){var i=t*r-n*e<0?-1:1,a=t*e+n*r;return a>1&&(a=1),a<-1&&(a=-1),i*Math.acos(a)}function S(t,n,e,r,i,a,o,s,h,u){var c=u*(t-e)/2+h*(n-r)/2,f=-h*(t-e)/2+u*(n-r)/2,l=o*o,p=s*s,g=c*c,v=f*f,x=l*p-l*v-p*g;x<0&&(x=0),x/=l*v+p*g,x=Math.sqrt(x)*(i===a?-1:1);var y=x*o/s*f,d=x*-s/o*c,m=u*y-h*d+(t+e)/2,M=h*y+u*d+(n+r)/2,w=(c-y)/o,b=(f-d)/s,L=(-c-y)/o,A=(-f-d)/s,q=E(1,0,w,b),k=E(w,b,L,A);return 0===a&&k>0&&(k-=kn),1===a&&k<0&&(k+=kn),[m,M,q,k]}function C(t,n){var e=4/3*Math.tan(n/4),r=Math.cos(t),i=Math.sin(t),a=Math.cos(t+n),o=Math.sin(t+n);return[r,i,r-i*e,i+r*e,a+o*e,o-a*e,a,o]}function Z(t,n,e,r,i,a,o,s,h){var u=0,c=[],f=[];Pn(t,n,e,r,i,a,o,s,h).forEach(function(t){var n=new bn(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7]),e=n.getTotalLength();u+=e,c.push(e),f.push(n)}),this.length=u,this.partialLengths=c,this.curves=f}function T(t,n,e,r){this.x0=t,this.x1=n,this.y0=e,this.y1=r}function F(t,n){return Math.sqrt((t[0]-n[0])*(t[0]-n[0])+(t[1]-n[1])*(t[1]-n[1]))}function z(t,n,e){return[t[0]+(n[0]-t[0])*e,t[1]+(n[1]-t[1])*e]}function j(t,n){return F(t,n)<1e-9}function I(t,n,e){var r=t.map(function(t,e){return V(t,n[e])});return function(t){var n=r.map(function(n){return n(t)});return e?H(n):n}}function V(t,n){return function(e){return t.map(function(t,r){return t+e*(n[r]-t)})}}function X(t){return\"number\"==typeof t&&isFinite(t)}function Y(t){return G(t)?nn(t):[(t[0][0]+t[t.length-1][0])/2,(t[0][1]+t[t.length-1][1])/2]}function G(t){for(var n=0;n<t.length-2;n++){var e=t[n],r=t[n+1],i=t[n+2];if(e[0]*(r[1]-i[1])+r[0]*(i[1]-e[1])+i[0]*(e[1]-r[1]))return!0}return!1}function O(t){return new yn(t).abs()}function D(t){return t.toString().split(\"M\").map(function(t,n){return t=t.trim(),n&&t?\"M\"+t:t}).filter(function(t){return t})}function H(t){return\"M\"+t.join(\"L\")+\"Z\"}function N(t){return D(O(t))}function Q(t,n){var e=O(t);return U(e)||R(e,n)}function U(t){var n=t.segments||[],e=[];if(!n.length||\"M\"!==n[0][0])return!1;for(var r=0;r<n.length;r++){var i=n[r],a=i[0],o=i[1],s=i[2];if(\"M\"===a&&r||\"Z\"===a)break;if(\"M\"===a||\"L\"===a)e.push([o,s]);else if(\"H\"===a)e.push([o,e[e.length-1][1]]);else{if(\"V\"!==a)return!1;e.push([e[e.length-1][0],o])}}return!!e.length&&{ring:e}}function R(t,n){var e,r,i=D(t)[0],a=[],o=3;if(!i)throw new TypeError(Cn);r=B(i),e=r.getTotalLength(),n&&X(n)&&n>0&&(o=Math.max(o,Math.ceil(e/n)));for(var s=0;s<o;s++){var h=r.getPointAtLength(e*s/o);a.push([h.x,h.y])}return{ring:a,skipBisect:!0}}function B(t){if(\"undefined\"!=typeof window&&window&&window.document)try{var n=window.document.createElementNS(\"http://www.w3.org/2000/svg\",\"path\");return n.setAttributeNS(null,\"d\",t),n}catch(t){}return Sn(t)}function W(t,n){for(var e=t.length+n,r=en(t)/n,i=0,a=0,o=r/2;t.length<e;){var s=t[i],h=t[(i+1)%t.length],u=F(s,h);o<=a+u?(t.splice(i+1,0,u?z(s,h,(o-a)/u):s.slice(0)),o+=r):(a+=u,i++)}}function $(t,n){void 0===n&&(n=1/0);for(var e=0;e<t.length;e++)for(var r=t[e],i=e===t.length-1?t[0]:t[e+1];F(r,i)>n;)i=z(r,i,.5),t.splice(e+1,0,i)}function J(t,n){var e,r,i;if(\"string\"==typeof t){var a=Q(t,n);t=a.ring,i=a.skipBisect}else if(!Array.isArray(t))throw new TypeError(Cn);if(e=t.slice(0),!K(e))throw new TypeError(Cn);return e.length>1&&j(e[0],e[e.length-1])&&e.pop(),r=tn(e),r>0&&e.reverse(),!i&&n&&X(n)&&n>0&&$(e,n),e}function K(t){return t.every(function(t){return Array.isArray(t)&&t.length>=2&&X(t[0])&&X(t[1])})}function tt(t,n,e){var r;return r=t.length-n.length,W(t,r<0?-1*r:0),W(n,r>0?r:0),Tn(t,n),I(t,n,e)}function nt(t,n,e){e=e||2;var r=n&&n.length,i=r?n[0]*e:t.length,a=et(t,0,i,e,!0),o=[];if(!a)return o;var s,h,u,c,f,l,p;if(r&&(a=ut(t,n,a,e)),t.length>80*e){s=u=t[0],h=c=t[1];for(var g=e;g<i;g+=e)f=t[g],l=t[g+1],f<s&&(s=f),l<h&&(h=l),f>u&&(u=f),l>c&&(c=l);p=Math.max(u-s,c-h)}return it(a,o,e,s,h,p),o}function et(t,n,e,r,i){var a,o;if(i===Et(t,n,e,r)>0)for(a=n;a<e;a+=r)o=kt(a,t[a],t[a+1],o);else for(a=e-r;a>=n;a-=r)o=kt(a,t[a],t[a+1],o);return o&&Mt(o,o.next)&&(Pt(o),o=o.next),o}function rt(t,n){if(!t)return t;n||(n=t);var e,r=t;do{if(e=!1,r.steiner||!Mt(r,r.next)&&0!==mt(r.prev,r,r.next))r=r.next;else{if(Pt(r),(r=n=r.prev)===r.next)return null;e=!0}}while(e||r!==n);return n}function it(t,n,e,r,i,a,o){if(t){!o&&a&&pt(t,r,i,a);for(var s,h,u=t;t.prev!==t.next;)if(s=t.prev,h=t.next,a?ot(t,r,i,a):at(t))n.push(s.i/e),n.push(t.i/e),n.push(h.i/e),Pt(t),t=h.next,u=h.next;else if((t=h)===u){o?1===o?(t=st(t,n,e),it(t,n,e,r,i,a,2)):2===o&&ht(t,n,e,r,i,a):it(rt(t),n,e,r,i,a,1);break}}}function at(t){var n=t.prev,e=t,r=t.next;if(mt(n,e,r)>=0)return!1;for(var i=t.next.next;i!==t.prev;){if(yt(n.x,n.y,e.x,e.y,r.x,r.y,i.x,i.y)&&mt(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function ot(t,n,e,r){var i=t.prev,a=t,o=t.next;if(mt(i,a,o)>=0)return!1;for(var s=i.x<a.x?i.x<o.x?i.x:o.x:a.x<o.x?a.x:o.x,h=i.y<a.y?i.y<o.y?i.y:o.y:a.y<o.y?a.y:o.y,u=i.x>a.x?i.x>o.x?i.x:o.x:a.x>o.x?a.x:o.x,c=i.y>a.y?i.y>o.y?i.y:o.y:a.y>o.y?a.y:o.y,f=vt(s,h,n,e,r),l=vt(u,c,n,e,r),p=t.nextZ;p&&p.z<=l;){if(p!==t.prev&&p!==t.next&&yt(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&mt(p.prev,p,p.next)>=0)return!1;p=p.nextZ}for(p=t.prevZ;p&&p.z>=f;){if(p!==t.prev&&p!==t.next&&yt(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&mt(p.prev,p,p.next)>=0)return!1;p=p.prevZ}return!0}function st(t,n,e){var r=t;do{var i=r.prev,a=r.next.next;!Mt(i,a)&&wt(i,r,r.next,a)&&Lt(i,a)&&Lt(a,i)&&(n.push(i.i/e),n.push(r.i/e),n.push(a.i/e),Pt(r),Pt(r.next),r=t=a),r=r.next}while(r!==t);return r}function ht(t,n,e,r,i,a){var o=t;do{for(var s=o.next.next;s!==o.prev;){if(o.i!==s.i&&dt(o,s)){var h=qt(o,s);return o=rt(o,o.next),h=rt(h,h.next),it(o,n,e,r,i,a),void it(h,n,e,r,i,a)}s=s.next}o=o.next}while(o!==t)}function ut(t,n,e,r){var i,a,o,s,h,u=[];for(i=0,a=n.length;i<a;i++)o=n[i]*r,s=i<a-1?n[i+1]*r:t.length,h=et(t,o,s,r,!1),h===h.next&&(h.steiner=!0),u.push(xt(h));for(u.sort(ct),i=0;i<u.length;i++)ft(u[i],e),e=rt(e,e.next);return e}function ct(t,n){return t.x-n.x}function ft(t,n){if(n=lt(t,n)){var e=qt(n,t);rt(e,e.next)}}function lt(t,n){var e,r=n,i=t.x,a=t.y,o=-1/0;do{if(a<=r.y&&a>=r.next.y){var s=r.x+(a-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(s<=i&&s>o){if(o=s,s===i){if(a===r.y)return r;if(a===r.next.y)return r.next}e=r.x<r.next.x?r:r.next}}r=r.next}while(r!==n);if(!e)return null;if(i===o)return e.prev;var h,u=e,c=e.x,f=e.y,l=1/0;for(r=e.next;r!==u;)i>=r.x&&r.x>=c&&yt(a<f?i:o,a,c,f,a<f?o:i,a,r.x,r.y)&&((h=Math.abs(a-r.y)/(i-r.x))<l||h===l&&r.x>e.x)&&Lt(r,t)&&(e=r,l=h),r=r.next;return e}function pt(t,n,e,r){var i=t;do{null===i.z&&(i.z=vt(i.x,i.y,n,e,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,gt(i)}function gt(t){var n,e,r,i,a,o,s,h,u=1;do{for(e=t,t=null,a=null,o=0;e;){for(o++,r=e,s=0,n=0;n<u&&(s++,r=r.nextZ);n++);for(h=u;s>0||h>0&&r;)0===s?(i=r,r=r.nextZ,h--):0!==h&&r?e.z<=r.z?(i=e,e=e.nextZ,s--):(i=r,r=r.nextZ,h--):(i=e,e=e.nextZ,s--),a?a.nextZ=i:t=i,i.prevZ=a,a=i;e=r}a.nextZ=null,u*=2}while(o>1);return t}function vt(t,n,e,r,i){return t=32767*(t-e)/i,n=32767*(n-r)/i,t=16711935&(t|t<<8),t=252645135&(t|t<<4),t=858993459&(t|t<<2),t=1431655765&(t|t<<1),n=16711935&(n|n<<8),n=252645135&(n|n<<4),n=858993459&(n|n<<2),n=1431655765&(n|n<<1),t|n<<1}function xt(t){var n=t,e=t;do{n.x<e.x&&(e=n),n=n.next}while(n!==t);return e}function yt(t,n,e,r,i,a,o,s){return(i-o)*(n-s)-(t-o)*(a-s)>=0&&(t-o)*(r-s)-(e-o)*(n-s)>=0&&(e-o)*(a-s)-(i-o)*(r-s)>=0}function dt(t,n){return t.next.i!==n.i&&t.prev.i!==n.i&&!bt(t,n)&&Lt(t,n)&&Lt(n,t)&&At(t,n)}function mt(t,n,e){return(n.y-t.y)*(e.x-n.x)-(n.x-t.x)*(e.y-n.y)}function Mt(t,n){return t.x===n.x&&t.y===n.y}function wt(t,n,e,r){return!!(Mt(t,n)&&Mt(e,r)||Mt(t,r)&&Mt(e,n))||mt(t,n,e)>0!=mt(t,n,r)>0&&mt(e,r,t)>0!=mt(e,r,n)>0}function bt(t,n){var e=t;do{if(e.i!==t.i&&e.next.i!==t.i&&e.i!==n.i&&e.next.i!==n.i&&wt(e,e.next,t,n))return!0;e=e.next}while(e!==t);return!1}function Lt(t,n){return mt(t.prev,t,t.next)<0?mt(t,n,t.next)>=0&&mt(t,t.prev,n)>=0:mt(t,n,t.prev)<0||mt(t,t.next,n)<0}function At(t,n){var e=t,r=!1,i=(t.x+n.x)/2,a=(t.y+n.y)/2;do{e.y>a!=e.next.y>a&&i<(e.next.x-e.x)*(a-e.y)/(e.next.y-e.y)+e.x&&(r=!r),e=e.next}while(e!==t);return r}function qt(t,n){var e=new _t(t.i,t.x,t.y),r=new _t(n.i,n.x,n.y),i=t.next,a=n.prev;return t.next=n,n.prev=t,e.next=i,i.prev=e,r.next=e,e.prev=r,a.next=r,r.prev=a,r}function kt(t,n,e,r){var i=new _t(t,n,e);return r?(i.next=r.next,i.prev=r,r.next.prev=i,r.next=i):(i.prev=i,i.next=i),i}function Pt(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function _t(t,n,e){this.i=t,this.x=n,this.y=e,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Et(t,n,e,r){for(var i=0,a=n,o=e-r;a<e;a+=r)i+=(t[o]-t[a])*(t[a+1]+t[o+1]),o=a;return i}function St(t,n){var e=n.id,r=n.bbox,i=null==n.properties?{}:n.properties,a=Ct(t,n);return null==e&&null==r?{type:\"Feature\",properties:i,geometry:a}:null==r?{type:\"Feature\",id:e,properties:i,geometry:a}:{type:\"Feature\",id:e,bbox:r,properties:i,geometry:a}}function Ct(t,n){function e(t,n){n.length&&n.pop();for(var e=u[t<0?~t:t],r=0,i=e.length;r<i;++r)n.push(h(e[r],r));t<0&&Vn(n,i)}function r(t){return h(t)}function i(t){for(var n=[],r=0,i=t.length;r<i;++r)e(t[r],n);return n.length<2&&n.push(n[0]),n}function a(t){for(var n=i(t);n.length<4;)n.push(n[0]);return n}function o(t){return t.map(a)}function s(t){var n,e=t.type;switch(e){case\"GeometryCollection\":return{type:e,geometries:t.geometries.map(s)};case\"Point\":n=r(t.coordinates);break;case\"MultiPoint\":n=t.coordinates.map(r);break;case\"LineString\":n=i(t.arcs);break;case\"MultiLineString\":n=t.arcs.map(i);break;case\"Polygon\":n=o(t.arcs);break;case\"MultiPolygon\":n=t.arcs.map(o);break;default:return null}return{type:e,coordinates:n}}var h=In(t.transform),u=t.arcs;return s(n)}function Zt(t){for(var n,e=-1,r=t.length,i=t[r-1],a=0;++e<r;)n=i,i=t[e],a+=n[0]*i[1]-n[1]*i[0];return Math.abs(a)}function Tt(t,n){function e(t){switch(t.type){case\"GeometryCollection\":t.geometries.forEach(e);break;case\"Polygon\":r(t.arcs);break;case\"MultiPolygon\":t.arcs.forEach(r)}}function r(t){t.forEach(function(n){n.forEach(function(n){(a[n=n<0?~n:n]||(a[n]=[])).push(t)})}),o.push(t)}function i(n){return Zt(Ct(t,{type:\"Polygon\",arcs:[n]}).coordinates[0])}var a={},o=[],s=[];return n.forEach(e),o.forEach(function(t){if(!t._){var n=[],e=[t];for(t._=1,s.push(n);t=e.pop();)n.push(t),t.forEach(function(t){t.forEach(function(t){a[t<0?~t:t].forEach(function(t){t._||(t._=1,e.push(t))})})})}}),o.forEach(function(t){delete t._}),{type:\"MultiPolygon\",arcs:s.map(function(n){var e,r=[];if(n.forEach(function(t){t.forEach(function(t){t.forEach(function(t){a[t<0?~t:t].length<2&&r.push(t)})})}),r=Yn(t,r),(e=r.length)>1)for(var o,s,h=1,u=i(r[0]);h<e;++h)(o=i(r[h]))>u&&(s=r[0],r[0]=r[h],r[h]=s,u=o);return r})}}function Ft(t){return function(n,e){return Dn(t(n),e)}}function zt(t,n){var e={},r={type:\"Topology\",objects:{triangles:{type:\"GeometryCollection\",geometries:[]}},arcs:[]};return t.forEach(function(t){var i=[];t.forEach(function(t,a){var o=t[0]<t[1]?t.join(\",\"):t[1]+\",\"+t[0],s=t.map(function(t){return n[t]});o in e?i.push(~e[o]):(i.push(e[o]=r.arcs.length),r.arcs.push(s))}),r.objects.triangles.geometries.push({type:\"Polygon\",area:Math.abs(tn(t.map(function(t){return n[t[0]]}))),arcs:[i]})}),r.objects.triangles.geometries.sort(function(t,n){return t.area-n.area}),r}function jt(t,n){for(var e=t.objects.triangles.geometries,r=Hn(function(t){return t.area}).left;e.length>n;)!function(){var n=e[0],i=On(e)[0][0],a=e[i],o=Tt(t,[n,a]);o.area=n.area+a.area,o.type=\"Polygon\",o.arcs=o.arcs[0],e.splice(i,1),e.shift(),e.splice(r(e,o.area),0,o)}();if(n>e.length)throw new RangeError(\"Can't collapse topology into \"+n+\" pieces.\");return Xn(t,t.objects.triangles).features.map(function(t){return t.geometry.coordinates[0].pop(),t.geometry.coordinates[0]})}function It(t){for(var n=zn(t.reduce(function(t,n){return t.concat([n[0]],[n[1]])},[])),e=[],r=0,i=n.length;r<i;r+=3)e.push([[n[r],n[r+1]],[n[r+1],n[r+2]],[n[r+2],n[r]]]);return e}function Vt(t,n,e){function r(t,n,o){void 0===n&&(n=[]),void 0===o&&(o=0);for(var s=0;s<t.length;s++){var h=t.splice(s,1),u=e[h[0]][n.length];o+u<i&&(t.length?r(t.slice(),n.concat(h),o+u):(i=o+u,a=n.concat(h))),t.length&&t.splice(s,0,h[0])}}var i=1/0,a=t.map(function(t,n){return n});return r(a),a}function Xt(t,n){var e=F(Y(t),Y(n));return e*e}function Yt(t,n,e){void 0===e&&(e={});var r=e.maxSegmentLength;void 0===r&&(r=10);var i=e.string;void 0===i&&(i=!0);var a=e.single;void 0===a&&(a=!1);var o=J(t,r);o.length<n.length+2&&W(o,n.length+2-o.length);var s,h=Qn(o,n.length),u=n.map(function(t){return J(t,r)}),c=\"string\"==typeof t&&t;return a&&!n.every(function(t){return\"string\"==typeof t})||(s=n.slice(0)),Dt(h,u,{match:!0,string:i,single:a,t0:c,t1:s})}function Gt(t,n,e){void 0===e&&(e={});var r=e.maxSegmentLength;void 0===r&&(r=10);var i=e.string;void 0===i&&(i=!0);var a=e.single;void 0===a&&(a=!1);var o=Yt(n,t,{maxSegmentLength:r,string:i,single:a});return a?function(t){return o(1-t)}:o.map(function(t){return function(n){return t(1-n)}})}function Ot(t,n,e){void 0===e&&(e={});var r=e.maxSegmentLength;void 0===r&&(r=10);var i=e.string;void 0===i&&(i=!0);var a=e.single;if(void 0===a&&(a=!1),!Array.isArray(t)||!Array.isArray(n)||t.length!==n.length||!t.length)throw new TypeError(Zn);var o,s,h=function(t){return J(t,r)},u=t.map(h),c=n.map(h);return a?(t.every(function(t){return\"string\"==typeof t})&&(o=t.slice(0)),n.every(function(t){return\"string\"==typeof t})&&(s=n.slice(0))):(o=t.slice(0),s=n.slice(0)),Dt(u,c,{string:i,single:a,t0:o,t1:s,match:!1})}function Dt(t,n,e){void 0===e&&(e={});var r=e.string,i=e.single,a=e.t0,o=e.t1,s=e.match,h=s?Un(t,n):t.map(function(t,n){return n}),u=h.map(function(e,i){return tt(t[e],n[i],r)});if(s&&Array.isArray(a)&&(a=h.map(function(t){return a[t]})),i&&r&&(Array.isArray(a)&&(a=a.join(\" \")),Array.isArray(o)&&(o=o.join(\" \"))),i){var c=r?function(t){return u.map(function(n){return n(t)}).join(\" \")}:function(t){return u.map(function(n){return n(t)})};return r&&(a||o)?function(t){return t<1e-4&&a||1-t<1e-4&&o||c(t)}:c}return r?(a=Array.isArray(a)?a.map(function(t){return\"string\"==typeof t&&t}):[],o=Array.isArray(o)?o.map(function(t){return\"string\"==typeof t&&t}):[],u.map(function(t,n){return a[n]||o[n]?function(e){return e<1e-4&&a[n]||1-e<1e-4&&o[n]||t(e)}:t})):u}function Ht(t,n,e,r,i){return Rt(Bt(t,n,e),r,Jt(t,n,e),2*Math.PI*e,i)}function Nt(t,n,e,r,i){var a=Ht(n,e,r,t,i);return function(t){return a(1-t)}}function Qt(t,n,e,r,i,a){return Rt(Wt(t,n,e,r),i,Kt(t,n,e,r),2*e+2*r,a)}function Ut(t,n,e,r,i,a){var o=Qt(n,e,r,i,t,a);return function(t){return o(1-t)}}function Rt(t,n,e,r,i){void 0===i&&(i={});var a=i.maxSegmentLength;void 0===a&&(a=10);var o=i.string;void 0===o&&(o=!0);var s,h,u=J(n,a);return X(r)&&u.length<r/a&&W(u,Math.ceil(r/a-u.length)),s=t(u),h=I(s,u,o),o?function(t){return t<1e-4?e:h(t)}:h}function Bt(t,n,e){return function(r){var i=Y(r),a=en(r.concat([r[0]])),o=Math.atan2(r[0][1]-i[1],r[0][0]-i[0]),s=0;return r.map(function(i,h){var u;return h&&(s+=F(i,r[h-1])),u=o+2*Math.PI*(a?s/a:h/r.length),[Math.cos(u)*e+t,Math.sin(u)*e+n]})}}function Wt(t,n,e,r){return function(i){var a=Y(i),o=en(i.concat([i[0]])),s=Math.atan2(i[0][1]-a[1],i[0][0]-a[0]),h=0;s<0&&(s=2*Math.PI+s);var u=s/(2*Math.PI);return i.map(function(a,s){s&&(h+=F(a,i[s-1]));var c=$t((u+(o?h/o:s/i.length))%1);return[t+c[0]*e,n+c[1]*r]})}}function $t(t){return t<=1/8?[1,.5+4*t]:t<=3/8?[1.5-4*t,1]:t<=5/8?[0,2.5-4*t]:t<=7/8?[4*t-2.5,0]:[1,4*t-3.5]}function Jt(t,n,e){var r=t-e+\",\"+n,i=t+e+\",\"+n,a=\"A\"+e+\",\"+e+\",0,1,1,\";return\"M\"+r+a+i+a+r+\"Z\"}function Kt(t,n,e,r){var i=t+e,a=n+r;return\"M\"+t+\",\"+n+\"L\"+i+\",\"+n+\"L\"+i+\",\"+a+\"L\"+t+\",\"+a+\"Z\"}var tn=function(t){for(var n,e=-1,r=t.length,i=t[r-1],a=0;++e<r;)n=i,i=t[e],a+=n[1]*i[0]-n[0]*i[1];return a/2},nn=function(t){for(var n,e,r=-1,i=t.length,a=0,o=0,s=t[i-1],h=0;++r<i;)n=s,s=t[r],h+=e=n[0]*s[1]-s[0]*n[1],a+=(n[0]+s[0])*e,o+=(n[1]+s[1])*e;return h*=3,[a/h,o/h]},en=function(t){for(var n,e,r=-1,i=t.length,a=t[i-1],o=a[0],s=a[1],h=0;++r<i;)n=o,e=s,a=t[r],o=a[0],s=a[1],n-=o,e-=s,h+=Math.sqrt(n*n+e*e);return h},rn={a:7,c:6,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,z:0},an=[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279],on=function(t){var n=new a(t),e=n.max;for(o(n);n.index<e&&!n.err.length;)u(n);return n.err.length?n.result=[]:n.result.length&&(\"mM\".indexOf(n.result[0][0])<0?(n.err=\"SvgPath: string should start with `M` or `m`\",n.result=[]):n.result[0][0]=\"M\"),{err:n.err,segments:n.result}};f.prototype.matrix=function(t){return 1===t[0]&&0===t[1]&&0===t[2]&&1===t[3]&&0===t[4]&&0===t[5]?this:(this.cache=null,this.queue.push(t),this)},f.prototype.translate=function(t,n){return 0===t&&0===n||(this.cache=null,this.queue.push([1,0,0,1,t,n])),this},f.prototype.scale=function(t,n){return 1===t&&1===n||(this.cache=null,this.queue.push([t,0,0,n,0,0])),this},f.prototype.rotate=function(t,n,e){var r,i,a;return 0!==t&&(this.translate(n,e),r=t*Math.PI/180,i=Math.cos(r),a=Math.sin(r),this.queue.push([i,a,-a,i,0,0]),this.cache=null,this.translate(-n,-e)),this},f.prototype.skewX=function(t){return 0!==t&&(this.cache=null,this.queue.push([1,0,Math.tan(t*Math.PI/180),1,0,0])),this},f.prototype.skewY=function(t){return 0!==t&&(this.cache=null,this.queue.push([1,Math.tan(t*Math.PI/180),0,1,0,0])),this},f.prototype.toArray=function(){var t=this;if(this.cache)return this.cache;if(!this.queue.length)return this.cache=[1,0,0,1,0,0],this.cache;if(this.cache=this.queue[0],1===this.queue.length)return this.cache;for(var n=1;n<this.queue.length;n++)t.cache=c(t.cache,t.queue[n]);return this.cache},f.prototype.calc=function(t,n,e){var r;return this.queue.length?(this.cache||(this.cache=this.toArray()),r=this.cache,[t*r[0]+n*r[2]+(e?0:r[4]),t*r[1]+n*r[3]+(e?0:r[5])]):[t,n]};var sn=f,hn={matrix:!0,scale:!0,rotate:!0,translate:!0,skewX:!0,skewY:!0},un=/\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*/,cn=/[\\s,]+/,fn=function(t){var n,e,r=new sn;return t.split(un).forEach(function(t){if(t.length){if(void 0!==hn[t])return void(n=t);switch(e=t.split(cn).map(function(t){return+t||0}),n){case\"matrix\":return void(6===e.length&&r.matrix(e));case\"scale\":return void(1===e.length?r.scale(e[0],e[0]):2===e.length&&r.scale(e[0],e[1]));case\"rotate\":return void(1===e.length?r.rotate(e[0],0,0):3===e.length&&r.rotate(e[0],e[1],e[2]));case\"translate\":return void(1===e.length?r.translate(e[0],0):2===e.length&&r.translate(e[0],e[1]));case\"skewX\":return void(1===e.length&&r.skewX(e[0]));case\"skewY\":return void(1===e.length&&r.skewY(e[0]))}}}),r},ln=2*Math.PI,pn=function(t,n,e,r,i,a,o,s,h){var u=Math.sin(h*ln/360),c=Math.cos(h*ln/360),f=c*(t-e)/2+u*(n-r)/2,l=-u*(t-e)/2+c*(n-r)/2;if(0===f&&0===l)return[];if(0===o||0===s)return[];o=Math.abs(o),s=Math.abs(s);var v=f*f/(o*o)+l*l/(s*s);v>1&&(o*=Math.sqrt(v),s*=Math.sqrt(v));var x=p(t,n,e,r,i,a,o,s,u,c),y=[],d=x[2],m=x[3],M=Math.max(Math.ceil(Math.abs(m)/(ln/4)),1);m/=M;for(var w=0;w<M;w++)y.push(g(d,m)),d+=m;return y.map(function(t){for(var n=0;n<t.length;n+=2){var e=t[n+0],r=t[n+1];e*=o,r*=s;var i=c*e-u*r,a=u*e+c*r;t[n+0]=i+x[0],t[n+1]=a+x[1]}return t})},gn=Math.PI/180;v.prototype.transform=function(t){var n=Math.cos(this.ax*gn),e=Math.sin(this.ax*gn),r=[this.rx*(t[0]*n+t[2]*e),this.rx*(t[1]*n+t[3]*e),this.ry*(-t[0]*e+t[2]*n),this.ry*(-t[1]*e+t[3]*n)],i=r[0]*r[0]+r[2]*r[2],a=r[1]*r[1]+r[3]*r[3],o=((r[0]-r[3])*(r[0]-r[3])+(r[2]+r[1])*(r[2]+r[1]))*((r[0]+r[3])*(r[0]+r[3])+(r[2]-r[1])*(r[2]-r[1])),s=(i+a)/2;if(o<1e-10*s)return this.rx=this.ry=Math.sqrt(s),this.ax=0,this;var h=r[0]*r[1]+r[2]*r[3];o=Math.sqrt(o);var u=s+o/2,c=s-o/2;return this.ax=Math.abs(h)<1e-10&&Math.abs(u-a)<1e-10?90:180*Math.atan(Math.abs(h)>Math.abs(u-a)?(u-i)/h:h/(u-a))/Math.PI,this.ax>=0?(this.rx=Math.sqrt(u),this.ry=Math.sqrt(c)):(this.ax+=90,this.rx=Math.sqrt(c),this.ry=Math.sqrt(u)),this},v.prototype.isDegenerate=function(){return this.rx<1e-10*this.ry||this.ry<1e-10*this.rx};var vn=v;x.prototype.__matrix=function(t){var n,e=this;t.queue.length&&this.iterate(function(r,i,a,o){var s,h,u,c;switch(r[0]){case\"v\":s=t.calc(0,r[1],!0),h=0===s[0]?[\"v\",s[1]]:[\"l\",s[0],s[1]];break;case\"V\":s=t.calc(a,r[1],!1),h=s[0]===t.calc(a,o,!1)[0]?[\"V\",s[1]]:[\"L\",s[0],s[1]];break;case\"h\":s=t.calc(r[1],0,!0),h=0===s[1]?[\"h\",s[0]]:[\"l\",s[0],s[1]];break;case\"H\":s=t.calc(r[1],o,!1),h=s[1]===t.calc(a,o,!1)[1]?[\"H\",s[0]]:[\"L\",s[0],s[1]];break;case\"a\":case\"A\":var f=t.toArray(),l=vn(r[1],r[2],r[3]).transform(f);if(f[0]*f[3]-f[1]*f[2]<0&&(r[5]=r[5]?\"0\":\"1\"),s=t.calc(r[6],r[7],\"a\"===r[0]),\"A\"===r[0]&&r[6]===a&&r[7]===o||\"a\"===r[0]&&0===r[6]&&0===r[7]){h=[\"a\"===r[0]?\"l\":\"L\",s[0],s[1]];break}h=l.isDegenerate()?[\"a\"===r[0]?\"l\":\"L\",s[0],s[1]]:[r[0],l.rx,l.ry,l.ax,r[4],r[5],s[0],s[1]];break;case\"m\":c=i>0,s=t.calc(r[1],r[2],c),h=[\"m\",s[0],s[1]];break;default:for(u=r[0],h=[u],c=u.toLowerCase()===u,n=1;n<r.length;n+=2)s=t.calc(r[n],r[n+1],c),h.push(s[0],s[1])}e.segments[i]=h},!0)},x.prototype.__evaluateStack=function(){var t,n,e=this;if(this.__stack.length){if(1===this.__stack.length)return this.__matrix(this.__stack[0]),void(this.__stack=[]);for(t=sn(),n=this.__stack.length;--n>=0;)t.matrix(e.__stack[n].toArray());this.__matrix(t),this.__stack=[]}},x.prototype.toString=function(){var t,n,e=this,r=[];this.__evaluateStack();for(var i=0;i<this.segments.length;i++)n=e.segments[i][0],t=i>0&&\"m\"!==n&&\"M\"!==n&&n===e.segments[i-1][0],r=r.concat(t?e.segments[i].slice(1):e.segments[i]);return r.join(\" \").replace(/ ?([achlmqrstvz]) ?/gi,\"$1\").replace(/ \\-/g,\"-\").replace(/zm/g,\"z m\")},x.prototype.translate=function(t,n){return this.__stack.push(sn().translate(t,n||0)),this},x.prototype.scale=function(t,n){return this.__stack.push(sn().scale(t,n||0===n?n:t)),this},x.prototype.rotate=function(t,n,e){return this.__stack.push(sn().rotate(t,n||0,e||0)),this},x.prototype.skewX=function(t){return this.__stack.push(sn().skewX(t)),this},x.prototype.skewY=function(t){return this.__stack.push(sn().skewY(t)),this},x.prototype.matrix=function(t){return this.__stack.push(sn().matrix(t)),this},x.prototype.transform=function(t){return t.trim()?(this.__stack.push(fn(t)),this):this},x.prototype.round=function(t){var n,e=0,r=0,i=0,a=0;return t=t||0,this.__evaluateStack(),this.segments.forEach(function(o){var s=o[0].toLowerCase()===o[0];switch(o[0]){case\"H\":case\"h\":return s&&(o[1]+=i),i=o[1]-o[1].toFixed(t),void(o[1]=+o[1].toFixed(t));case\"V\":case\"v\":return s&&(o[1]+=a),a=o[1]-o[1].toFixed(t),void(o[1]=+o[1].toFixed(t));case\"Z\":case\"z\":return i=e,void(a=r);case\"M\":case\"m\":return s&&(o[1]+=i,o[2]+=a),i=o[1]-o[1].toFixed(t),a=o[2]-o[2].toFixed(t),e=i,r=a,o[1]=+o[1].toFixed(t),void(o[2]=+o[2].toFixed(t));case\"A\":case\"a\":return s&&(o[6]+=i,o[7]+=a),i=o[6]-o[6].toFixed(t),a=o[7]-o[7].toFixed(t),o[1]=+o[1].toFixed(t),o[2]=+o[2].toFixed(t),o[3]=+o[3].toFixed(t+2),o[6]=+o[6].toFixed(t),void(o[7]=+o[7].toFixed(t));default:return n=o.length,s&&(o[n-2]+=i,o[n-1]+=a),i=o[n-2]-o[n-2].toFixed(t),a=o[n-1]-o[n-1].toFixed(t),void o.forEach(function(n,e){e&&(o[e]=+o[e].toFixed(t))})}}),this},x.prototype.iterate=function(t,n){var e,r,i,a=this.segments,o={},s=!1,h=0,u=0,c=0,f=0;if(n||this.__evaluateStack(),a.forEach(function(n,e){var r=t(n,e,h,u);Array.isArray(r)&&(o[e]=r,s=!0);var i=n[0]===n[0].toLowerCase();switch(n[0]){case\"m\":case\"M\":return h=n[1]+(i?h:0),u=n[2]+(i?u:0),c=h,void(f=u);case\"h\":case\"H\":return void(h=n[1]+(i?h:0));case\"v\":case\"V\":return void(u=n[1]+(i?u:0));case\"z\":case\"Z\":return h=c,void(u=f);default:h=n[n.length-2]+(i?h:0),u=n[n.length-1]+(i?u:0)}}),!s)return this;for(i=[],e=0;e<a.length;e++)if(void 0!==o[e])for(r=0;r<o[e].length;r++)i.push(o[e][r]);else i.push(a[e]);return this.segments=i,this},x.prototype.abs=function(){return this.iterate(function(t,n,e,r){var i,a=t[0],o=a.toUpperCase();if(a!==o)switch(t[0]=o,a){case\"v\":return void(t[1]+=r);case\"a\":return t[6]+=e,void(t[7]+=r);default:for(i=1;i<t.length;i++)t[i]+=i%2?e:r}},!0),this},x.prototype.rel=function(){return this.iterate(function(t,n,e,r){var i,a=t[0],o=a.toLowerCase();if(a!==o&&(0!==n||\"M\"!==a))switch(t[0]=o,a){case\"V\":return void(t[1]-=r);case\"A\":return t[6]-=e,void(t[7]-=r);default:for(i=1;i<t.length;i++)t[i]-=i%2?e:r}},!0),this},x.prototype.unarc=function(){return this.iterate(function(t,n,e,r){var i,a,o,s=[],h=t[0];return\"A\"!==h&&\"a\"!==h?null:(\"a\"===h?(a=e+t[6],o=r+t[7]):(a=t[6],o=t[7]),i=pn(e,r,a,o,t[4],t[5],t[1],t[2],t[3]),0===i.length?[[\"a\"===t[0]?\"l\":\"L\",t[6],t[7]]]:(i.forEach(function(t){s.push([\"C\",t[2],t[3],t[4],t[5],t[6],t[7]])}),s))}),this},x.prototype.unshort=function(){var t,n,e,r,i,a=this.segments;return this.iterate(function(o,s,h,u){var c,f=o[0],l=f.toUpperCase();s&&(\"T\"===l?(c=\"t\"===f,e=a[s-1],\"Q\"===e[0]?(t=e[1]-h,n=e[2]-u):\"q\"===e[0]?(t=e[1]-e[3],n=e[2]-e[4]):(t=0,n=0),r=-t,i=-n,c||(r+=h,i+=u),a[s]=[c?\"q\":\"Q\",r,i,o[1],o[2]]):\"S\"===l&&(c=\"s\"===f,e=a[s-1],\"C\"===e[0]?(t=e[3]-h,n=e[4]-u):\"c\"===e[0]?(t=e[3]-e[5],n=e[4]-e[6]):(t=0,n=0),r=-t,i=-n,c||(r+=h,i+=u),a[s]=[c?\"c\":\"C\",r,i,o[1],o[2],o[3],o[4]]))}),this};var xn=x,yn=xn,dn={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},mn=/([astvzqmhlc])([^astvzqmhlc]*)/gi,Mn=function(t){var n=[];return t.replace(mn,function(t,e,r){var i=e.toLowerCase();for(r=y(r),\"m\"===i&&r.length>2&&(n.push([e].concat(r.splice(0,2))),i=\"l\",e=\"m\"===e?\"l\":\"L\");r.length>=0;){if(r.length===dn[i])return r.unshift(e),n.push(r);if(r.length<dn[i])throw new Error(\"malformed path data\");n.push([e].concat(r.splice(0,dn[i])))}}),n},wn=/-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/gi,bn=function(t,n,e,r,i,a,o,s){return new d(t,n,e,r,i,a,o,s)};d.prototype={constructor:d,init:function(){this.length=this.getArcLength([this.a.x,this.b.x,this.c.x,this.d.x],[this.a.y,this.b.y,this.c.y,this.d.y])},getTotalLength:function(){return this.length},getPointAtLength:function(t){var n=w(t,this.length,this.getArcLength,[this.a.x,this.b.x,this.c.x,this.d.x],[this.a.y,this.b.y,this.c.y,this.d.y]);return this.getPoint([this.a.x,this.b.x,this.c.x,this.d.x],[this.a.y,this.b.y,this.c.y,this.d.y],n)},getTangentAtLength:function(t){var n=w(t,this.length,this.getArcLength,[this.a.x,this.b.x,this.c.x,this.d.x],[this.a.y,this.b.y,this.c.y,this.d.y]),e=this.getDerivative([this.a.x,this.b.x,this.c.x,this.d.x],[this.a.y,this.b.y,this.c.y,this.d.y],n),r=Math.sqrt(e.x*e.x+e.y*e.y);return r>0?{x:e.x/r,y:e.y/r}:{x:0,y:0}},getPropertiesAtLength:function(t){var n,e=w(t,this.length,this.getArcLength,[this.a.x,this.b.x,this.c.x,this.d.x],[this.a.y,this.b.y,this.c.y,this.d.y]),r=this.getDerivative([this.a.x,this.b.x,this.c.x,this.d.x],[this.a.y,this.b.y,this.c.y,this.d.y],e),i=Math.sqrt(r.x*r.x+r.y*r.y);n=i>0?{x:r.x/i,y:r.y/i}:{\nx:0,y:0};var a=this.getPoint([this.a.x,this.b.x,this.c.x,this.d.x],[this.a.y,this.b.y,this.c.y,this.d.y],e);return{x:a.x,y:a.y,tangentX:n.x,tangentY:n.y}}};var Ln=[[],[],[-.5773502691896257,.5773502691896257],[0,-.7745966692414834,.7745966692414834],[-.33998104358485626,.33998104358485626,-.8611363115940526,.8611363115940526],[0,-.5384693101056831,.5384693101056831,-.906179845938664,.906179845938664],[.6612093864662645,-.6612093864662645,-.2386191860831969,.2386191860831969,-.932469514203152,.932469514203152],[0,.4058451513773972,-.4058451513773972,-.7415311855993945,.7415311855993945,-.9491079123427585,.9491079123427585],[-.1834346424956498,.1834346424956498,-.525532409916329,.525532409916329,-.7966664774136267,.7966664774136267,-.9602898564975363,.9602898564975363],[0,-.8360311073266358,.8360311073266358,-.9681602395076261,.9681602395076261,-.3242534234038089,.3242534234038089,-.6133714327005904,.6133714327005904],[-.14887433898163122,.14887433898163122,-.4333953941292472,.4333953941292472,-.6794095682990244,.6794095682990244,-.8650633666889845,.8650633666889845,-.9739065285171717,.9739065285171717],[0,-.26954315595234496,.26954315595234496,-.5190961292068118,.5190961292068118,-.7301520055740494,.7301520055740494,-.8870625997680953,.8870625997680953,-.978228658146057,.978228658146057],[-.1252334085114689,.1252334085114689,-.3678314989981802,.3678314989981802,-.5873179542866175,.5873179542866175,-.7699026741943047,.7699026741943047,-.9041172563704749,.9041172563704749,-.9815606342467192,.9815606342467192],[0,-.2304583159551348,.2304583159551348,-.44849275103644687,.44849275103644687,-.6423493394403402,.6423493394403402,-.8015780907333099,.8015780907333099,-.9175983992229779,.9175983992229779,-.9841830547185881,.9841830547185881],[-.10805494870734367,.10805494870734367,-.31911236892788974,.31911236892788974,-.5152486363581541,.5152486363581541,-.6872929048116855,.6872929048116855,-.827201315069765,.827201315069765,-.9284348836635735,.9284348836635735,-.9862838086968123,.9862838086968123],[0,-.20119409399743451,.20119409399743451,-.3941513470775634,.3941513470775634,-.5709721726085388,.5709721726085388,-.7244177313601701,.7244177313601701,-.8482065834104272,.8482065834104272,-.937273392400706,.937273392400706,-.9879925180204854,.9879925180204854],[-.09501250983763744,.09501250983763744,-.2816035507792589,.2816035507792589,-.45801677765722737,.45801677765722737,-.6178762444026438,.6178762444026438,-.755404408355003,.755404408355003,-.8656312023878318,.8656312023878318,-.9445750230732326,.9445750230732326,-.9894009349916499,.9894009349916499],[0,-.17848418149584785,.17848418149584785,-.3512317634538763,.3512317634538763,-.5126905370864769,.5126905370864769,-.6576711592166907,.6576711592166907,-.7815140038968014,.7815140038968014,-.8802391537269859,.8802391537269859,-.9506755217687678,.9506755217687678,-.9905754753144174,.9905754753144174],[-.0847750130417353,.0847750130417353,-.2518862256915055,.2518862256915055,-.41175116146284263,.41175116146284263,-.5597708310739475,.5597708310739475,-.6916870430603532,.6916870430603532,-.8037049589725231,.8037049589725231,-.8926024664975557,.8926024664975557,-.9558239495713977,.9558239495713977,-.9915651684209309,.9915651684209309],[0,-.16035864564022537,.16035864564022537,-.31656409996362983,.31656409996362983,-.46457074137596094,.46457074137596094,-.600545304661681,.600545304661681,-.7209661773352294,.7209661773352294,-.8227146565371428,.8227146565371428,-.9031559036148179,.9031559036148179,-.96020815213483,.96020815213483,-.9924068438435844,.9924068438435844],[-.07652652113349734,.07652652113349734,-.22778585114164507,.22778585114164507,-.37370608871541955,.37370608871541955,-.5108670019508271,.5108670019508271,-.636053680726515,.636053680726515,-.7463319064601508,.7463319064601508,-.8391169718222188,.8391169718222188,-.912234428251326,.912234428251326,-.9639719272779138,.9639719272779138,-.9931285991850949,.9931285991850949],[0,-.1455618541608951,.1455618541608951,-.2880213168024011,.2880213168024011,-.4243421202074388,.4243421202074388,-.5516188358872198,.5516188358872198,-.6671388041974123,.6671388041974123,-.7684399634756779,.7684399634756779,-.8533633645833173,.8533633645833173,-.9200993341504008,.9200993341504008,-.9672268385663063,.9672268385663063,-.9937521706203895,.9937521706203895],[-.06973927331972223,.06973927331972223,-.20786042668822127,.20786042668822127,-.34193582089208424,.34193582089208424,-.469355837986757,.469355837986757,-.5876404035069116,.5876404035069116,-.6944872631866827,.6944872631866827,-.7878168059792081,.7878168059792081,-.8658125777203002,.8658125777203002,-.926956772187174,.926956772187174,-.9700604978354287,.9700604978354287,-.9942945854823992,.9942945854823992],[0,-.1332568242984661,.1332568242984661,-.26413568097034495,.26413568097034495,-.3903010380302908,.3903010380302908,-.5095014778460075,.5095014778460075,-.6196098757636461,.6196098757636461,-.7186613631319502,.7186613631319502,-.8048884016188399,.8048884016188399,-.8767523582704416,.8767523582704416,-.9329710868260161,.9329710868260161,-.9725424712181152,.9725424712181152,-.9947693349975522,.9947693349975522],[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213]],An=[[],[],[1,1],[.8888888888888888,.5555555555555556,.5555555555555556],[.6521451548625461,.6521451548625461,.34785484513745385,.34785484513745385],[.5688888888888889,.47862867049936647,.47862867049936647,.23692688505618908,.23692688505618908],[.3607615730481386,.3607615730481386,.46791393457269104,.46791393457269104,.17132449237917036,.17132449237917036],[.4179591836734694,.3818300505051189,.3818300505051189,.27970539148927664,.27970539148927664,.1294849661688697,.1294849661688697],[.362683783378362,.362683783378362,.31370664587788727,.31370664587788727,.22238103445337448,.22238103445337448,.10122853629037626,.10122853629037626],[.3302393550012598,.1806481606948574,.1806481606948574,.08127438836157441,.08127438836157441,.31234707704000286,.31234707704000286,.26061069640293544,.26061069640293544],[.29552422471475287,.29552422471475287,.26926671930999635,.26926671930999635,.21908636251598204,.21908636251598204,.1494513491505806,.1494513491505806,.06667134430868814,.06667134430868814],[.2729250867779006,.26280454451024665,.26280454451024665,.23319376459199048,.23319376459199048,.18629021092773426,.18629021092773426,.1255803694649046,.1255803694649046,.05566856711617366,.05566856711617366],[.24914704581340277,.24914704581340277,.2334925365383548,.2334925365383548,.20316742672306592,.20316742672306592,.16007832854334622,.16007832854334622,.10693932599531843,.10693932599531843,.04717533638651183,.04717533638651183],[.2325515532308739,.22628318026289723,.22628318026289723,.2078160475368885,.2078160475368885,.17814598076194574,.17814598076194574,.13887351021978725,.13887351021978725,.09212149983772845,.09212149983772845,.04048400476531588,.04048400476531588],[.2152638534631578,.2152638534631578,.2051984637212956,.2051984637212956,.18553839747793782,.18553839747793782,.15720316715819355,.15720316715819355,.12151857068790319,.12151857068790319,.08015808715976021,.08015808715976021,.03511946033175186,.03511946033175186],[.2025782419255613,.19843148532711158,.19843148532711158,.1861610000155622,.1861610000155622,.16626920581699392,.16626920581699392,.13957067792615432,.13957067792615432,.10715922046717194,.10715922046717194,.07036604748810812,.07036604748810812,.03075324199611727,.03075324199611727],[.1894506104550685,.1894506104550685,.18260341504492358,.18260341504492358,.16915651939500254,.16915651939500254,.14959598881657674,.14959598881657674,.12462897125553388,.12462897125553388,.09515851168249279,.09515851168249279,.062253523938647894,.062253523938647894,.027152459411754096,.027152459411754096],[.17944647035620653,.17656270536699264,.17656270536699264,.16800410215645004,.16800410215645004,.15404576107681028,.15404576107681028,.13513636846852548,.13513636846852548,.11188384719340397,.11188384719340397,.08503614831717918,.08503614831717918,.0554595293739872,.0554595293739872,.02414830286854793,.02414830286854793],[.1691423829631436,.1691423829631436,.16427648374583273,.16427648374583273,.15468467512626524,.15468467512626524,.14064291467065065,.14064291467065065,.12255520671147846,.12255520671147846,.10094204410628717,.10094204410628717,.07642573025488905,.07642573025488905,.0497145488949698,.0497145488949698,.02161601352648331,.02161601352648331],[.1610544498487837,.15896884339395434,.15896884339395434,.15276604206585967,.15276604206585967,.1426067021736066,.1426067021736066,.12875396253933621,.12875396253933621,.11156664554733399,.11156664554733399,.09149002162245,.09149002162245,.06904454273764123,.06904454273764123,.0448142267656996,.0448142267656996,.019461788229726478,.019461788229726478],[.15275338713072584,.15275338713072584,.14917298647260374,.14917298647260374,.14209610931838204,.14209610931838204,.13168863844917664,.13168863844917664,.11819453196151841,.11819453196151841,.10193011981724044,.10193011981724044,.08327674157670475,.08327674157670475,.06267204833410907,.06267204833410907,.04060142980038694,.04060142980038694,.017614007139152118,.017614007139152118],[.14608113364969041,.14452440398997005,.14452440398997005,.13988739479107315,.13988739479107315,.13226893863333747,.13226893863333747,.12183141605372853,.12183141605372853,.10879729916714838,.10879729916714838,.09344442345603386,.09344442345603386,.0761001136283793,.0761001136283793,.057134425426857205,.057134425426857205,.036953789770852494,.036953789770852494,.016017228257774335,.016017228257774335],[.13925187285563198,.13925187285563198,.13654149834601517,.13654149834601517,.13117350478706238,.13117350478706238,.12325237681051242,.12325237681051242,.11293229608053922,.11293229608053922,.10041414444288096,.10041414444288096,.08594160621706773,.08594160621706773,.06979646842452049,.06979646842452049,.052293335152683286,.052293335152683286,.03377490158481415,.03377490158481415,.0146279952982722,.0146279952982722],[.13365457218610619,.1324620394046966,.1324620394046966,.12890572218808216,.12890572218808216,.12304908430672953,.12304908430672953,.11499664022241136,.11499664022241136,.10489209146454141,.10489209146454141,.09291576606003515,.09291576606003515,.07928141177671895,.07928141177671895,.06423242140852585,.06423242140852585,.04803767173108467,.04803767173108467,.030988005856979445,.030988005856979445,.013411859487141771,.013411859487141771],[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872]],qn=[[1],[1,1],[1,2,1],[1,3,3,1]],kn=2*Math.PI,Pn=function(t,n,e,r,i,a,o,s,h){var u=Math.sin(i*kn/360),c=Math.cos(i*kn/360),f=c*(t-s)/2+u*(n-h)/2,l=-u*(t-s)/2+c*(n-h)/2;if(0===f&&0===l)return[];if(0===e||0===r)return[];e=Math.abs(e),r=Math.abs(r);var p=f*f/(e*e)+l*l/(r*r);p>1&&(e*=Math.sqrt(p),r*=Math.sqrt(p));var g=S(t,n,s,h,a,o,e,r,u,c),v=[],x=g[2],y=g[3],d=Math.max(Math.ceil(Math.abs(y)/(kn/4)),1);y/=d;for(var m=0;m<d;m++)v.push(C(x,y)),x+=y;return v.map(function(t){for(var n=0;n<t.length;n+=2){var i=t[n+0],a=t[n+1];i*=e,a*=r;var o=c*i-u*a,s=u*i+c*a;t[n+0]=o+g[0],t[n+1]=s+g[1]}return t})},_n=function(t,n,e,r,i,a,o,s,h){return new Z(t,n,e,r,i,a,o,s,h)};Z.prototype={constructor:Z,init:function(){},getTotalLength:function(){return this.length},getPointAtLength:function(t){var n=this;t<0?t=0:t>this.length&&(t=this.length);for(var e=this.partialLengths.length-1;this.partialLengths[e]>=t&&this.partialLengths[e]>0;)e--;e<this.partialLengths.length-1&&e++;for(var r=0,i=0;i<e;i++)r+=n.partialLengths[i];return this.curves[e].getPointAtLength(t-r)},getTangentAtLength:function(t){var n=this;t<0?t=0:t>this.length&&(t=this.length);for(var e=this.partialLengths.length-1;this.partialLengths[e]>=t&&this.partialLengths[e]>0;)e--;e<this.partialLengths.length-1&&e++;for(var r=0,i=0;i<e;i++)r+=n.partialLengths[i];return this.curves[e].getTangentAtLength(t-r)},getPropertiesAtLength:function(t){var n=this.getTangentAtLength(t),e=this.getPointAtLength(t);return{x:e.x,y:e.y,tangentX:n.x,tangentY:n.y}}};var En=function(t,n,e,r){return new T(t,n,e,r)};T.prototype.getTotalLength=function(){return Math.sqrt(Math.pow(this.x0-this.x1,2)+Math.pow(this.y0-this.y1,2))},T.prototype.getPointAtLength=function(t){var n=t/Math.sqrt(Math.pow(this.x0-this.x1,2)+Math.pow(this.y0-this.y1,2)),e=(this.x1-this.x0)*n,r=(this.y1-this.y0)*n;return{x:this.x0+e,y:this.y0+r}},T.prototype.getTangentAtLength=function(){var t=Math.sqrt((this.x1-this.x0)*(this.x1-this.x0)+(this.y1-this.y0)*(this.y1-this.y0));return{x:(this.x1-this.x0)/t,y:(this.y1-this.y0)/t}},T.prototype.getPropertiesAtLength=function(t){var n=this.getPointAtLength(t),e=this.getTangentAtLength();return{x:n.x,y:n.y,tangentX:e.x,tangentY:e.y}};var Sn=function(t){function n(t){if(!t)return null;for(var a,o=Mn(t),s=[0,0],h=[0,0],u=0;u<o.length;u++)\"M\"===o[u][0]?(s=[o[u][1],o[u][2]],i.push(null)):\"m\"===o[u][0]?(s=[o[u][1]+s[0],o[u][2]+s[1]],i.push(null)):\"L\"===o[u][0]?(e+=Math.sqrt(Math.pow(s[0]-o[u][1],2)+Math.pow(s[1]-o[u][2],2)),i.push(new En(s[0],o[u][1],s[1],o[u][2])),s=[o[u][1],o[u][2]]):\"l\"===o[u][0]?(e+=Math.sqrt(Math.pow(o[u][1],2)+Math.pow(o[u][2],2)),i.push(new En(s[0],o[u][1]+s[0],s[1],o[u][2]+s[1])),s=[o[u][1]+s[0],o[u][2]+s[1]]):\"H\"===o[u][0]?(e+=Math.abs(s[0]-o[u][1]),i.push(new En(s[0],o[u][1],s[1],s[1])),s[0]=o[u][1]):\"h\"===o[u][0]?(e+=Math.abs(o[u][1]),i.push(new En(s[0],s[0]+o[u][1],s[1],s[1])),s[0]=o[u][1]+s[0]):\"V\"===o[u][0]?(e+=Math.abs(s[1]-o[u][1]),i.push(new En(s[0],s[0],s[1],o[u][1])),s[1]=o[u][1]):\"v\"===o[u][0]?(e+=Math.abs(o[u][1]),i.push(new En(s[0],s[0],s[1],s[1]+o[u][1])),s[1]=o[u][1]+s[1]):\"z\"===o[u][0]||\"Z\"===o[u][0]?(e+=Math.sqrt(Math.pow(o[0][1]-s[0],2)+Math.pow(o[0][2]-s[1],2)),i.push(new En(s[0],o[0][1],s[1],o[0][2])),s=[o[0][1],o[0][2]]):\"C\"===o[u][0]?(a=new bn(s[0],s[1],o[u][1],o[u][2],o[u][3],o[u][4],o[u][5],o[u][6]),e+=a.getTotalLength(),s=[o[u][5],o[u][6]],i.push(a)):\"c\"===o[u][0]?(a=new bn(s[0],s[1],s[0]+o[u][1],s[1]+o[u][2],s[0]+o[u][3],s[1]+o[u][4],s[0]+o[u][5],s[1]+o[u][6]),e+=a.getTotalLength(),s=[o[u][5]+s[0],o[u][6]+s[1]],i.push(a)):\"S\"===o[u][0]?(a=u>0&&[\"C\",\"c\",\"S\",\"s\"].indexOf(o[u-1][0])>-1?new bn(s[0],s[1],2*s[0]-o[u-1][o[u-1].length-4],2*s[1]-o[u-1][o[u-1].length-3],o[u][1],o[u][2],o[u][3],o[u][4]):new bn(s[0],s[1],s[0],s[1],o[u][1],o[u][2],o[u][3],o[u][4]),e+=a.getTotalLength(),s=[o[u][3],o[u][4]],i.push(a)):\"s\"===o[u][0]?(a=u>0&&[\"C\",\"c\",\"S\",\"s\"].indexOf(o[u-1][0])>-1?new bn(s[0],s[1],s[0]+a.d.x-a.c.x,s[1]+a.d.y-a.c.y,s[0]+o[u][1],s[1]+o[u][2],s[0]+o[u][3],s[1]+o[u][4]):new bn(s[0],s[1],s[0],s[1],s[0]+o[u][1],s[1]+o[u][2],s[0]+o[u][3],s[1]+o[u][4]),e+=a.getTotalLength(),s=[o[u][3]+s[0],o[u][4]+s[1]],i.push(a)):\"Q\"===o[u][0]?(a=new bn(s[0],s[1],o[u][1],o[u][2],o[u][3],o[u][4]),e+=a.getTotalLength(),i.push(a),s=[o[u][3],o[u][4]],h=[o[u][1],o[u][2]]):\"q\"===o[u][0]?(a=new bn(s[0],s[1],s[0]+o[u][1],s[1]+o[u][2],s[0]+o[u][3],s[1]+o[u][4]),e+=a.getTotalLength(),h=[s[0]+o[u][1],s[1]+o[u][2]],s=[o[u][3]+s[0],o[u][4]+s[1]],i.push(a)):\"T\"===o[u][0]?(a=u>0&&[\"Q\",\"q\",\"T\",\"t\"].indexOf(o[u-1][0])>-1?new bn(s[0],s[1],2*s[0]-h[0],2*s[1]-h[1],o[u][1],o[u][2]):new En(s[0],o[u][1],s[1],o[u][2]),i.push(a),e+=a.getTotalLength(),h=[2*s[0]-h[0],2*s[1]-h[1]],s=[o[u][1],o[u][2]]):\"t\"===o[u][0]?(a=u>0&&[\"Q\",\"q\",\"T\",\"t\"].indexOf(o[u-1][0])>-1?new bn(s[0],s[1],2*s[0]-h[0],2*s[1]-h[1],s[0]+o[u][1],s[1]+o[u][2]):new En(s[0],s[0]+o[u][1],s[1],s[1]+o[u][2]),e+=a.getTotalLength(),h=[2*s[0]-h[0],2*s[1]-h[1]],s=[o[u][1]+s[0],o[u][2]+s[0]],i.push(a)):\"A\"===o[u][0]?(a=new _n(s[0],s[1],o[u][1],o[u][2],o[u][3],o[u][4],o[u][5],o[u][6],o[u][7]),e+=a.getTotalLength(),s=[o[u][6],o[u][7]],i.push(a)):\"a\"===o[u][0]&&(a=new _n(s[0],s[1],o[u][1],o[u][2],o[u][3],o[u][4],o[u][5],s[0]+o[u][6],s[1]+o[u][7]),e+=a.getTotalLength(),s=[s[0]+o[u][6],s[1]+o[u][7]],i.push(a)),r.push(e);return n}var e=0,r=[],i=[];n.getTotalLength=function(){return e},n.getPointAtLength=function(t){var n=a(t);return i[n.i].getPointAtLength(n.fraction)},n.getTangentAtLength=function(t){var n=a(t);return i[n.i].getTangentAtLength(n.fraction)},n.getPropertiesAtLength=function(t){var n=a(t);return i[n.i].getPropertiesAtLength(n.fraction)};var a=function(t){t<0?t=0:t>e&&(t=e);for(var n=r.length-1;r[n]>=t&&r[n]>0;)n--;return n++,{fraction:t-r[n-1],i:n}};return n(t)},Cn='All shapes must be supplied as arrays of [x, y] points or an SVG path string (https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).\\nExample valid ways of supplying a shape would be:\\n[[0, 0], [10, 0], [10, 10]]\\n\"M0,0 L10,0 L10,10Z\"\\n',Zn=\"flubber.all() expects two arrays of equal length as arguments. Each element in both arrays should be an array of [x, y] points or an SVG path string (https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).\",Tn=function(t,n){for(var e,r,i,a=t.length,o=1/0,s=0;s<a;s++)!function(i){r=0,n.forEach(function(n,e){var o=F(t[(i+e)%a],n);r+=o*o}),r<o&&(o=r,e=i)}(s);e&&(i=t.splice(0,e),t.splice.apply(t,[t.length,0].concat(i)))},Fn=function(t,n,e){void 0===e&&(e={});var r=e.maxSegmentLength;void 0===r&&(r=10);var i=e.string;void 0===i&&(i=!0);var a=J(t,r),o=J(n,r),s=tt(a,o,i);return!i||\"string\"!=typeof t&&\"string\"!=typeof n?s:function(e){return e<1e-4&&\"string\"==typeof t?t:1-e<1e-4&&\"string\"==typeof n?n:s(e)}},zn=nt;nt.deviation=function(t,n,e,r){var i=n&&n.length,a=i?n[0]*e:t.length,o=Math.abs(Et(t,0,a,e));if(i)for(var s=0,h=n.length;s<h;s++){var u=n[s]*e,c=s<h-1?n[s+1]*e:t.length;o-=Math.abs(Et(t,u,c,e))}var f=0;for(s=0;s<r.length;s+=3){var l=r[s]*e,p=r[s+1]*e,g=r[s+2]*e;f+=Math.abs((t[l]-t[g])*(t[p+1]-t[l+1])-(t[l]-t[p])*(t[g+1]-t[l+1]))}return 0===o&&0===f?0:Math.abs((f-o)/o)},nt.flatten=function(t){for(var n=t[0][0].length,e={vertices:[],holes:[],dimensions:n},r=0,i=0;i<t.length;i++){for(var a=0;a<t[i].length;a++)for(var o=0;o<n;o++)e.vertices.push(t[i][a][o]);i>0&&(r+=t[i-1].length,e.holes.push(r))}return e};var jn=function(t){return t},In=function(t){if(null==t)return jn;var n,e,r=t.scale[0],i=t.scale[1],a=t.translate[0],o=t.translate[1];return function(t,s){s||(n=e=0);var h=2,u=t.length,c=new Array(u);for(c[0]=(n+=t[0])*r+a,c[1]=(e+=t[1])*i+o;h<u;)c[h]=t[h],++h;return c}},Vn=function(t,n){for(var e,r=t.length,i=r-n;i<--r;)e=t[i],t[i++]=t[r],t[r]=e},Xn=function(t,n){return\"GeometryCollection\"===n.type?{type:\"FeatureCollection\",features:n.geometries.map(function(n){return St(t,n)})}:St(t,n)},Yn=function(t,n){function e(n){var e,r=t.arcs[n<0?~n:n],i=r[0];return t.transform?(e=[0,0],r.forEach(function(t){e[0]+=t[0],e[1]+=t[1]})):e=r[r.length-1],n<0?[e,i]:[i,e]}function r(t,n){for(var e in t){var r=t[e];delete n[r.start],delete r.start,delete r.end,r.forEach(function(t){i[t<0?~t:t]=1}),s.push(r)}}var i={},a={},o={},s=[],h=-1;return n.forEach(function(e,r){var i,a=t.arcs[e<0?~e:e];a.length<3&&!a[1][0]&&!a[1][1]&&(i=n[++h],n[h]=e,n[r]=i)}),n.forEach(function(t){var n,r,i=e(t),s=i[0],h=i[1];if(n=o[s])if(delete o[n.end],n.push(t),n.end=h,r=a[h]){delete a[r.start];var u=r===n?n:n.concat(r);a[u.start=n.start]=o[u.end=r.end]=u}else a[n.start]=o[n.end]=n;else if(n=a[h])if(delete a[n.start],n.unshift(t),n.start=s,r=o[s]){delete o[r.end];var c=r===n?n:r.concat(n);a[c.start=r.start]=o[c.end=n.end]=c}else a[n.start]=o[n.end]=n;else n=[t],a[n.start=s]=o[n.end=h]=n}),r(o,a),r(a,o),n.forEach(function(t){i[t<0?~t:t]||s.push([t])}),s},Gn=function(t,n){for(var e=0,r=t.length;e<r;){var i=e+r>>>1;t[i]<n?e=i+1:r=i}return e},On=function(t){function n(t,n){t.forEach(function(t){t<0&&(t=~t);var e=i[t];e?e.push(n):i[t]=[n]})}function e(t,e){t.forEach(function(t){n(t,e)})}function r(t,n){\"GeometryCollection\"===t.type?t.geometries.forEach(function(t){r(t,n)}):t.type in o&&o[t.type](t.arcs,n)}var i={},a=t.map(function(){return[]}),o={LineString:n,MultiLineString:e,Polygon:e,MultiPolygon:function(t,n){t.forEach(function(t){e(t,n)})}};t.forEach(r);for(var s in i)for(var h=i[s],u=h.length,c=0;c<u;++c)for(var f=c+1;f<u;++f){var l,p=h[c],g=h[f];(l=a[p])[s=Gn(l,g)]!==g&&l.splice(s,0,g),(l=a[g])[s=Gn(l,p)]!==p&&l.splice(s,0,p)}return a},Dn=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},Hn=function(t){return 1===t.length&&(t=Ft(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)<0?r=a+1:i=a}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)>0?i=a:r=a+1}return r}}},Nn=Hn(Dn),Qn=(Nn.right,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2),function(t,n){return jt(zt(It(t),t),n)}),Un=function(t,n){if(t.length>8)return t.map(function(t,n){return n});var e=t.map(function(t){return n.map(function(n){return Xt(t,n)})});return Vt(t,n,e)};t.interpolate=Fn,t.separate=Yt,t.combine=Gt,t.interpolateAll=Ot,t.splitPathString=N,t.toPathString=H,t.fromCircle=Ht,t.toCircle=Nt,t.fromRect=Qt,t.toRect=Ut,Object.defineProperty(t,\"__esModule\",{value:!0})});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/flubber/build/flubber.min.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/Y2VkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./src/Player.js":
/*!***********************!*\
  !*** ./src/Player.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"./node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nconst TimeCapsule = new MC.TimeCapsule();\nconst prefix = '@kissmybutton/scrollbar_player';\n\nclass Player {\n  /**\n   * @param {object} options - The options object (optional). Supported options are:\n   * - clip: the Clip object\n   * - mode: one of chapters or free. If it is anchor then the clip will move back and forwards to anchor points\n   * - chapters: an array of objects each of which represents a chapter. The object has the following structure:\n   *  - name\n   *  - millisecond\n   * - wheelSpeed: a value from 1 to 10. Default 5\n   * - transitionSpeed: a number > 0 that defines the speed of the transition\n   * - swipeAxis: (either 'vertical' or 'horizontal'. Default = 'vertical')\n   * - easing: any of the supported MotorCortex easings\n   * - progressBar: an object with progressBar configuration:\n   *  - display: (boolean, default = true)\n   *  - color: the color of the scrollbar (default purple)\n   *  - position: (either \"left\", \"right\", \"top\" or \"bottom\", default \"right\")\n   **/\n  constructor(options = {}) {\n    this.clip = options.clip;\n    this.host = this.clip.props.host;\n    this.swipeAxis = (options.swipeAxis || 'vertical') === 'vertical' ? 'clientY' : 'clientX';\n    const mode = options.mode || \"free\";\n\n    if (mode === \"free\") {\n      this.host.onwheel = this.handlePlainWheel.bind(this);\n      this.journey = TimeCapsule.startJourney(this.clip);\n      this.host.addEventListener('touchstart', this._touchstart.bind(this));\n      this.host.addEventListener('touchmove', this._touchmove.bind(this));\n    } else if (mode === \"chapters\") {\n      this.transitionTimeout = null;\n      this.transitionSpeed = options.transitionSpeed || 1;\n      this.easing = MC.API.easings[options.easing || 'easeOutQuart'];\n      this.transitionStart = null;\n      options.chapters.sort(function (a, b) {\n        return a.millisecond - b.millisecond;\n      });\n      this.chapters = options.chapters;\n      this.transitioning = false;\n      this.host.onwheel = this.handleChapterWheel.bind(this);\n      this.host.addEventListener('touchstart', this._touchstart.bind(this));\n      this.host.addEventListener('touchmove', this._touchmove.bind(this));\n      this.host.addEventListener('touchend', this._chapterTouchend.bind(this));\n    }\n\n    const speedFactor = 5 / (options.wheelSpeed || 5);\n    this.speed = 1 / speedFactor;\n    let scrollbarOptions = {\n      display: true,\n      position: 'right',\n      color: 'purple'\n    };\n\n    if (options.hasOwnProperty('progressBar')) {\n      Object.assign(scrollbarOptions, options.progressBar);\n    }\n\n    this._setupScrollbar(scrollbarOptions);\n  }\n\n  _setupScrollbar(options) {\n    if (options.display === false) {\n      return;\n    }\n\n    const scrollbarDiv = document.createElement('div');\n    scrollbarDiv.setAttribute('id', `${prefix}-scrollbarId`);\n    let cssAttrs;\n    let variable;\n\n    switch (options.position) {\n      case 'left':\n        cssAttrs = 'left:0px; top: 0px; width: 2px; height: 0%;';\n        variable = 'height';\n        break;\n\n      case 'right':\n        cssAttrs = 'right:0px; top: 0px; width: 2px; height: 0%;';\n        variable = 'height';\n        break;\n\n      case 'top':\n        cssAttrs = 'top:0px; left: 0px; height: 2px; width: 0%;';\n        variable = 'width';\n        break;\n\n      case 'bottom':\n        cssAttrs = 'bottom:0px; left: 0px; height: 2px; width: 0%;';\n        variable = 'width';\n        break;\n    }\n\n    scrollbarDiv.setAttribute('style', `${cssAttrs} position:absolute; background: ${options.color};`);\n    this.host.appendChild(scrollbarDiv);\n    this.clip.subscribe(`${prefix}_${new Date().getTime()}`, (ms, state) => {\n      scrollbarDiv.style[variable] = `${100 * ms / this.clip.duration}%`;\n    });\n  }\n\n  _touchstart(ev) {\n    ev.preventDefault();\n\n    if (ev.touches.length === 1) {\n      this.previousTouch = ev.touches[0][this.swipeAxis];\n      this.transitioning = false;\n    }\n  }\n\n  _touchmove(ev) {\n    ev.preventDefault();\n    this.transitioning = false;\n\n    if (this.transitionTimeout !== null) {\n      clearTimeout(this.transitionTimeout);\n    }\n\n    const distance = this.previousTouch - event.touches[0][this.swipeAxis];\n\n    if (distance > 0) {\n      this.direction = 'fw';\n    } else {\n      this.direction = 'bw';\n    }\n\n    this.previousTouch = event.touches[0][this.swipeAxis];\n    let millisecondsDelta = 10 * distance * this.speed;\n    const journey = TimeCapsule.startJourney(this.clip);\n    let newStation = this.clip.runTimeInfo.currentMillisecond + millisecondsDelta;\n\n    if (newStation < 0) {\n      newStation = 0;\n      millisecondsDelta = 0;\n    } else if (newStation > this.clip.duration) {\n      newStation = this.clip.duration;\n      millisecondsDelta = 0;\n    }\n\n    journey.destination(newStation);\n  }\n\n  _chapterTouchend(event) {\n    event.preventDefault();\n\n    if (this.direction === 'fw' && this.clip.runTimeInfo.currentMillisecond !== this.clip.duration) {\n      const nextChpater = this._getNextChapter(this.clip.runTimeInfo.currentMillisecond);\n\n      this.transitionTimeout = setTimeout(() => {\n        this.transitionToChapter(nextChpater, 'fw');\n      }, this.latency);\n    } else if (this.direction === 'bw' && this.clip.runTimeInfo.currentMillisecond !== 0) {\n      const nextChpater = this._getPreviousChapter(this.clip.runTimeInfo.currentMillisecond);\n\n      this.transitionTimeout = setTimeout(() => {\n        this.transitionToChapter(nextChpater, 'bw');\n      }, this.latency);\n    }\n  }\n\n  _getNextChapter(millisecond) {\n    for (let i = 0; i < this.chapters.length; i++) {\n      const chapter = this.chapters[i];\n\n      if (chapter.millisecond > millisecond) {\n        return chapter.millisecond;\n      }\n    }\n\n    return this.clip.duration;\n  }\n\n  _getPreviousChapter(millisecond) {\n    for (let i = this.chapters.length - 1; i >= 0; i--) {\n      const chapter = this.chapters[i];\n\n      if (chapter.millisecond < millisecond) {\n        return chapter.millisecond;\n      }\n    }\n\n    return 0;\n  }\n\n  handleChapterWheel(event) {\n    event.preventDefault();\n    this.transitioning = false;\n\n    if (this.transitionTimeout !== null) {\n      clearTimeout(this.transitionTimeout);\n    }\n\n    let millisecondsDelta = event.deltaY * this.speed;\n    const journey = TimeCapsule.startJourney(this.clip);\n    let newStation = this.clip.runTimeInfo.currentMillisecond + millisecondsDelta;\n\n    if (newStation < 0) {\n      newStation = 0;\n      millisecondsDelta = 0;\n    } else if (newStation > this.clip.duration) {\n      newStation = this.clip.duration;\n      millisecondsDelta = 0;\n    }\n\n    if (millisecondsDelta > 0) {\n      const nextChpater = this._getNextChapter(newStation);\n\n      this.transitionTimeout = setTimeout(() => {\n        this.transitionToChapter(nextChpater, 'fw');\n      }, this.latency);\n    } else if (millisecondsDelta < 0) {\n      const nextChpater = this._getPreviousChapter(newStation);\n\n      this.transitionTimeout = setTimeout(() => {\n        this.transitionToChapter(nextChpater, 'bw');\n      }, this.latency);\n    }\n\n    journey.destination(newStation);\n  }\n\n  transitionToChapter(millisecond) {\n    this.transitioning = true;\n    this.transitionStart = null;\n    this.targetMillisecond = millisecond;\n    this.startMillisecond = this.clip.runTimeInfo.currentMillisecond;\n    this.journey = TimeCapsule.startJourney(this.clip);\n    this.direction = this.targetMillisecond >= this.startMillisecond ? 'fw' : 'bw';\n    window.requestAnimationFrame(this._step.bind(this));\n  }\n\n  _step(timestamp) {\n    if (this.transitionStart === null) {\n      this.transitionStart = timestamp;\n    }\n\n    const progress = timestamp - this.transitionStart;\n    let completed = false;\n    let station;\n\n    if (this.direction === 'fw') {\n      station = this.startMillisecond + progress * this.transitionSpeed;\n\n      if (station > this.targetMillisecond) {\n        station = this.targetMillisecond;\n        completed = true;\n      }\n    } else {\n      station = this.startMillisecond - progress * this.transitionSpeed;\n\n      if (station < this.targetMillisecond) {\n        station = this.targetMillisecond;\n        completed = true;\n      }\n    }\n\n    if (this.transitioning === false) {\n      return;\n    }\n\n    const easedProgress = Math.abs(station - this.startMillisecond) / Math.abs(this.targetMillisecond - this.startMillisecond);\n    let easedMillisecond;\n\n    if (this.direction === 'fw') {\n      easedMillisecond = this.startMillisecond + this.easing(easedProgress) * (this.targetMillisecond - this.startMillisecond);\n    } else {\n      easedMillisecond = this.startMillisecond - this.easing(easedProgress) * (this.startMillisecond - this.targetMillisecond);\n    }\n\n    this.journey.station(easedMillisecond);\n\n    if (completed) {\n      this.journey.destination();\n    } else {\n      window.requestAnimationFrame(this._step.bind(this));\n    }\n  }\n\n  handlePlainWheel(event) {\n    event.preventDefault();\n    const millisecondsDelta = event.deltaY * this.speed;\n    let newStation = this.clip.runTimeInfo.currentMillisecond + millisecondsDelta;\n\n    if (newStation < 0) {\n      newStation = 0;\n    } else if (newStation > this.clip.duration) {\n      newStation = this.clip.duration;\n    }\n\n    this.journey.station(newStation);\n  }\n\n}\n\nmodule.exports = Player;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Player.js\n");

/***/ }),

/***/ "./test/script.js":
/*!************************!*\
  !*** ./test/script.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const MCFlubber = __webpack_require__(/*! @kissmybutton/motorcortex-flubber */ \"./node_modules/@kissmybutton/motorcortex-flubber/dist/main.js\");\n\nconst MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"./node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nconst FlubberPlugin = MC.loadPlugin(MCFlubber);\n\nconst Player = __webpack_require__(/*! ../src/Player */ \"./src/Player.js\");\n\nconst myClip = new MC.Clip({\n  id: 'my-clip',\n  host: document.getElementById('clip-container'),\n  html: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"960\" height=\"500\">\n            <g transform=\"translate(240 10) scale(30 30)\">\n                <path id=\"flubber\" d=\"M1,0 L2,2 L0,2 Z\"></path>\n            </g>\n        </svg>`,\n  css: `#flubber{\n        fill: #8b00ff;\n        display:block;\n    }\n    svg{\n        background: black; \n    }`\n});\nconst flubberIncident = new FlubberPlugin.Flubber({\n  animatedAttrs: {\n    d: [[0, 0], [2, 0], [2, 1], [1, 2], [0, 1]]\n  }\n}, {\n  selector: '#flubber',\n  duration: 2000\n});\nconst fubberIncident2 = new FlubberPlugin.Flubber({\n  animatedAttrs: {\n    d: \"M2 1 h1 v1 h1 v1 h-1 v1 h-1 v-1 h-1 v-1 h1 z\"\n  }\n}, {\n  selector: '#flubber',\n  duration: 2000\n});\nmyClip.addIncident(flubberIncident, 0);\nmyClip.addIncident(fubberIncident2, 2000);\nnew Player({\n  clip: myClip,\n  wheelSpeed: 5,\n  mode: 'chapters',\n  chapters: [{\n    millisecond: 2000,\n    name: 'chapter 1'\n  }, {\n    millisecond: 4000,\n    name: 'chapter 2'\n  }],\n  transitionSpeed: 2,\n  swipeAxis: 'horizontal',\n  progressBar: {\n    color: 'pink',\n    position: 'bottom'\n  }\n}); // myClip.play();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZXN0L3NjcmlwdC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy90ZXN0L3NjcmlwdC5qcz84ODdhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1DRmx1YmJlciA9IHJlcXVpcmUoJ0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgtZmx1YmJlcicpO1xuY29uc3QgTUMgPSByZXF1aXJlKCdAa2lzc215YnV0dG9uL21vdG9yY29ydGV4Jyk7XG5jb25zdCBGbHViYmVyUGx1Z2luID0gTUMubG9hZFBsdWdpbihNQ0ZsdWJiZXIpO1xuY29uc3QgUGxheWVyID0gcmVxdWlyZSgnLi4vc3JjL1BsYXllcicpO1xuXG5jb25zdCBteUNsaXAgPSBuZXcgTUMuQ2xpcCh7XG4gICAgaWQ6ICdteS1jbGlwJyxcbiAgICBob3N0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xpcC1jb250YWluZXInKSxcbiAgICBodG1sOiBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCI5NjBcIiBoZWlnaHQ9XCI1MDBcIj5cbiAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgyNDAgMTApIHNjYWxlKDMwIDMwKVwiPlxuICAgICAgICAgICAgICAgIDxwYXRoIGlkPVwiZmx1YmJlclwiIGQ9XCJNMSwwIEwyLDIgTDAsMiBaXCI+PC9wYXRoPlxuICAgICAgICAgICAgPC9nPlxuICAgICAgICA8L3N2Zz5gLFxuICAgIGNzczogYCNmbHViYmVye1xuICAgICAgICBmaWxsOiAjOGIwMGZmO1xuICAgICAgICBkaXNwbGF5OmJsb2NrO1xuICAgIH1cbiAgICBzdmd7XG4gICAgICAgIGJhY2tncm91bmQ6IGJsYWNrOyBcbiAgICB9YFxufSk7XG5cbmNvbnN0IGZsdWJiZXJJbmNpZGVudCA9IG5ldyBGbHViYmVyUGx1Z2luLkZsdWJiZXIoe1xuICAgIGFuaW1hdGVkQXR0cnM6IHtcbiAgICAgICAgZDogW1xuICAgICAgICAgICAgWzAsIDBdLFxuICAgICAgICAgICAgWzIsIDBdLFxuICAgICAgICAgICAgWzIsIDFdLFxuICAgICAgICAgICAgWzEsIDJdLFxuICAgICAgICAgICAgWzAsIDFdXG4gICAgICAgIF1cbiAgICB9XG59LCB7XG4gICAgc2VsZWN0b3I6ICcjZmx1YmJlcicsXG4gICAgZHVyYXRpb246IDIwMDBcbn0pO1xuXG5jb25zdCBmdWJiZXJJbmNpZGVudDIgPSBuZXcgRmx1YmJlclBsdWdpbi5GbHViYmVyKHtcbiAgICBhbmltYXRlZEF0dHJzOiB7XG4gICAgICAgIGQ6IFwiTTIgMSBoMSB2MSBoMSB2MSBoLTEgdjEgaC0xIHYtMSBoLTEgdi0xIGgxIHpcIlxuICAgIH1cbn0sIHtcbiAgICBzZWxlY3RvcjogJyNmbHViYmVyJyxcbiAgICBkdXJhdGlvbjogMjAwMFxufSk7XG5cbm15Q2xpcC5hZGRJbmNpZGVudChmbHViYmVySW5jaWRlbnQsIDApO1xubXlDbGlwLmFkZEluY2lkZW50KGZ1YmJlckluY2lkZW50MiwgMjAwMCk7XG5uZXcgUGxheWVyKHtcbiAgICBjbGlwOiBteUNsaXAsXG4gICAgd2hlZWxTcGVlZDogNSxcbiAgICBtb2RlOiAnY2hhcHRlcnMnLFxuICAgIGNoYXB0ZXJzOiBbe1xuICAgICAgICAgICAgbWlsbGlzZWNvbmQ6IDIwMDAsXG4gICAgICAgICAgICBuYW1lOiAnY2hhcHRlciAxJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZDogNDAwMCxcbiAgICAgICAgICAgIG5hbWU6ICdjaGFwdGVyIDInXG4gICAgICAgIH1cbiAgICBdLFxuICAgIHRyYW5zaXRpb25TcGVlZDogMixcbiAgICBzd2lwZUF4aXM6ICdob3Jpem9udGFsJyxcbiAgICBwcm9ncmVzc0Jhcjoge1xuICAgICAgICBjb2xvcjogJ3BpbmsnLFxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbSdcbiAgICB9XG59KTtcblxuXG4vLyBteUNsaXAucGxheSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFIQTtBQVFBOzs7Ozs7O0FBUkE7QUFpQkE7QUFDQTtBQUNBO0FBREE7QUFEQTtBQVdBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQURBO0FBREE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQWZBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./test/script.js\n");

/***/ })

/******/ });